var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __decorateClass = (decorators, target, key2, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key2) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key2, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key2, result);
  return result;
};
var __publicField = (obj, key2, value) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});

// ../../../usr/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal2 = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal2, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval3, callback) {
  return Astal.Time.interval(interval3, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal.Time.timeout(timeout2, () => void callback?.());
}

// ../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal2.Process.execv(cmd) : Astal2.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval3, exec2, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval3;
    this.pollTransform = transform;
    if (typeof exec2 === "function") {
      this.pollFn = exec2;
      delete this.pollExec;
    } else {
      this.pollExec = exec2;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec2, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec2;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps2, fn = (...args) => args) {
    const update = () => fn(...deps2.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps2.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function hook(widget2, object, signalOrCallback, callback) {
  if (typeof object.connect === "function" && callback) {
    const id = object.connect(signalOrCallback, (_, ...args) => {
      callback(widget2, ...args);
    });
    widget2.connect("destroy", () => {
      object.disconnect(id);
    });
  } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
    const unsub = object.subscribe((...args) => {
      signalOrCallback(widget2, ...args);
    });
    widget2.connect("destroy", unsub);
  }
}
function construct(widget2, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key2];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key2) => {
    if (key2.startsWith("on")) {
      const sig = kebabify(key2).split("-").slice(1).join("-");
      const handler2 = props[key2];
      delete props[key2];
      return [...acc, [sig, handler2]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget2[setChildren](mergedChildren.get());
    widget2.connect("destroy", mergedChildren.subscribe((v) => {
      widget2[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget2[setChildren](mergedChildren);
    }
  }
  for (const [signal2, callback] of onHandlers) {
    const sig = signal2.startsWith("notify") ? signal2.replace("-", "::") : signal2;
    if (typeof callback === "function") {
      widget2.connect(sig, callback);
    } else {
      widget2.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget2.connect("destroy", binding.subscribe((v) => {
        widget2[setChildren](v);
      }));
    }
    widget2.connect("destroy", binding.subscribe((v) => {
      setProp(widget2, prop, v);
    }));
    setProp(widget2, prop, binding.get());
  }
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key2];
    }
  }
  Object.assign(widget2, props);
  setup?.(widget2);
  return widget2;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../usr/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";
function astalify(cls, clsName = cls.name) {
  class Widget7 extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this[noImplicitDestroy];
    }
    set noImplicitDestroy(value) {
      this[noImplicitDestroy] = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    getChildren() {
      if (this instanceof Gtk.Bin) {
        return this.get_child() ? [this.get_child()] : [];
      } else if (this instanceof Gtk.Container) {
        return this.get_children();
      }
      return [];
    }
    setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}`);
      }
    }
    [setChildren](children) {
      if (this instanceof Gtk.Container) {
        for (const ch of this.getChildren()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      this.setChildren(children);
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      hook(this, object, signalOrCallback, callback);
      return this;
    }
    constructor(...params) {
      super();
      const props = params[0] || {};
      props.visible ??= true;
      construct(this, props);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget7);
  return Widget7;
}

// ../../../usr/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth: Bluetooth2, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth2.prototype, "adapters");
  patch(Bluetooth2.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland2, Monitor, Workspace }) => {
  patch(Hyprland2.prototype, "monitors");
  patch(Hyprland2.prototype, "workspaces");
  patch(Hyprland2.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi: Wifi2 }) => {
  patch(Wifi2.prototype, "access_points");
  patch(Wifi2.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles: PowerProfiles2 }) => {
  patch(PowerProfiles2.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style3, reset = false) {
      super.apply_css(style3, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons: icons2, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_message(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons2)
        app.add_icons(icons2);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../usr/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../usr/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const ch = filter(children);
    this.startWidget = ch[0] || new Gtk3.Box();
    this.centerWidget = ch[1] || new Gtk3.Box();
    this.endWidget = ch[2] || new Gtk3.Box();
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
  setChildren(children) {
    this.label = String(children);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject3.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const [child, ...overlays] = filter(children);
    this.set_child(child);
    this.set_overlays(overlays);
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// ../../../usr/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";
function readFile(path) {
  return Astal8.read_file(path) || "";
}
function readFileAsync(path) {
  return new Promise((resolve, reject) => {
    Astal8.read_file_async(path, (_, res) => {
      try {
        resolve(Astal8.read_file_finish(res) || "");
      } catch (error) {
        reject(error);
      }
    });
  });
}
function writeFile(path, content) {
  Astal8.write_file(path, content);
}
function monitorFile(path, callback) {
  return Astal8.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// ../../../usr/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;
var kebabify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
function register(options3 = {}) {
  return function(cls) {
    const t = options3.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options3.Template = new TextEncoder().encode(t);
    }
    GObject4.registerClass({
      Signals: { ...cls[meta]?.Signals },
      Properties: { ...cls[meta]?.Properties },
      ...options3
    }, cls);
    delete cls[meta];
  };
}
function property(declaration = Object) {
  return function(target, prop, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Properties ??= {};
    const name2 = kebabify2(prop);
    if (!desc) {
      Object.defineProperty(target, prop, {
        get() {
          return this[priv]?.[prop] ?? defaultValue(declaration);
        },
        set(v) {
          if (v !== this[prop]) {
            this[priv] ??= {};
            this[priv][prop] = v;
            this.notify(name2);
          }
        }
      });
      Object.defineProperty(target, `set_${name2.replace("-", "_")}`, {
        value(v) {
          this[prop] = v;
        }
      });
      Object.defineProperty(target, `get_${name2.replace("-", "_")}`, {
        value() {
          return this[prop];
        }
      });
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name2, ParamFlags.READWRITE, declaration);
    } else {
      let flags = 0;
      if (desc.get) flags |= ParamFlags.READABLE;
      if (desc.set) flags |= ParamFlags.WRITABLE;
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name2, flags, declaration);
    }
  };
}
function signal(declaration, ...params) {
  return function(target, signal2, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Signals ??= {};
    const name2 = kebabify2(signal2);
    if (declaration || params.length > 0) {
      const arr = [declaration, ...params].map((v) => v.$gtype);
      target.constructor[meta].Signals[name2] = {
        param_types: arr
      };
    } else {
      target.constructor[meta].Signals[name2] = declaration || {
        param_types: []
      };
    }
    if (!desc) {
      Object.defineProperty(target, signal2, {
        value: function(...args) {
          this.emit(name2, ...args);
        }
      });
    } else {
      const og = desc.value;
      desc.value = function(...args) {
        this.emit(name2, ...args);
      };
      Object.defineProperty(target, `on_${name2.replace("-", "_")}`, {
        value: function(...args) {
          return og(...args);
        }
      });
    }
  };
}
function pspec(name2, flags, declaration) {
  if (declaration instanceof ParamSpec)
    return declaration;
  switch (declaration) {
    case String:
      return ParamSpec.string(name2, "", "", flags, "");
    case Number:
      return ParamSpec.double(name2, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
    case Boolean:
      return ParamSpec.boolean(name2, "", "", flags, false);
    case Object:
      return ParamSpec.jsobject(name2, "", "", flags);
    default:
      return ParamSpec.object(name2, "", "", flags, declaration.$gtype);
  }
}
function defaultValue(declaration) {
  if (declaration instanceof ParamSpec)
    return declaration.get_default_value();
  switch (declaration) {
    case String:
      return "";
    case Number:
      return 0;
    case Boolean:
      return false;
    case Object:
    default:
      return null;
  }
}

// src/lib/session.ts
function ensureDirectory(path) {
  if (!default2.file_test(path, default2.FileTest.EXISTS)) {
    Gio.File.new_for_path(path).make_directory_with_parents(null);
  }
}
function ensureFile(path) {
  const file = Gio.File.new_for_path(path);
  const parent = file.get_parent();
  if (parent && !parent.query_exists(null)) {
    parent.make_directory_with_parents(null);
  }
  if (!file.query_exists(null)) {
    file.create(Gio.FileCreateFlags.NONE, null);
  }
}
var dataDir = true ? "/usr/share/hyprpanel" : "/home/fred/HyprPanel";
Object.assign(globalThis, {
  CONFIG: `${default2.get_user_config_dir()}/hyprpanel/config.json`,
  TMP: `${default2.get_tmp_dir()}/hyprpanel`,
  USER: default2.get_user_name(),
  SRC_DIR: dataDir
});
ensureDirectory(TMP);
ensureFile(CONFIG);
app_default.add_icons(`${SRC_DIR}/assets`);

// src/globals/variables.ts
var isHexColor = (val) => {
  return typeof val === "string" && /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(val);
};

// src/lib/option.ts
import GLib3 from "gi://GLib?version=2.0";

// src/lib/icons/icons.ts
var icons_default = {
  missing: "image-missing-symbolic",
  nix: {
    nix: "nix-snowflake-symbolic"
  },
  app: {
    terminal: "terminal-symbolic"
  },
  fallback: {
    executable: "application-x-executable",
    notification: "dialog-information-symbolic",
    video: "video-x-generic-symbolic",
    audio: "audio-x-generic-symbolic"
  },
  ui: {
    close: "window-close-symbolic",
    colorpicker: "color-select-symbolic",
    info: "info-symbolic",
    link: "external-link-symbolic",
    lock: "system-lock-screen-symbolic",
    menu: "open-menu-symbolic",
    refresh: "view-refresh-symbolic",
    search: "system-search-symbolic",
    settings: "emblem-system-symbolic",
    themes: "preferences-desktop-theme-symbolic",
    tick: "object-select-symbolic",
    time: "hourglass-symbolic",
    toolbars: "toolbars-symbolic",
    warning: "dialog-warning-symbolic",
    arrow: {
      right: "pan-end-symbolic",
      left: "pan-start-symbolic",
      down: "pan-down-symbolic",
      up: "pan-up-symbolic"
    }
  },
  audio: {
    mic: {
      muted: "microphone-disabled-symbolic",
      low: "microphone-sensitivity-low-symbolic",
      medium: "microphone-sensitivity-medium-symbolic",
      high: "microphone-sensitivity-high-symbolic"
    },
    volume: {
      muted: "audio-volume-muted-symbolic",
      low: "audio-volume-low-symbolic",
      medium: "audio-volume-medium-symbolic",
      high: "audio-volume-high-symbolic",
      overamplified: "audio-volume-overamplified-symbolic"
    },
    type: {
      headset: "audio-headphones-symbolic",
      speaker: "audio-speakers-symbolic",
      card: "audio-card-symbolic"
    },
    mixer: "mixer-symbolic"
  },
  powerprofile: {
    balanced: "power-profile-balanced-symbolic",
    "power-saver": "power-profile-power-saver-symbolic",
    performance: "power-profile-performance-symbolic"
  },
  asusctl: {
    profile: {
      Balanced: "power-profile-balanced-symbolic",
      Quiet: "power-profile-power-saver-symbolic",
      Performance: "power-profile-performance-symbolic"
    },
    mode: {
      Integrated: "processor-symbolic",
      Hybrid: "controller-symbolic"
    }
  },
  battery: {
    charging: "battery-flash-symbolic",
    warning: "battery-empty-symbolic"
  },
  bluetooth: {
    enabled: "bluetooth-active-symbolic",
    disabled: "bluetooth-disabled-symbolic"
  },
  brightness: {
    indicator: "display-brightness-symbolic",
    keyboard: "keyboard-brightness-symbolic",
    screen: "display-brightness-symbolic"
  },
  powermenu: {
    sleep: "weather-clear-night-symbolic",
    reboot: "system-reboot-symbolic",
    logout: "system-log-out-symbolic",
    shutdown: "system-shutdown-symbolic"
  },
  recorder: {
    recording: "media-record-symbolic"
  },
  notifications: {
    noisy: "org.gnome.Settings-notifications-symbolic",
    silent: "notifications-disabled-symbolic",
    message: "chat-bubbles-symbolic"
  },
  trash: {
    full: "user-trash-full-symbolic",
    empty: "user-trash-symbolic"
  },
  mpris: {
    shuffle: {
      enabled: "media-playlist-shuffle-symbolic",
      disabled: "media-playlist-consecutive-symbolic"
    },
    loop: {
      none: "media-playlist-repeat-symbolic",
      track: "media-playlist-repeat-song-symbolic",
      playlist: "media-playlist-repeat-symbolic"
    },
    playing: "media-playback-pause-symbolic",
    paused: "media-playback-start-symbolic",
    stopped: "media-playback-start-symbolic",
    prev: "media-skip-backward-symbolic",
    next: "media-skip-forward-symbolic"
  },
  system: {
    cpu: "org.gnome.SystemMonitor-symbolic",
    ram: "drive-harddisk-solidstate-symbolic",
    temp: "temperature-symbolic"
  },
  color: {
    dark: "dark-mode-symbolic",
    light: "light-mode-symbolic"
  }
};

// src/lib/utils.ts
import GLib2 from "gi://GLib?version=2.0";
import GdkPixbuf from "gi://GdkPixbuf";

// src/lib/constants/colors.ts
var namedColors = /* @__PURE__ */ new Set([
  "alice blue",
  "antique white",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanched almond",
  "blue",
  "blue violet",
  "brown",
  "burlywood",
  "cadet blue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflower blue",
  "cornsilk",
  "crimson",
  "cyan",
  "dark blue",
  "dark cyan",
  "dark goldenrod",
  "dark gray",
  "dark green",
  "dark khaki",
  "dark magenta",
  "dark olive green",
  "dark orange",
  "dark orchid",
  "dark red",
  "dark salmon",
  "dark sea green",
  "dark slate blue",
  "dark slate gray",
  "dark turquoise",
  "dark violet",
  "deep pink",
  "deep sky blue",
  "dim gray",
  "dodger blue",
  "firebrick",
  "floral white",
  "forest green",
  "fuchsia",
  "gainsboro",
  "ghost white",
  "gold",
  "goldenrod",
  "gray",
  "green",
  "green yellow",
  "honeydew",
  "hot pink",
  "indian red",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavender blush",
  "lawn green",
  "lemon chiffon",
  "light blue",
  "light coral",
  "light cyan",
  "light goldenrod yellow",
  "light green",
  "light grey",
  "light pink",
  "light salmon",
  "light sea green",
  "light sky blue",
  "light slate gray",
  "light steel blue",
  "light yellow",
  "lime",
  "lime green",
  "linen",
  "magenta",
  "maroon",
  "medium aquamarine",
  "medium blue",
  "medium orchid",
  "medium purple",
  "medium sea green",
  "medium slate blue",
  "medium spring green",
  "medium turquoise",
  "medium violet red",
  "midnight blue",
  "mint cream",
  "misty rose",
  "moccasin",
  "navajo white",
  "navy",
  "old lace",
  "olive",
  "olive drab",
  "orange",
  "orange red",
  "orchid",
  "pale goldenrod",
  "pale green",
  "pale turquoise",
  "pale violet red",
  "papaya whip",
  "peach puff",
  "peru",
  "pink",
  "plum",
  "powder blue",
  "purple",
  "red",
  "rosy brown",
  "royal blue",
  "saddle brown",
  "salmon",
  "sandy brown",
  "sea green",
  "seashell",
  "sienna",
  "silver",
  "sky blue",
  "slate blue",
  "slate gray",
  "snow",
  "spring green",
  "steel blue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "white smoke",
  "yellow",
  "yellow green"
]);

// src/lib/constants/distro.ts
var distroIcons = [
  ["deepin", "\uF321"],
  ["fedora", "\uF30A"],
  ["arch", "\uF303"],
  ["nixos", "\uF313"],
  ["debian", "\uF306"],
  ["opensuse-tumbleweed", "\uF314"],
  ["ubuntu", "\uF31C"],
  ["endeavouros", "\uF322"],
  ["manjaro", "\uF312"],
  ["popos", "\uF32A"],
  ["garuda", "\uF337"],
  ["zorin", "\uF32F"],
  ["mxlinux", "\uF33F"],
  ["arcolinux", "\uF346"],
  ["gentoo", "\uF30D"],
  ["artix", "\uF31F"],
  ["centos", "\uF304"],
  ["hyperbola", "\uF33A"],
  ["kubuntu", "\uF333"],
  ["mandriva", "\uF311"],
  ["xerolinux", "\uF34A"],
  ["parabola", "\uF340"],
  ["void", "\uF32E"],
  ["linuxmint", "\uF30E"],
  ["archlabs", "\uF31E"],
  ["devuan", "\uF307"],
  ["freebsd", "\uF30C"],
  ["openbsd", "\uF328"],
  ["slackware", "\uF318"]
];

// ../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// src/lib/variables.ts
import GLib from "gi://GLib";
var clock = Variable(GLib.DateTime.new_now_local()).poll(
  1e3,
  () => GLib.DateTime.new_now_local()
);
var uptime = Variable(0).poll(
  6e3,
  "cat /proc/uptime",
  (line) => Number.parseInt(line.split(".")[0]) / 60
);
var distro = {
  id: GLib.get_os_info("ID"),
  logo: GLib.get_os_info("LOGO")
};

// src/lib/utils.ts
function errorHandler(error) {
  if (error instanceof Error) {
    throw new Error(error.message);
  }
  throw new Error(String(error));
}
function lookUpIcon(name2, size = 16) {
  if (!name2) return null;
  return Gtk4.IconTheme.get_default().lookup_icon(name2, size, Gtk4.IconLookupFlags.USE_BUILTIN);
}
function getLayoutItems() {
  const { layouts: layouts3 } = options_default.bar;
  const itemsInLayout = [];
  Object.keys(layouts3.get()).forEach((monitor3) => {
    const leftItems = layouts3.get()[monitor3].left;
    const rightItems = layouts3.get()[monitor3].right;
    const middleItems = layouts3.get()[monitor3].middle;
    itemsInLayout.push(...leftItems);
    itemsInLayout.push(...middleItems);
    itemsInLayout.push(...rightItems);
  });
  return [...new Set(itemsInLayout)];
}
async function bash(strings, ...values) {
  const cmd = typeof strings === "string" ? strings : strings.flatMap((str, i) => str + `${values[i] ?? ""}`).join("");
  return execAsync(["bash", "-c", cmd]).catch((err) => {
    console.error(cmd, err);
    return "";
  });
}
async function sh(cmd) {
  return execAsync(cmd).catch((err) => {
    console.error(typeof cmd === "string" ? cmd : cmd.join(" "), err);
    return "";
  });
}
function forMonitors(widget2) {
  const n = Gdk.Display.get_default()?.get_n_monitors() || 1;
  return range(n, 0).flatMap(widget2);
}
function range(length, start = 1) {
  return Array.from({ length }, (_, i) => i + start);
}
function dependencies(...bins) {
  const missing = bins.filter((bin) => {
    try {
      exec(`which ${bin}`);
      return false;
    } catch (e) {
      console.error(e);
      return true;
    }
  });
  if (missing.length > 0) {
    console.warn(Error(`missing dependencies: ${missing.join(", ")}`));
    Notify({
      summary: "Dependencies not found!",
      body: `The following dependencies are missing: ${missing.join(", ")}`,
      iconName: icons_default.ui.warning
    });
  }
  return missing.length === 0;
}
function isAnImage(imgFilePath) {
  try {
    GdkPixbuf.Pixbuf.new_from_file(normalizePath(imgFilePath));
    return true;
  } catch (error) {
    console.info(error);
    return false;
  }
}
function normalizePath(path) {
  if (path.charAt(0) == "~") {
    return path.replace("~", GLib2.get_home_dir());
  }
  return path;
}
function Notify(notifPayload) {
  let command = "notify-send";
  command += ` "${notifPayload.summary} "`;
  if (notifPayload.body) command += ` "${notifPayload.body}" `;
  if (notifPayload.appName) command += ` -a "${notifPayload.appName}"`;
  if (notifPayload.iconName) command += ` -i "${notifPayload.iconName}"`;
  if (notifPayload.urgency) command += ` -u "${notifPayload.urgency}"`;
  if (notifPayload.timeout !== void 0) command += ` -t ${notifPayload.timeout}`;
  if (notifPayload.category) command += ` -c "${notifPayload.category}"`;
  if (notifPayload.transient) command += ` -e`;
  if (notifPayload.id !== void 0) command += ` -r ${notifPayload.id}`;
  execAsync(command).then().catch((err) => {
    console.error(`Failed to send notification: ${err.message}`);
  });
}
function getPosition(pos) {
  const positionMap = {
    top: Astal7.WindowAnchor.TOP,
    "top right": Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.RIGHT,
    "top left": Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT,
    bottom: Astal7.WindowAnchor.BOTTOM,
    "bottom right": Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.RIGHT,
    "bottom left": Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.LEFT,
    right: Astal7.WindowAnchor.RIGHT,
    left: Astal7.WindowAnchor.LEFT
  };
  return positionMap[pos] || Astal7.WindowAnchor.TOP;
}
function isValidGjsColor(color2) {
  const colorLower = color2.toLowerCase().trim();
  if (namedColors.has(colorLower)) {
    return true;
  }
  const hexColorRegex = /^#(?:[a-fA-F0-9]{3,4}|[a-fA-F0-9]{6,8})$/;
  const rgbRegex = /^rgb\(\s*(\d{1,3}%?\s*,\s*){2}\d{1,3}%?\s*\)$/;
  const rgbaRegex = /^rgba\(\s*(\d{1,3}%?\s*,\s*){3}(0|1|0?\.\d+)\s*\)$/;
  if (hexColorRegex.test(color2)) {
    return true;
  }
  if (rgbRegex.test(colorLower) || rgbaRegex.test(colorLower)) {
    return true;
  }
  return false;
}
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function getDistroIcon() {
  const icon13 = distroIcons.find(([id]) => id === distro.id);
  return icon13 ? icon13[1] : "\uE712";
}
var isPrimaryClick = (event) => event.button === Gdk.BUTTON_PRIMARY;
var isSecondaryClick = (event) => event.button === Gdk.BUTTON_SECONDARY;
var isMiddleClick = (event) => event.button === Gdk.BUTTON_MIDDLE;
var isScrollUp = (event) => {
  const [directionSuccess, direction] = event.get_scroll_direction();
  const [deltaSuccess, , yScroll] = event.get_scroll_deltas();
  if (directionSuccess && direction === Gdk.ScrollDirection.UP) {
    return true;
  }
  if (deltaSuccess && yScroll < 0) {
    return true;
  }
  return false;
};
var isScrollDown = (event) => {
  const [directionSuccess, direction] = event.get_scroll_direction();
  const [deltaSuccess, , yScroll] = event.get_scroll_deltas();
  if (directionSuccess && direction === Gdk.ScrollDirection.DOWN) {
    return true;
  }
  if (deltaSuccess && yScroll > 0) {
    return true;
  }
  return false;
};

// src/lib/option.ts
var defaultFile = `${GLib3.get_tmp_dir()}/ags/hyprpanel/default.json`;
var Opt = class extends variable_default {
  /**
   * The initial value set when the `Opt` is created.
   */
  initial;
  /**
   * Indicates whether this option should remain unchanged even when reset operations occur.
   */
  persistent;
  _id = "";
  /**
   * Creates an instance of `Opt`.
   *
   * @param {T} initial - The initial value of the option.
   * @param {OptProps} [props={}] - Additional properties for the option.
   */
  constructor(initial, { persistent = false } = {}) {
    super(initial);
    this.initial = initial;
    this.persistent = persistent;
  }
  /**
   * Converts the current value to a JSON-compatible string.
   *
   * @returns {string}
   */
  toJSON() {
    return `opt:${JSON.stringify(this.get())}`;
  }
  get value() {
    return this.get();
  }
  /**
   * Setter for the current value of the option.
   */
  set value(val) {
    this.set(val);
  }
  /**
   * Getter for the unique ID of the option.
   */
  get id() {
    return this._id;
  }
  /**
   * Setter for the unique ID of the option.
   */
  set id(newId) {
    this._id = newId;
  }
  /**
   * Initializes this option by attempting to read its value from a cache file.
   * If found, sets the current value. Also sets up a subscription to write updates back.
   *
   * @param cacheFile - The path to the cache file.
   */
  init(cacheFile) {
    const rawData = readFile(cacheFile);
    let cacheData = {};
    if (rawData && rawData.trim() !== "") {
      try {
        cacheData = JSON.parse(rawData);
      } catch (error) {
        errorHandler(error);
      }
    }
    const cachedVariable = cacheData[this._id];
    if (cachedVariable !== void 0) {
      this.set(cachedVariable);
    }
    this.subscribe((newVal) => {
      const reRaw = readFile(cacheFile);
      let currentCache = {};
      if (reRaw && reRaw.trim() !== "") {
        try {
          currentCache = JSON.parse(reRaw);
        } catch {
        }
      }
      currentCache[this._id] = newVal;
      writeFile(cacheFile, JSON.stringify(currentCache, null, 2));
    });
  }
  /**
   * Initializes this option by attempting to read its default value from the default file.
   * If found, sets the current value.
   */
  createDefault() {
    const rawData = readFile(defaultFile);
    let defaultData = {};
    if (rawData && rawData.trim() !== "") {
      try {
        defaultData = JSON.parse(rawData);
      } catch {
      }
    }
    const defaultVal = defaultData[this._id];
    if (defaultVal !== void 0) {
      this.set(defaultVal);
    }
  }
  /**
   * Resets the value of this option to its initial value if not persistent and if it differs from the current value.
   *
   * @returns Returns the option's ID if reset occurred, otherwise undefined.
   */
  reset() {
    if (this.persistent) {
      return void 0;
    }
    const current = this.get();
    if (JSON.stringify(current) !== JSON.stringify(this.initial)) {
      this.set(this.initial);
      return this._id;
    }
    return void 0;
  }
};
function opt(initial, props) {
  return new Opt(initial, props);
}
function getOptions(object, path = "", arr = []) {
  try {
    for (const key2 in object) {
      const value = object[key2];
      const id = path ? `${path}.${key2}` : key2;
      if (value instanceof variable_default) {
        const optValue = value;
        optValue.id = id;
        arr.push(optValue);
      } else if (typeof value === "object" && value !== null) {
        getOptions(value, id, arr);
      }
    }
    return arr;
  } catch (error) {
    errorHandler(error);
  }
}
function mkOptions(cacheFile, object, confFile = "config.json") {
  const allOptions = getOptions(object);
  for (let i = 0; i < allOptions.length; i++) {
    allOptions[i].init(cacheFile);
  }
  ensureDirectory(cacheFile.split("/").slice(0, -1).join("/"));
  ensureDirectory(defaultFile.split("/").slice(0, -1).join("/"));
  const configFile = `${TMP}/${confFile}`;
  const values = {};
  const defaultValues = {};
  for (let i = 0; i < allOptions.length; i++) {
    const option = allOptions[i];
    const val = option.value;
    values[option.id] = val;
    if (isHexColor(val)) {
      defaultValues[option.id] = option.initial;
    } else {
      defaultValues[option.id] = val;
    }
  }
  writeFile(defaultFile, JSON.stringify(defaultValues, null, 2));
  writeFile(configFile, JSON.stringify(values, null, 2));
  monitorFile(configFile, () => {
    const raw = readFile(configFile);
    if (!raw || raw.trim() === "") return;
    let cache;
    try {
      cache = JSON.parse(raw);
    } catch {
      return;
    }
    for (let i = 0; i < allOptions.length; i++) {
      const opt2 = allOptions[i];
      const newVal = cache[opt2.id];
      const oldVal = opt2.get();
      if (JSON.stringify(newVal) !== JSON.stringify(oldVal)) {
        opt2.set(newVal);
      }
    }
  });
  function sleep4(ms = 0) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  async function resetAll(opts) {
    const results = [];
    for (let i = 0; i < opts.length; i++) {
      const id = opts[i].reset();
      if (id) {
        results.push(id);
        await sleep4(50);
      }
    }
    return results;
  }
  return Object.assign(object, {
    configFile,
    array: () => allOptions,
    async reset() {
      const ids = await resetAll(allOptions);
      return ids.join("\n");
    },
    /**
     * Registers a callback that fires when any option whose ID starts with any of the given dependencies changes.
     *
     * @param deps - An array of dependency prefixes.
     * @param callback - The callback function to execute on changes.
     */
    handler(deps2, callback) {
      for (let i = 0; i < allOptions.length; i++) {
        const opt2 = allOptions[i];
        for (let j = 0; j < deps2.length; j++) {
          if (opt2.id.startsWith(deps2[j])) {
            opt2.subscribe(callback);
            break;
          }
        }
      }
    }
  });
}

// src/options.ts
var colors = {
  rosewater: "#f5e0dc",
  flamingo: "#f2cdcd",
  pink: "#f5c2e7",
  mauve: "#cba6f7",
  red: "#f38ba8",
  maroon: "#eba0ac",
  peach: "#fab387",
  yellow: "#f9e2af",
  green: "#a6e3a1",
  teal: "#94e2d5",
  sky: "#89dceb",
  sapphire: "#74c7ec",
  blue: "#89b4fa",
  lavender: "#b4befe",
  text: "#cdd6f4",
  subtext1: "#bac2de",
  subtext2: "#a6adc8",
  overlay2: "#9399b2",
  overlay1: "#7f849c",
  overlay0: "#6c7086",
  surface2: "#585b70",
  surface1: "#45475a",
  surface0: "#313244",
  base2: "#242438",
  base: "#1e1e2e",
  mantle: "#181825",
  crust: "#11111b"
};
var secondary_colors = {
  text: "#cdd6f3",
  pink: "#f5c2e6",
  red: "#f38ba7",
  peach: "#fab386",
  mantle: "#181824",
  surface1: "#454759",
  surface0: "#313243",
  overlay1: "#7f849b",
  lavender: "#b4befd",
  mauve: "#cba6f6",
  green: "#a6e3a0",
  sky: "#89dcea",
  teal: "#94e2d4",
  yellow: "#f9e2ad",
  maroon: "#eba0ab",
  crust: "#11111a",
  surface2: "#585b69"
};
var tertiary_colors = {
  pink: "#f5c2e8",
  red: "#f38ba9",
  mantle: "#181826",
  surface0: "#313245",
  overlay1: "#7f849d",
  lavender: "#b4beff",
  mauve: "#cba6f8",
  green: "#a6e3a2",
  sky: "#89dcec",
  teal: "#94e2d6",
  yellow: "#f9e2ae",
  maroon: "#eba0ad",
  crust: "#11111c",
  surface2: "#585b71"
};
var options2 = mkOptions(CONFIG, {
  theme: {
    tooltip: {
      scaling: opt(100)
    },
    matugen: opt(false),
    matugen_settings: {
      mode: opt("dark"),
      scheme_type: opt("tonal-spot"),
      variation: opt("standard_1"),
      contrast: opt(0)
    },
    font: {
      size: opt("1.2rem"),
      name: opt("Ubuntu Nerd Font"),
      style: opt("normal"),
      label: opt("Ubuntu Nerd Font"),
      weight: opt(600)
    },
    notification: {
      scaling: opt(100),
      background: opt(tertiary_colors.mantle),
      opacity: opt(100),
      actions: {
        background: opt(secondary_colors.lavender),
        text: opt(colors.mantle)
      },
      label: opt(colors.lavender),
      border: opt(secondary_colors.surface0),
      border_radius: opt("0.6em"),
      time: opt(secondary_colors.overlay1),
      text: opt(colors.text),
      labelicon: opt(colors.lavender),
      close_button: {
        background: opt(secondary_colors.red),
        label: opt(colors.crust)
      }
    },
    osd: {
      scaling: opt(100),
      duration: opt(2500),
      enable: opt(true),
      orientation: opt("vertical"),
      opacity: opt(100),
      border: {
        size: opt("0em"),
        color: opt(colors.lavender)
      },
      bar_container: opt(colors.crust),
      icon_container: opt(tertiary_colors.lavender),
      bar_color: opt(tertiary_colors.lavender),
      bar_empty_color: opt(colors.surface0),
      bar_overflow_color: opt(secondary_colors.red),
      icon: opt(colors.crust),
      label: opt(tertiary_colors.lavender),
      monitor: opt(0),
      active_monitor: opt(true),
      radius: opt("0.4em"),
      margins: opt("0px 5px 0px 0px"),
      location: opt("right"),
      muted_zero: opt(false)
    },
    bar: {
      scaling: opt(100),
      floating: opt(false),
      location: opt("top"),
      layer: opt("top"),
      margin_top: opt("0.5em"),
      opacity: opt(100),
      margin_bottom: opt("0em"),
      margin_sides: opt("0.5em"),
      border_radius: opt("0.4em"),
      outer_spacing: opt("1.6em"),
      label_spacing: opt("0.5em"),
      transparent: opt(false),
      dropdownGap: opt("2.9em"),
      background: opt(colors.crust),
      border: {
        location: opt("none"),
        width: opt("0.15em"),
        color: opt(colors.lavender)
      },
      buttons: {
        style: opt("default"),
        enableBorders: opt(false),
        borderSize: opt("0.1em"),
        borderColor: opt(colors.lavender),
        monochrome: opt(false),
        spacing: opt("0.25em"),
        padding_x: opt("0.7rem"),
        padding_y: opt("0.2rem"),
        y_margins: opt("0.4em"),
        radius: opt("0.3em"),
        innerRadiusMultiplier: opt("0.4"),
        opacity: opt(100),
        background_opacity: opt(100),
        background_hover_opacity: opt(100),
        background: opt(colors.base2),
        icon_background: opt(colors.base2),
        hover: opt(colors.surface1),
        text: opt(colors.lavender),
        icon: opt(colors.lavender),
        dashboard: {
          background: opt(colors.base2),
          enableBorder: opt(false),
          border: opt(colors.yellow),
          icon: opt(colors.yellow),
          spacing: opt("0.5em")
        },
        workspaces: {
          background: opt(colors.base2),
          enableBorder: opt(false),
          smartHighlight: opt(true),
          border: opt(colors.pink),
          available: opt(colors.sky),
          occupied: opt(colors.flamingo),
          active: opt(colors.pink),
          hover: opt(colors.pink),
          numbered_active_highlight_border: opt("0.2em"),
          numbered_active_highlight_padding: opt("0.2em"),
          numbered_active_highlighted_text_color: opt(colors.mantle),
          numbered_active_underline_color: opt(colors.pink),
          spacing: opt("0.5em"),
          fontSize: opt("1.2em"),
          pill: {
            radius: opt("1.9rem * 0.6"),
            height: opt("4em"),
            width: opt("4em"),
            active_width: opt("12em")
          }
        },
        windowtitle: {
          background: opt(colors.base2),
          enableBorder: opt(false),
          border: opt(colors.pink),
          text: opt(colors.pink),
          icon: opt(colors.pink),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        media: {
          enableBorder: opt(false),
          border: opt(colors.lavender),
          background: opt(colors.base2),
          text: opt(colors.lavender),
          icon: opt(colors.lavender),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        volume: {
          enableBorder: opt(false),
          border: opt(colors.maroon),
          background: opt(colors.base2),
          text: opt(colors.maroon),
          icon: opt(colors.maroon),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        network: {
          enableBorder: opt(false),
          border: opt(colors.mauve),
          background: opt(colors.base2),
          text: opt(colors.mauve),
          icon: opt(colors.mauve),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        bluetooth: {
          enableBorder: opt(false),
          border: opt(colors.sky),
          background: opt(colors.base2),
          text: opt(colors.sky),
          icon: opt(colors.sky),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        systray: {
          enableBorder: opt(false),
          customIcon: opt(colors.text),
          border: opt(colors.lavender),
          background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        battery: {
          enableBorder: opt(false),
          border: opt(colors.yellow),
          background: opt(colors.base2),
          text: opt(colors.yellow),
          icon: opt(colors.yellow),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        clock: {
          enableBorder: opt(false),
          border: opt(colors.pink),
          background: opt(colors.base2),
          text: opt(colors.pink),
          icon: opt(colors.pink),
          icon_background: opt(colors.base2),
          spacing: opt("0.5em")
        },
        notifications: {
          enableBorder: opt(false),
          border: opt(colors.lavender),
          background: opt(colors.base2),
          icon: opt(colors.lavender),
          icon_background: opt(colors.base2),
          total: opt(colors.lavender),
          spacing: opt("0.5em")
        },
        modules: {
          ram: {
            enableBorder: opt(false),
            border: opt(colors.yellow),
            background: opt(colors.base2),
            text: opt(colors.yellow),
            icon: opt(colors.yellow),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          cpu: {
            enableBorder: opt(false),
            border: opt(colors.red),
            background: opt(colors.base2),
            text: opt(colors.red),
            icon: opt(colors.red),
            icon_background: opt(colors.base2),
            spacing: opt("0.5em")
          },
          cpuTemp: {
            enableBorder: opt(false),
            border: opt(colors.peach),
            background: opt(colors.base2),
            text: opt(colors.peach),
            icon: opt(colors.peach),
            icon_background: opt(colors.base2),
            spacing: opt("0.5em")
          },
          storage: {
            enableBorder: opt(false),
            border: opt(colors.pink),
            background: opt(colors.base2),
            text: opt(colors.pink),
            icon: opt(colors.pink),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          netstat: {
            enableBorder: opt(false),
            border: opt(colors.green),
            background: opt(colors.base2),
            text: opt(colors.green),
            icon: opt(colors.green),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          kbLayout: {
            enableBorder: opt(false),
            border: opt(colors.sky),
            background: opt(colors.base2),
            text: opt(colors.sky),
            icon: opt(colors.sky),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          updates: {
            enableBorder: opt(false),
            border: opt(colors.mauve),
            background: opt(colors.base2),
            text: opt(colors.mauve),
            icon: opt(colors.mauve),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          weather: {
            enableBorder: opt(false),
            border: opt(colors.lavender),
            background: opt(colors.base2),
            text: opt(colors.lavender),
            icon: opt(colors.lavender),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          power: {
            enableBorder: opt(false),
            border: opt(colors.red),
            background: opt(colors.base2),
            icon: opt(colors.red),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          submap: {
            enableBorder: opt(false),
            border: opt(colors.teal),
            background: opt(colors.base2),
            text: opt(colors.teal),
            icon: opt(colors.teal),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          hyprsunset: {
            enableBorder: opt(false),
            border: opt(colors.peach),
            background: opt(colors.base2),
            text: opt(colors.peach),
            icon: opt(colors.peach),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          hypridle: {
            enableBorder: opt(false),
            border: opt(colors.pink),
            background: opt(colors.base2),
            text: opt(colors.pink),
            icon: opt(colors.pink),
            icon_background: opt(colors.base2),
            spacing: opt("0.45em")
          },
          cava: {
            enableBorder: opt(false),
            border: opt(colors.teal),
            background: opt(colors.base2),
            text: opt(colors.teal),
            icon: opt(colors.teal),
            icon_background: opt(colors.base2),
            spacing: opt("0.5em")
          }
        }
      },
      menus: {
        monochrome: opt(false),
        background: opt(colors.crust),
        opacity: opt(100),
        cards: opt(colors.base),
        card_radius: opt("0.4em"),
        border: {
          size: opt("0.13em"),
          radius: opt("0.7em"),
          color: opt(colors.surface0)
        },
        text: opt(colors.text),
        dimtext: opt(colors.surface2),
        feinttext: opt(colors.surface0),
        label: opt(colors.lavender),
        popover: {
          scaling: opt(100),
          radius: opt("0.4em"),
          text: opt(colors.lavender),
          background: opt(secondary_colors.mantle),
          border: opt(secondary_colors.mantle)
        },
        listitems: {
          passive: opt(colors.text),
          active: opt(secondary_colors.lavender)
        },
        icons: {
          passive: opt(colors.surface2),
          active: opt(colors.lavender)
        },
        switch: {
          enabled: opt(colors.lavender),
          disabled: opt(tertiary_colors.surface0),
          puck: opt(secondary_colors.surface1),
          radius: opt("0.2em"),
          slider_radius: opt("0.2em")
        },
        check_radio_button: {
          background: opt(colors.surface1),
          active: opt(tertiary_colors.lavender)
        },
        buttons: {
          default: opt(colors.lavender),
          active: opt(secondary_colors.pink),
          disabled: opt(tertiary_colors.surface2),
          text: opt(secondary_colors.mantle),
          radius: opt("0.4em")
        },
        iconbuttons: {
          passive: opt(secondary_colors.text),
          active: opt(tertiary_colors.lavender)
        },
        progressbar: {
          foreground: opt(colors.lavender),
          background: opt(colors.surface1),
          radius: opt("0.3rem")
        },
        slider: {
          primary: opt(colors.lavender),
          background: opt(tertiary_colors.surface2),
          backgroundhover: opt(colors.surface1),
          puck: opt(colors.overlay0),
          slider_radius: opt("0.3rem"),
          progress_radius: opt("0.3rem")
        },
        scroller: {
          radius: opt("0.7em"),
          width: opt("0.25em")
        },
        dropdownmenu: {
          background: opt(colors.crust),
          text: opt(colors.text),
          divider: opt(colors.base)
        },
        tooltip: {
          radius: opt("0.3em"),
          background: opt(colors.crust),
          text: opt(tertiary_colors.lavender)
        },
        menu: {
          media: {
            scaling: opt(100),
            song: opt(tertiary_colors.lavender),
            artist: opt(tertiary_colors.teal),
            album: opt(tertiary_colors.pink),
            timestamp: opt(colors.text),
            background: {
              color: opt(colors.crust)
            },
            card: {
              color: opt(colors.base),
              tint: opt(85)
            },
            border: {
              color: opt(colors.surface0)
            },
            buttons: {
              inactive: opt(colors.surface2),
              enabled: opt(secondary_colors.teal),
              background: opt(tertiary_colors.lavender),
              text: opt(colors.crust)
            },
            slider: {
              primary: opt(colors.pink),
              background: opt(tertiary_colors.surface2),
              backgroundhover: opt(colors.surface1),
              puck: opt(colors.overlay0)
            }
          },
          volume: {
            scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            label: {
              color: opt(colors.maroon)
            },
            text: opt(colors.text),
            scroller: {
              color: opt(colors.maroon)
            },
            listitems: {
              passive: opt(colors.text),
              active: opt(secondary_colors.maroon)
            },
            iconbutton: {
              passive: opt(colors.text),
              active: opt(colors.maroon)
            },
            icons: {
              passive: opt(colors.overlay2),
              active: opt(colors.maroon)
            },
            audio_slider: {
              primary: opt(colors.maroon),
              background: opt(tertiary_colors.surface2),
              backgroundhover: opt(colors.surface1),
              puck: opt(colors.surface2)
            },
            input_slider: {
              primary: opt(colors.maroon),
              background: opt(tertiary_colors.surface2),
              backgroundhover: opt(colors.surface1),
              puck: opt(colors.surface2)
            }
          },
          network: {
            scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            label: {
              color: opt(colors.mauve)
            },
            scroller: {
              color: opt(colors.mauve)
            },
            text: opt(colors.text),
            status: {
              color: opt(colors.overlay0)
            },
            listitems: {
              passive: opt(colors.text),
              active: opt(secondary_colors.mauve)
            },
            icons: {
              passive: opt(colors.overlay2),
              active: opt(colors.mauve)
            },
            iconbuttons: {
              passive: opt(colors.text),
              active: opt(colors.mauve)
            },
            switch: {
              enabled: opt(colors.mauve),
              disabled: opt(tertiary_colors.surface0),
              puck: opt(secondary_colors.surface1)
            }
          },
          bluetooth: {
            scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            label: {
              color: opt(colors.sky)
            },
            scroller: {
              color: opt(colors.sky)
            },
            text: opt(colors.text),
            status: opt(colors.overlay0),
            switch_divider: opt(colors.surface1),
            switch: {
              enabled: opt(colors.sky),
              disabled: opt(tertiary_colors.surface0),
              puck: opt(secondary_colors.surface1)
            },
            listitems: {
              passive: opt(colors.text),
              active: opt(secondary_colors.sky)
            },
            icons: {
              passive: opt(colors.overlay2),
              active: opt(colors.sky)
            },
            iconbutton: {
              passive: opt(colors.text),
              active: opt(colors.sky)
            }
          },
          systray: {
            dropdownmenu: {
              background: opt(colors.crust),
              text: opt(colors.text),
              divider: opt(colors.base)
            }
          },
          battery: {
            scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            label: {
              color: opt(colors.yellow)
            },
            text: opt(colors.text),
            listitems: {
              passive: opt(secondary_colors.text),
              active: opt(colors.yellow)
            },
            icons: {
              passive: opt(colors.overlay2),
              active: opt(colors.yellow)
            },
            slider: {
              primary: opt(colors.yellow),
              background: opt(tertiary_colors.surface2),
              backgroundhover: opt(colors.surface1),
              puck: opt(colors.overlay0)
            }
          },
          clock: {
            scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            text: opt(colors.text),
            time: {
              time: opt(colors.pink),
              timeperiod: opt(colors.teal)
            },
            calendar: {
              yearmonth: opt(colors.teal),
              weekdays: opt(colors.pink),
              paginator: opt(secondary_colors.pink),
              currentday: opt(colors.pink),
              days: opt(colors.text),
              contextdays: opt(colors.surface2)
            },
            weather: {
              icon: opt(colors.pink),
              temperature: opt(colors.text),
              status: opt(colors.teal),
              stats: opt(colors.pink),
              thermometer: {
                extremelyhot: opt(colors.red),
                hot: opt(colors.peach),
                moderate: opt(colors.lavender),
                cold: opt(colors.blue),
                extremelycold: opt(colors.sky)
              },
              hourly: {
                time: opt(colors.pink),
                icon: opt(colors.pink),
                temperature: opt(colors.pink)
              }
            }
          },
          dashboard: {
            scaling: opt(100),
            confirmation_scaling: opt(100),
            card: {
              color: opt(colors.base)
            },
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            profile: {
              name: opt(colors.pink),
              size: opt("8.5em"),
              radius: opt("0.4em")
            },
            powermenu: {
              shutdown: opt(colors.red),
              restart: opt(colors.peach),
              logout: opt(colors.green),
              sleep: opt(colors.sky),
              confirmation: {
                card: opt(colors.base),
                background: opt(colors.crust),
                border: opt(colors.surface0),
                label: opt(colors.lavender),
                body: opt(colors.text),
                confirm: opt(colors.green),
                deny: opt(colors.red),
                button_text: opt(secondary_colors.crust)
              }
            },
            shortcuts: {
              background: opt(colors.lavender),
              text: opt(secondary_colors.mantle),
              recording: opt(colors.green)
            },
            controls: {
              disabled: opt(colors.surface2),
              wifi: {
                background: opt(colors.mauve),
                text: opt(secondary_colors.mantle)
              },
              bluetooth: {
                background: opt(colors.sky),
                text: opt(secondary_colors.mantle)
              },
              notifications: {
                background: opt(colors.yellow),
                text: opt(secondary_colors.mantle)
              },
              volume: {
                background: opt(colors.maroon),
                text: opt(secondary_colors.mantle)
              },
              input: {
                background: opt(colors.pink),
                text: opt(secondary_colors.mantle)
              }
            },
            directories: {
              left: {
                top: {
                  color: opt(colors.pink)
                },
                middle: {
                  color: opt(colors.yellow)
                },
                bottom: {
                  color: opt(colors.maroon)
                }
              },
              right: {
                top: {
                  color: opt(colors.teal)
                },
                middle: {
                  color: opt(colors.mauve)
                },
                bottom: {
                  color: opt(colors.lavender)
                }
              }
            },
            monitors: {
              bar_background: opt(colors.surface1),
              cpu: {
                icon: opt(colors.maroon),
                bar: opt(tertiary_colors.maroon),
                label: opt(colors.maroon)
              },
              ram: {
                icon: opt(colors.yellow),
                bar: opt(tertiary_colors.yellow),
                label: opt(colors.yellow)
              },
              gpu: {
                icon: opt(colors.green),
                bar: opt(tertiary_colors.green),
                label: opt(colors.green)
              },
              disk: {
                icon: opt(colors.pink),
                bar: opt(tertiary_colors.pink),
                label: opt(colors.pink)
              }
            }
          },
          power: {
            scaling: opt(90),
            radius: opt("0.4em"),
            background: {
              color: opt(colors.crust)
            },
            border: {
              color: opt(colors.surface0)
            },
            buttons: {
              shutdown: {
                background: opt(colors.base),
                icon_background: opt(secondary_colors.red),
                text: opt(colors.red),
                icon: opt(secondary_colors.mantle)
              },
              restart: {
                background: opt(colors.base),
                icon_background: opt(secondary_colors.peach),
                text: opt(colors.peach),
                icon: opt(secondary_colors.mantle)
              },
              logout: {
                background: opt(colors.base),
                icon_background: opt(secondary_colors.green),
                text: opt(colors.green),
                icon: opt(secondary_colors.mantle)
              },
              sleep: {
                background: opt(colors.base),
                icon_background: opt(secondary_colors.sky),
                text: opt(colors.sky),
                icon: opt(secondary_colors.mantle)
              }
            }
          },
          notifications: {
            scaling: opt(100),
            height: opt("58em"),
            label: opt(colors.lavender),
            no_notifications_label: opt(colors.surface0),
            background: opt(colors.crust),
            card: opt(colors.base),
            border: opt(colors.surface0),
            switch_divider: opt(colors.surface1),
            clear: opt(colors.red),
            switch: {
              enabled: opt(colors.lavender),
              disabled: opt(tertiary_colors.surface0),
              puck: opt(secondary_colors.surface1)
            },
            pager: {
              show: opt(true),
              background: opt(colors.crust),
              button: opt(colors.lavender),
              label: opt(colors.overlay2)
            },
            scrollbar: {
              color: opt(colors.lavender),
              width: opt("0.35em"),
              radius: opt("0.2em")
            }
          }
        }
      }
    }
  },
  bar: {
    scrollSpeed: opt(5),
    autoHide: opt("never"),
    layouts: opt({
      "1": {
        left: ["dashboard", "workspaces", "windowtitle"],
        middle: ["media"],
        right: ["volume", "clock", "notifications"]
      },
      "2": {
        left: ["dashboard", "workspaces", "windowtitle"],
        middle: ["media"],
        right: ["volume", "clock", "notifications"]
      },
      "0": {
        left: ["dashboard", "workspaces", "windowtitle"],
        middle: ["media"],
        right: ["volume", "network", "bluetooth", "battery", "systray", "clock", "notifications"]
      }
    }),
    launcher: {
      icon: opt("\u{F08C7}"),
      autoDetectIcon: opt(false),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    windowtitle: {
      custom_title: opt(true),
      title_map: opt([]),
      class_name: opt(true),
      label: opt(true),
      icon: opt(true),
      truncation: opt(true),
      truncation_size: opt(50),
      leftClick: opt(""),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    workspaces: {
      show_icons: opt(false),
      showAllActive: opt(true),
      ignored: opt(""),
      show_numbered: opt(false),
      showWsIcons: opt(false),
      showApplicationIcons: opt(false),
      applicationIconOncePerWorkspace: opt(true),
      applicationIconMap: opt({}),
      applicationIconFallback: opt("\u{F08C6}"),
      applicationIconEmptyWorkspace: opt("\uF51D"),
      numbered_active_indicator: opt("underline"),
      icons: {
        available: opt("\uF10C"),
        active: opt("\uF111"),
        occupied: opt("\uF192")
      },
      workspaceIconMap: opt({}),
      workspaces: opt(5),
      spacing: opt(1),
      monitorSpecific: opt(true),
      workspaceMask: opt(false),
      reverse_scroll: opt(false),
      scroll_speed: opt(5)
    },
    volume: {
      label: opt(true),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt("hyprpanel vol +5"),
      scrollDown: opt("hyprpanel vol -5")
    },
    network: {
      truncation: opt(true),
      showWifiInfo: opt(false),
      truncation_size: opt(7),
      label: opt(true),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    bluetooth: {
      label: opt(true),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    battery: {
      label: opt(true),
      hideLabelWhenFull: opt(false),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    systray: {
      ignore: opt([]),
      customIcons: opt({})
    },
    clock: {
      icon: opt("\u{F0E17}"),
      showIcon: opt(true),
      showTime: opt(true),
      format: opt("%a %b %d  %I:%M:%S %p"),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    media: {
      format: opt("{artist: - }{title}"),
      truncation: opt(true),
      show_label: opt(true),
      truncation_size: opt(30),
      show_active_only: opt(false),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    notifications: {
      show_total: opt(false),
      hideCountWhenZero: opt(false),
      rightClick: opt(""),
      middleClick: opt(""),
      scrollUp: opt(""),
      scrollDown: opt("")
    },
    customModules: {
      scrollSpeed: opt(5),
      ram: {
        icon: opt("\uEFC5"),
        label: opt(true),
        labelType: opt("percentage"),
        round: opt(true),
        pollingInterval: opt(2e3),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt("")
      },
      cpu: {
        icon: opt("\uF4BC"),
        label: opt(true),
        round: opt(true),
        pollingInterval: opt(2e3),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      cpuTemp: {
        icon: opt("\uF2C7"),
        sensor: opt(""),
        label: opt(true),
        round: opt(true),
        showUnit: opt(true),
        unit: opt("metric"),
        pollingInterval: opt(2e3),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      storage: {
        label: opt(true),
        icon: opt("\u{F02CA}"),
        round: opt(false),
        labelType: opt("percentage"),
        pollingInterval: opt(2e3),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt("")
      },
      netstat: {
        label: opt(true),
        networkInterface: opt(""),
        dynamicIcon: opt(false),
        icon: opt("\u{F059F}"),
        networkInLabel: opt("\u2193"),
        networkOutLabel: opt("\u2191"),
        round: opt(true),
        labelType: opt("full"),
        rateUnit: opt("auto"),
        pollingInterval: opt(2e3),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt("")
      },
      kbLayout: {
        label: opt(true),
        labelType: opt("code"),
        icon: opt("\u{F030C}"),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      updates: {
        updateCommand: opt(`${SRC_DIR}/scripts/checkUpdates.sh -arch`),
        label: opt(true),
        padZero: opt(true),
        autoHide: opt(false),
        icon: {
          pending: opt("\u{F03D7}"),
          updated: opt("\u{F03D6}")
        },
        pollingInterval: opt(1e3 * 60 * 60 * 6),
        leftClick: opt(`$TERMINAL -e ${SRC_DIR}/scripts/runUpdates.sh -arch`),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      submap: {
        label: opt(true),
        showSubmapName: opt(true),
        enabledIcon: opt("\u{F0310}"),
        disabledIcon: opt("\u{F030C}"),
        enabledText: opt("Submap On"),
        disabledText: opt("Submap off"),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      weather: {
        label: opt(true),
        unit: opt("imperial"),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      power: {
        icon: opt("\uF011"),
        showLabel: opt(true),
        leftClick: opt("menu:powerdropdown"),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      hyprsunset: {
        temperature: opt("6000k"),
        label: opt(true),
        onIcon: opt("\u{F1A4C}"),
        offIcon: opt("\u{F06E8}"),
        onLabel: opt("On"),
        offLabel: opt("Off"),
        pollingInterval: opt(1e3 * 2),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      hypridle: {
        label: opt(true),
        onIcon: opt("\uF070"),
        offIcon: opt("\uF06E"),
        onLabel: opt("On"),
        offLabel: opt("Off"),
        pollingInterval: opt(1e3 * 2),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      },
      cava: {
        showIcon: opt(true),
        icon: opt("\uF001"),
        spaceCharacter: opt("\u200A"),
        barCharacters: opt(["\u2581", "\u2582", "\u2583", "\u2584", "\u2585", "\u2586", "\u2587", "\u2588"]),
        showActiveOnly: opt(false),
        bars: opt(10),
        channels: opt(2),
        framerate: opt(60),
        samplerate: opt(44100),
        autoSensitivity: opt(true),
        lowCutoff: opt(50),
        highCutoff: opt(1e4),
        noiseReduction: opt(0.77),
        stereo: opt(false),
        leftClick: opt(""),
        rightClick: opt(""),
        middleClick: opt(""),
        scrollUp: opt(""),
        scrollDown: opt("")
      }
    }
  },
  menus: {
    transition: opt("crossfade"),
    transitionTime: opt(200),
    media: {
      hideAuthor: opt(false),
      hideAlbum: opt(false),
      displayTime: opt(false),
      displayTimeTooltip: opt(false),
      noMediaText: opt("No Media Currently Playing")
    },
    volume: {
      raiseMaximumVolume: opt(false)
    },
    power: {
      lowBatteryNotification: opt(false),
      lowBatteryThreshold: opt(20),
      lowBatteryNotificationTitle: opt("Warning: Low battery"),
      lowBatteryNotificationText: opt(
        "Your battery is running low ($POWER_LEVEL %).\n\nPlease plug in your charger."
      ),
      showLabel: opt(true),
      confirmation: opt(true),
      sleep: opt("systemctl suspend"),
      reboot: opt("systemctl reboot"),
      logout: opt("hyprctl dispatch exit"),
      shutdown: opt("systemctl poweroff")
    },
    dashboard: {
      powermenu: {
        confirmation: opt(true),
        sleep: opt("systemctl suspend"),
        reboot: opt("systemctl reboot"),
        logout: opt("hyprctl dispatch exit"),
        shutdown: opt("systemctl poweroff"),
        avatar: {
          image: opt("~/.face.icon"),
          name: opt("system")
        }
      },
      stats: {
        enabled: opt(true),
        interval: opt(2e3),
        enable_gpu: opt(false)
      },
      controls: {
        enabled: opt(true)
      },
      shortcuts: {
        enabled: opt(true),
        left: {
          shortcut1: {
            icon: opt("\u{F01E9}"),
            tooltip: opt("Microsoft Edge"),
            command: opt("microsoft-edge-stable")
          },
          shortcut2: {
            icon: opt("\uF1BC"),
            tooltip: opt("Spotify"),
            command: opt("spotify-launcher")
          },
          shortcut3: {
            icon: opt("\uF1FF"),
            tooltip: opt("Discord"),
            command: opt("discord")
          },
          shortcut4: {
            icon: opt("\uE68F"),
            tooltip: opt("Search Apps"),
            command: opt("rofi -show drun")
          }
        },
        right: {
          shortcut1: {
            icon: opt("\uF1FB"),
            tooltip: opt("Color Picker"),
            command: opt("sleep 0.5 && hyprpicker -a")
          },
          shortcut3: {
            icon: opt("\u{F0100}"),
            tooltip: opt("Screenshot"),
            command: opt(`bash -c "${SRC_DIR}/scripts/snapshot.sh"`)
          }
        }
      },
      directories: {
        enabled: opt(true),
        left: {
          directory1: {
            label: opt("\u{F024D} Downloads"),
            command: opt('bash -c "xdg-open $HOME/Downloads/"')
          },
          directory2: {
            label: opt("\u{F024F} Videos"),
            command: opt('bash -c "xdg-open $HOME/Videos/"')
          },
          directory3: {
            label: opt("\u{F069D} Projects"),
            command: opt('bash -c "xdg-open $HOME/Projects/"')
          }
        },
        right: {
          directory1: {
            label: opt("\u{F19F6} Documents"),
            command: opt('bash -c "xdg-open $HOME/Documents/"')
          },
          directory2: {
            label: opt("\u{F024F} Pictures"),
            command: opt('bash -c "xdg-open $HOME/Pictures/"')
          },
          directory3: {
            label: opt("\u{F10B5} Home"),
            command: opt('bash -c "xdg-open $HOME/"')
          }
        }
      }
    },
    clock: {
      time: {
        military: opt(false),
        hideSeconds: opt(false)
      },
      weather: {
        enabled: opt(true),
        interval: opt(6e4),
        unit: opt("imperial"),
        location: opt("Los Angeles"),
        key: opt("")
      }
    }
  },
  scalingPriority: opt("gdk"),
  terminal: opt("$TERM"),
  tear: opt(false),
  wallpaper: {
    enable: opt(true),
    image: opt(""),
    pywal: opt(false)
  },
  notifications: {
    position: opt("top right"),
    ignore: opt([]),
    displayedTotal: opt(10),
    monitor: opt(0),
    active_monitor: opt(true),
    showActionsOnHover: opt(false),
    timeout: opt(7e3),
    autoDismiss: opt(false),
    cache_actions: opt(true),
    clearDelay: opt(100)
  },
  hyprpanel: {
    restartAgs: opt(true),
    restartCommand: opt("hyprpanel -q; hyprpanel")
  },
  dummy: opt(true)
});
globalThis["options"] = options2;
var options_default = options2;

// src/lib/constants/services.ts
import Hyprland from "gi://AstalHyprland";
import AstalMpris from "gi://AstalMpris?version=0.1";
import AstalWp from "gi://AstalWp?version=0.1";
import AstalNetwork from "gi://AstalNetwork?version=0.1";
import AstalBluetooth from "gi://AstalBluetooth?version=0.1";
import AstalBattery from "gi://AstalBattery?version=0.1";
import AstalNotifd from "gi://AstalNotifd?version=0.1";

// src/services/Brightness.ts
var get = (args) => Number(exec(`brightnessctl ${args}`));
var screen = exec(`bash -c "ls -w1 /sys/class/backlight | head -1"`);
var kbd = exec(`bash -c "ls -w1 /sys/class/leds | grep '::kbd_backlight$' | head -1"`);
var _kbdMax, _kbd, _screenMax, _screen;
var Brightness = class extends GObject4.Object {
  constructor() {
    super();
    __privateAdd(this, _kbdMax, kbd?.length ? get(`--device ${kbd} max`) : 0);
    __privateAdd(this, _kbd, kbd?.length ? get(`--device ${kbd} get`) : 0);
    __privateAdd(this, _screenMax, screen?.length ? get(`--device ${screen} max`) : 0);
    __privateAdd(this, _screen, screen?.length ? get(`--device ${screen} get`) / (get(`--device ${screen} max`) || 1) : 0);
    const screenPath = `/sys/class/backlight/${screen}/brightness`;
    const kbdPath = `/sys/class/leds/${kbd}/brightness`;
    monitorFile(screenPath, async (f) => {
      const v = await readFileAsync(f);
      __privateSet(this, _screen, Number(v) / __privateGet(this, _screenMax));
      this.notify("screen");
    });
    monitorFile(kbdPath, async (f) => {
      const v = await readFileAsync(f);
      __privateSet(this, _kbd, Number(v) / __privateGet(this, _kbdMax));
      this.notify("kbd");
    });
  }
  static get_default() {
    if (!Brightness.instance) {
      Brightness.instance = new Brightness();
    }
    return Brightness.instance;
  }
  get kbd() {
    return __privateGet(this, _kbd);
  }
  get screen() {
    return __privateGet(this, _screen);
  }
  set kbd(value) {
    if (value < 0 || value > __privateGet(this, _kbdMax) || !kbd?.length) return;
    sh(`brightnessctl -d ${kbd} s ${value} -q`).then(() => {
      __privateSet(this, _kbd, value);
      this.notify("kbd");
    });
  }
  set screen(percent) {
    if (!screen?.length) return;
    if (percent < 0) percent = 0;
    if (percent > 1) percent = 1;
    sh(`brightnessctl set ${Math.round(percent * 100)}% -d ${screen} -q`).then(() => {
      __privateSet(this, _screen, percent);
      this.notify("screen");
    });
  }
};
_kbdMax = new WeakMap();
_kbd = new WeakMap();
_screenMax = new WeakMap();
_screen = new WeakMap();
__publicField(Brightness, "instance");
__decorateClass([
  property(Number)
], Brightness.prototype, "kbd", 1);
__decorateClass([
  property(Number)
], Brightness.prototype, "screen", 1);
Brightness = __decorateClass([
  register({ GTypeName: "Brightness" })
], Brightness);

// src/lib/constants/services.ts
import AstalPowerProfiles from "gi://AstalPowerProfiles?version=0.1";
import AstalCava from "gi://AstalCava";
var hyprlandService = Hyprland.get_default();
var mprisService = AstalMpris.get_default();
var wireplumber = AstalWp.get_default();
var audioService = wireplumber.audio;
var networkService = AstalNetwork.get_default();
var bluetoothService = AstalBluetooth.get_default();
var batteryService = AstalBattery.get_default();
var notifdService = AstalNotifd.get_default();
var brightnessService = Brightness.get_default();
var powerProfilesService = AstalPowerProfiles.get_default();
var cavaService = AstalCava.get_default();

// src/services/Wallpaper.ts
var WP = `${default2.get_home_dir()}/.config/background`;
var _blockMonitor, _isRunning, _Wallpaper_instances, wallpaper_fn, setWallpaper_fn;
var Wallpaper = class extends GObject4.Object {
  constructor() {
    super();
    __privateAdd(this, _Wallpaper_instances);
    __privateAdd(this, _blockMonitor, false);
    __privateAdd(this, _isRunning, false);
    this.wallpaper = WP;
    options_default.wallpaper.enable.subscribe(() => {
      if (options_default.wallpaper.enable.get()) {
        __privateSet(this, _isRunning, true);
        execAsync("swww-daemon").then(() => {
          __privateMethod(this, _Wallpaper_instances, wallpaper_fn).call(this);
        }).catch((err) => {
          console.error("Failed to start swww-daemon:", err);
        });
      } else {
        __privateSet(this, _isRunning, false);
        execAsync("pkill swww-daemon").then(() => {
          console.log("swww-daemon stopped.");
        }).catch((err) => {
          console.error("Failed to stop swww-daemon:", err);
        });
      }
    });
    if (options_default.wallpaper.enable.get() && dependencies("swww")) {
      __privateSet(this, _isRunning, true);
      monitorFile(WP, () => {
        if (!__privateGet(this, _blockMonitor)) __privateMethod(this, _Wallpaper_instances, wallpaper_fn).call(this);
      });
      execAsync("swww-daemon").then(() => {
        __privateMethod(this, _Wallpaper_instances, wallpaper_fn).call(this);
      }).catch((err) => {
        console.error("Failed to start swww-daemon:", err);
      });
    }
  }
  setWallpaper(path) {
    __privateMethod(this, _Wallpaper_instances, setWallpaper_fn).call(this, path);
  }
  isRunning() {
    return __privateGet(this, _isRunning);
  }
};
_blockMonitor = new WeakMap();
_isRunning = new WeakMap();
_Wallpaper_instances = new WeakSet();
wallpaper_fn = function() {
  if (!dependencies("swww")) return;
  try {
    const cursorPosition = hyprlandService.message("cursorpos");
    const transitionCmd = [
      "swww",
      "img",
      "--invert-y",
      "--transition-type",
      "grow",
      "--transition-duration",
      "1.5",
      "--transition-fps",
      "60",
      "--transition-pos",
      cursorPosition.replace(" ", ""),
      WP
    ].join(" ");
    sh(transitionCmd).then(() => {
      this.notify("wallpaper");
      this.emit("changed", true);
    }).catch((err) => {
      console.error("Error setting wallpaper:", err);
    });
  } catch (err) {
    console.error("Error getting cursor position:", err);
  }
};
setWallpaper_fn = async function(path) {
  __privateSet(this, _blockMonitor, true);
  try {
    await sh(`cp ${path} ${WP}`);
    __privateMethod(this, _Wallpaper_instances, wallpaper_fn).call(this);
  } catch (error) {
    console.error("Error setting wallpaper:", error);
  } finally {
    __privateSet(this, _blockMonitor, false);
  }
};
__decorateClass([
  property(String)
], Wallpaper.prototype, "wallpaper", 2);
__decorateClass([
  signal(Boolean)
], Wallpaper.prototype, "changed", 2);
Wallpaper = __decorateClass([
  register({ GTypeName: "Wallpaper" })
], Wallpaper);
var Wallpaper_default = new Wallpaper();

// src/scss/optionsTrackers.ts
var { matugen } = options_default.theme;
var ensureMatugenWallpaper = () => {
  const wallpaperPath = options_default.wallpaper.image.get();
  if (matugen.get() && (!wallpaperPath.length || !isAnImage(normalizePath(wallpaperPath)))) {
    Notify({
      summary: "Matugen Failed",
      body: "Please select a wallpaper in 'Theming > General' first.",
      iconName: icons_default.ui.warning
    });
    matugen.set(false);
  }
};
var initializeTrackers = (resetCssFunc) => {
  matugen.subscribe(() => {
    ensureMatugenWallpaper();
  });
  Wallpaper_default.connect("changed", () => {
    console.info("Wallpaper changed, regenerating Matugen colors...");
    if (options_default.theme.matugen.get()) {
      resetCssFunc();
    }
  });
  options_default.wallpaper.image.subscribe(() => {
    if (!Wallpaper_default.isRunning() && options_default.theme.matugen.get() || !options_default.wallpaper.enable.get()) {
      console.info("Wallpaper path changed, regenerating Matugen colors...");
      resetCssFunc();
    }
    if (options_default.wallpaper.pywal.get() && dependencies("wal")) {
      const wallpaperPath = options_default.wallpaper.image.get();
      bash(`wal -i ${wallpaperPath}`);
    }
  });
};

// src/lib/types/defaults/options.ts
var defaultColorMap = {
  rosewater: "#f5e0dc",
  flamingo: "#f2cdcd",
  pink: "#f5c2e7",
  mauve: "#cba6f7",
  red: "#f38ba8",
  maroon: "#eba0ac",
  peach: "#fab387",
  yellow: "#f9e2af",
  green: "#a6e3a1",
  teal: "#94e2d5",
  sky: "#89dceb",
  sapphire: "#74c7ec",
  blue: "#89b4fa",
  lavender: "#b4befe",
  text: "#cdd6f4",
  subtext1: "#bac2de",
  subtext2: "#a6adc8",
  overlay2: "#9399b2",
  overlay1: "#7f849c",
  overlay0: "#6c7086",
  surface2: "#585b70",
  surface1: "#45475a",
  surface0: "#313244",
  base2: "#242438",
  base: "#1e1e2e",
  mantle: "#181825",
  crust: "#11111b",
  surface1_2: "#454759",
  text2: "#cdd6f3",
  pink2: "#f5c2e6",
  red2: "#f38ba7",
  peach2: "#fab386",
  mantle2: "#181824",
  surface0_2: "#313243",
  surface2_2: "#585b69",
  overlay1_2: "#7f849b",
  lavender2: "#b4befd",
  mauve2: "#cba6f6",
  green2: "#a6e3a0",
  sky2: "#89dcea",
  teal2: "#94e2d4",
  yellow2: "#f9e2ad",
  maroon2: "#eba0ab",
  crust2: "#11111a",
  pink3: "#f5c2e8",
  red3: "#f38ba9",
  mantle3: "#181826",
  surface0_3: "#313245",
  surface2_3: "#585b71",
  overlay1_3: "#7f849d",
  lavender3: "#b4beff",
  mauve3: "#cba6f8",
  green3: "#a6e3a2",
  sky3: "#89dcec",
  teal3: "#94e2d6",
  yellow3: "#f9e2ae",
  maroon3: "#eba0ad",
  crust3: "#11111c"
};

// src/services/matugen/variations.ts
var getMatugenVariations = (matugenColors, variation) => {
  const matVtns = {
    standard_1: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.primary,
      red: matugenColors.tertiary,
      maroon: matugenColors.primary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.secondary,
      green: matugenColors.primary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.primary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      surface2_2: matugenColors.surface,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    standard_2: {
      rosewater: matugenColors.primary,
      flamingo: matugenColors.primary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.secondary,
      red: matugenColors.tertiary,
      maroon: matugenColors.secondary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.primary,
      green: matugenColors.secondary,
      teal: matugenColors.primary,
      sky: matugenColors.primary,
      sapphire: matugenColors.secondary,
      blue: matugenColors.secondary,
      lavender: matugenColors.secondary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.tertiary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.secondary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.secondary,
      surface2_2: matugenColors.surface,
      mauve2: matugenColors.secondary,
      green2: matugenColors.secondary,
      sky2: matugenColors.primary,
      teal2: matugenColors.primary,
      yellow2: matugenColors.primary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary,
      maroon3: matugenColors.secondary,
      crust3: matugenColors.surface_dim
    },
    standard_3: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.secondary,
      mauve: matugenColors.primary,
      red: matugenColors.secondary,
      maroon: matugenColors.primary,
      peach: matugenColors.secondary,
      yellow: matugenColors.secondary,
      green: matugenColors.primary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.secondary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.secondary,
      peach2: matugenColors.secondary,
      pink2: matugenColors.secondary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      surface2_2: matugenColors.surface,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.secondary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    vivid_1: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.primary_container,
      subtext2: matugenColors.primary_container,
      overlay2: matugenColors.primary_container,
      overlay1: matugenColors.primary_container,
      overlay0: matugenColors.primary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.primary,
      base: matugenColors.primary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.primary_container,
      peach2: matugenColors.primary_container,
      pink2: matugenColors.primary_container,
      mantle2: matugenColors.primary,
      surface1_2: matugenColors.primary,
      surface0_2: matugenColors.primary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.primary_container,
      crust2: matugenColors.primary,
      maroon2: matugenColors.primary_container,
      mauve2: matugenColors.primary_container,
      surface2_2: matugenColors.primary_container,
      green2: matugenColors.primary_container,
      sky2: matugenColors.primary_container,
      teal2: matugenColors.primary_container,
      yellow2: matugenColors.primary_container,
      pink3: matugenColors.primary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.primary,
      surface0_3: matugenColors.primary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.primary,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary_fixed,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary_fixed,
      maroon3: matugenColors.primary_fixed,
      crust3: matugenColors.primary
    },
    vivid_2: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.secondary_container,
      subtext2: matugenColors.secondary_container,
      overlay2: matugenColors.secondary_container,
      overlay1: matugenColors.secondary_container,
      overlay0: matugenColors.secondary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.secondary,
      base: matugenColors.secondary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.secondary_container,
      peach2: matugenColors.secondary_container,
      pink2: matugenColors.secondary_container,
      surface2_2: matugenColors.primary_container,
      mantle2: matugenColors.secondary,
      surface1_2: matugenColors.secondary,
      surface0_2: matugenColors.secondary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.secondary_container,
      crust2: matugenColors.secondary,
      maroon2: matugenColors.secondary_container,
      mauve2: matugenColors.secondary_container,
      green2: matugenColors.secondary_container,
      sky2: matugenColors.secondary_container,
      teal2: matugenColors.secondary_container,
      yellow2: matugenColors.secondary_container,
      pink3: matugenColors.secondary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.secondary,
      surface0_3: matugenColors.secondary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.secondary,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary_fixed,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary_fixed,
      maroon3: matugenColors.secondary_fixed,
      crust3: matugenColors.secondary
    },
    vivid_3: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.tertiary_container,
      subtext2: matugenColors.tertiary_container,
      overlay2: matugenColors.tertiary_container,
      overlay1: matugenColors.tertiary_container,
      overlay0: matugenColors.tertiary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.tertiary,
      base: matugenColors.tertiary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.tertiary_container,
      peach2: matugenColors.tertiary_container,
      pink2: matugenColors.tertiary_container,
      mantle2: matugenColors.tertiary,
      surface1_2: matugenColors.tertiary,
      surface0_2: matugenColors.tertiary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.tertiary_container,
      surface2_2: matugenColors.primary_container,
      crust2: matugenColors.tertiary,
      maroon2: matugenColors.tertiary_container,
      mauve2: matugenColors.tertiary_container,
      green2: matugenColors.tertiary_container,
      sky2: matugenColors.tertiary_container,
      teal2: matugenColors.tertiary_container,
      yellow2: matugenColors.tertiary_container,
      pink3: matugenColors.tertiary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.tertiary,
      surface0_3: matugenColors.tertiary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.tertiary,
      lavender3: matugenColors.tertiary,
      mauve3: matugenColors.tertiary,
      green3: matugenColors.tertiary_fixed,
      sky3: matugenColors.tertiary,
      teal3: matugenColors.tertiary,
      yellow3: matugenColors.tertiary_fixed,
      maroon3: matugenColors.tertiary_fixed,
      crust3: matugenColors.tertiary
    },
    monochrome_1: {
      rosewater: matugenColors.primary,
      flamingo: matugenColors.primary,
      pink: matugenColors.primary,
      mauve: matugenColors.primary,
      red: matugenColors.primary,
      maroon: matugenColors.primary,
      peach: matugenColors.primary,
      yellow: matugenColors.primary,
      green: matugenColors.primary,
      teal: matugenColors.primary,
      sky: matugenColors.primary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.primary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.primary,
      peach2: matugenColors.primary,
      pink2: matugenColors.primary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      surface2_2: matugenColors.surface,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      sky2: matugenColors.primary,
      teal2: matugenColors.primary,
      yellow2: matugenColors.primary,
      pink3: matugenColors.primary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    monochrome_2: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.secondary,
      mauve: matugenColors.secondary,
      red: matugenColors.secondary,
      maroon: matugenColors.secondary,
      peach: matugenColors.secondary,
      yellow: matugenColors.secondary,
      green: matugenColors.secondary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.secondary,
      blue: matugenColors.secondary,
      lavender: matugenColors.secondary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.secondary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.secondary,
      peach2: matugenColors.secondary,
      pink2: matugenColors.secondary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      surface2_2: matugenColors.surface,
      text2: matugenColors.on_background,
      lavender2: matugenColors.secondary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.secondary,
      mauve2: matugenColors.secondary,
      green2: matugenColors.secondary,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.secondary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.secondary,
      crust3: matugenColors.surface_dim
    },
    monochrome_3: {
      rosewater: matugenColors.tertiary,
      flamingo: matugenColors.tertiary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.tertiary,
      red: matugenColors.tertiary,
      maroon: matugenColors.tertiary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.tertiary,
      green: matugenColors.tertiary,
      teal: matugenColors.tertiary,
      sky: matugenColors.tertiary,
      sapphire: matugenColors.tertiary,
      blue: matugenColors.tertiary,
      lavender: matugenColors.tertiary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.tertiary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.tertiary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.tertiary,
      surface2_2: matugenColors.surface,
      mauve2: matugenColors.tertiary,
      green2: matugenColors.tertiary,
      sky2: matugenColors.tertiary,
      teal2: matugenColors.tertiary,
      yellow2: matugenColors.tertiary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.tertiary,
      mauve3: matugenColors.tertiary,
      green3: matugenColors.tertiary,
      sky3: matugenColors.tertiary,
      teal3: matugenColors.tertiary,
      yellow3: matugenColors.tertiary,
      maroon3: matugenColors.tertiary,
      crust3: matugenColors.surface_dim
    }
  };
  return matVtns[variation];
};

// src/services/matugen/index.ts
var { scheme_type, contrast } = options_default.theme.matugen_settings;
var { matugen: matugen2 } = options_default.theme;
var updateOptColor = (color2, opt2) => {
  opt2.set(color2);
};
async function generateMatugenColors() {
  if (!matugen2.get() || !dependencies("matugen")) {
    return;
  }
  const wallpaperPath = options_default.wallpaper.image.get();
  try {
    if (!wallpaperPath.length || !isAnImage(wallpaperPath)) {
      Notify({
        summary: "Matugen Failed",
        body: "Please select a wallpaper in 'Theming > General' first.",
        iconName: icons_default.ui.warning
      });
      return;
    }
    const normalizedContrast = contrast.get() > 1 ? 1 : contrast.get() < -1 ? -1 : contrast.get();
    const contents = await bash(
      `matugen image --dry-run -q ${wallpaperPath} -t scheme-${scheme_type.get()} --contrast ${normalizedContrast} --json hex`
    );
    await bash(`matugen image -q ${wallpaperPath} -t scheme-${scheme_type.get()} --contrast ${normalizedContrast}`);
    return JSON.parse(contents).colors[options_default.theme.matugen_settings.mode.get()];
  } catch (error) {
    const errMsg = `An error occurred while generating matugen colors: ${error}`;
    console.error(errMsg);
    return;
  }
}
var isColorValid = (color2) => {
  return defaultColorMap.hasOwnProperty(color2);
};
var replaceHexValues = (incomingHex, matugenColors) => {
  if (!options_default.theme.matugen.get()) {
    return incomingHex;
  }
  const matugenVariation = getMatugenVariations(matugenColors, options_default.theme.matugen_settings.variation.get());
  updateOptColor(matugenVariation.base, options_default.theme.bar.menus.menu.media.card.color);
  for (const curColor of Object.keys(defaultColorMap)) {
    const currentColor = curColor;
    if (!isColorValid(currentColor)) {
      continue;
    }
    const curColorValue = defaultColorMap[currentColor];
    if (curColorValue === incomingHex) {
      return matugenVariation[currentColor];
    }
  }
  return incomingHex;
};
var getMatugenHex = (incomingHex, matugenColors) => {
  const matugenVariation = getMatugenVariations(matugenColors, options_default.theme.matugen_settings.variation.get());
  for (const curColor of Object.keys(defaultColorMap)) {
    if (!isColorValid(curColor)) {
      continue;
    }
    const curColorValue = defaultColorMap[curColor];
    if (curColorValue === incomingHex) {
      return matugenVariation[curColor];
    }
  }
  return incomingHex;
};

// src/scss/utils/hotReload.ts
var initializeHotReload = async () => {
  const monitorList = [
    `${SRC_DIR}/src/scss/main.scss`,
    `${SRC_DIR}/src/scss/style/bar`,
    `${SRC_DIR}/src/scss/style/common`,
    `${SRC_DIR}/src/scss/style/menus`,
    `${SRC_DIR}/src/scss/style/notifications`,
    `${SRC_DIR}/src/scss/style/osd`,
    `${SRC_DIR}/src/scss/style/settings`,
    `${SRC_DIR}/src/scss/style/colors.scss`,
    `${SRC_DIR}/src/scss/style/highlights.scss`
  ];
  monitorList.forEach((file) => monitorFile(file, resetCss));
};

// src/scss/style.ts
var deps = ["font", "theme", "bar.flatButtons", "bar.position", "bar.battery.charging", "bar.battery.blocks"];
function extractVariables(theme, prefix = "", matugenColors) {
  let result = [];
  for (const key2 in theme) {
    if (!theme.hasOwnProperty(key2)) {
      continue;
    }
    const themeValue = theme[key2];
    const newPrefix = prefix ? `${prefix}-${key2}` : key2;
    const replacedValue = isHexColor(themeValue.value) && matugenColors !== void 0 ? replaceHexValues(themeValue.value, matugenColors) : themeValue.value;
    if (typeof themeValue === "function") {
      result.push(`$${newPrefix}: ${replacedValue};`);
      continue;
    }
    if (typeof themeValue !== "object" || themeValue === null || Array.isArray(themeValue)) continue;
    if (typeof themeValue.value !== "undefined") {
      result.push(`$${newPrefix}: ${replacedValue};`);
    } else {
      result = result.concat(extractVariables(themeValue, newPrefix, matugenColors));
    }
  }
  return result;
}
async function extractMatugenizedVariables(matugenColors) {
  try {
    const result = [];
    const defaultFileContent = JSON.parse(readFile(defaultFile) || "{}");
    for (const key2 in defaultFileContent) {
      if (key2.startsWith("theme.") === false) {
        continue;
      }
      const configValue = defaultFileContent[key2];
      if (!isHexColor(configValue) && matugenColors !== void 0) {
        result.push(`$${key2.replace("theme.", "").split(".").join("-")}: ${configValue};`);
        continue;
      }
      const matugenColor = getMatugenHex(configValue, matugenColors);
      result.push(`$${key2.replace("theme.", "").split(".").join("-")}: ${matugenColor};`);
    }
    return result;
  } catch (error) {
    console.error(error);
    return [];
  }
}
var resetCss = async () => {
  if (!dependencies("sass")) return;
  let variables = [];
  try {
    const matugenColors = await generateMatugenColors();
    if (options_default.theme.matugen.get() && matugenColors) {
      variables = await extractMatugenizedVariables(matugenColors);
    } else {
      variables = extractVariables(options_default.theme, "", void 0);
    }
    const vars = `${TMP}/variables.scss`;
    const css = `${TMP}/main.css`;
    const scss = `${TMP}/entry.scss`;
    const localScss = `${SRC_DIR}/src/scss/main.scss`;
    const themeVariables = variables;
    const integratedVariables = themeVariables;
    const imports = [vars].map((f) => `@import '${f}';`);
    writeFile(vars, integratedVariables.join("\n"));
    let mainScss = readFile(localScss);
    mainScss = `${imports}
${mainScss}`;
    writeFile(scss, mainScss);
    await bash(`sass --load-path=${SRC_DIR}/src/scss ${scss} ${css}`);
    app_default.apply_css(css, true);
  } catch (error) {
    console.error(error);
  }
};
initializeTrackers(resetCss);
initializeHotReload();
options_default.handler(deps, resetCss);
await resetCss();

// src/globals/useTheme.ts
import Gio3 from "gi://Gio";

// src/components/settings/shared/FileChooser.ts
import Gtk5 from "gi://Gtk?version=3.0";
import Gio2 from "gi://Gio";
var { restartCommand } = options_default.hyprpanel;
var whiteListedThemeProp = ["theme.bar.buttons.style"];
var loadJsonFile = (filePath) => {
  const file = Gio2.File.new_for_path(filePath);
  const [success, content] = file.load_contents(null);
  if (!success) {
    console.error(`Failed to import: ${filePath}`);
    return null;
  }
  const jsonString = new TextDecoder("utf-8").decode(content);
  return JSON.parse(jsonString);
};
var saveConfigToFile = (config, filePath) => {
  const file = Gio2.File.new_for_path(filePath);
  const outputStream = file.replace(null, false, Gio2.FileCreateFlags.NONE, null);
  const dataOutputStream = new Gio2.DataOutputStream({ base_stream: outputStream });
  const jsonString = JSON.stringify(config, null, 2);
  dataOutputStream.put_string(jsonString, null);
  dataOutputStream.close(null);
};
var filterConfigForThemeOnly = (config) => {
  const filteredConfig = {};
  for (const key2 in config) {
    const value = config[key2];
    if (typeof value === "string" && hexColorPattern.test(value)) {
      filteredConfig[key2] = config[key2];
    } else if (whiteListedThemeProp.includes(key2)) {
      filteredConfig[key2] = config[key2];
    }
  }
  return filteredConfig;
};
var filterConfigForNonTheme = (config) => {
  const filteredConfig = {};
  for (const key2 in config) {
    if (whiteListedThemeProp.includes(key2)) {
      continue;
    }
    const value = config[key2];
    if (!(typeof value === "string" && hexColorPattern.test(value))) {
      filteredConfig[key2] = config[key2];
    }
  }
  return filteredConfig;
};
var saveFileDialog = (filePath, themeOnly) => {
  const filterHexColorPairs = (jsonObject) => {
    const filteredObject = {};
    for (const key2 in jsonObject) {
      const value = jsonObject[key2];
      if (typeof value === "string" && isHexColor(value)) {
        filteredObject[key2] = jsonObject[key2];
      } else if (whiteListedThemeProp.includes(key2)) {
        filteredObject[key2] = jsonObject[key2];
      }
    }
    return filteredObject;
  };
  const filterOutHexColorPairs = (jsonObject) => {
    const filteredObject = {};
    for (const key2 in jsonObject) {
      if (whiteListedThemeProp.includes(key2)) {
        continue;
      }
      const value = jsonObject[key2];
      if (!(typeof value === "string" && isHexColor(value))) {
        filteredObject[key2] = jsonObject[key2];
      }
    }
    return filteredObject;
  };
  const dialog = new Gtk5.FileChooserDialog({
    title: `Save Hyprpanel ${themeOnly ? "Theme" : "Config"}`,
    action: Gtk5.FileChooserAction.SAVE
  });
  dialog.add_button(Gtk5.STOCK_CANCEL, Gtk5.ResponseType.CANCEL);
  dialog.add_button(Gtk5.STOCK_SAVE, Gtk5.ResponseType.ACCEPT);
  dialog.set_current_name(themeOnly ? "hyprpanel_theme.json" : "hyprpanel_config.json");
  dialog.get_style_context().add_class("hyprpanel-file-chooser");
  const response = dialog.run();
  try {
    const original_file_path = filePath;
    const file = Gio2.File.new_for_path(original_file_path);
    const [success, content] = file.load_contents(null);
    if (!success) {
      console.error(`Could not find 'config.json' at ${TMP}`);
      return;
    }
    const jsonString = new TextDecoder("utf-8").decode(content);
    const jsonObject = JSON.parse(jsonString);
    const filteredJsonObject = themeOnly ? filterHexColorPairs(jsonObject) : filterOutHexColorPairs(jsonObject);
    const filteredContent = JSON.stringify(filteredJsonObject, null, 2);
    if (response === Gtk5.ResponseType.ACCEPT) {
      const file_path = dialog.get_filename();
      console.info(`Original file path: ${file_path}`);
      const getIncrementedFilePath = (filePath2) => {
        let increment = 1;
        const baseName = filePath2.replace(/(\.\w+)$/, "");
        const match = filePath2.match(/(\.\w+)$/);
        const extension = match ? match[0] : "";
        let newFilePath = filePath2;
        let file2 = Gio2.File.new_for_path(newFilePath);
        while (file2.query_exists(null)) {
          newFilePath = `${baseName}_${increment}${extension}`;
          file2 = Gio2.File.new_for_path(newFilePath);
          increment++;
        }
        return newFilePath;
      };
      const finalFilePath = getIncrementedFilePath(file_path);
      console.info(`File will be saved at: ${finalFilePath}`);
      try {
        const save_file = Gio2.File.new_for_path(finalFilePath);
        const outputStream = save_file.replace(null, false, Gio2.FileCreateFlags.NONE, null);
        const dataOutputStream = new Gio2.DataOutputStream({
          base_stream: outputStream
        });
        dataOutputStream.put_string(filteredContent, null);
        dataOutputStream.close(null);
        Notify({
          summary: "File Saved Successfully",
          body: `At ${finalFilePath}.`,
          iconName: icons_default.ui.info
        });
      } catch (e) {
        if (e instanceof Error) {
          console.error("Failed to write to file:", e.message);
        }
      }
    }
    dialog.destroy();
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    dialog.destroy();
    Notify({
      summary: `${themeOnly ? "Theme" : "Config"} Export Failed`,
      body: errorMessage ?? "An unknown error occurred.",
      iconName: icons_default.ui.warning
    });
  }
};
var importFiles = (themeOnly = false) => {
  const dialog = new Gtk5.FileChooserDialog({
    title: `Import Hyprpanel ${themeOnly ? "Theme" : "Config"}`,
    action: Gtk5.FileChooserAction.OPEN
  });
  dialog.set_current_folder(`${SRC_DIR}/themes`);
  dialog.add_button(Gtk5.STOCK_CANCEL, Gtk5.ResponseType.CANCEL);
  dialog.add_button(Gtk5.STOCK_OPEN, Gtk5.ResponseType.ACCEPT);
  dialog.get_style_context().add_class("hyprpanel-file-chooser");
  const response = dialog.run();
  try {
    if (response === Gtk5.ResponseType.CANCEL) {
      dialog.destroy();
      return;
    }
    if (response === Gtk5.ResponseType.ACCEPT) {
      const filePath = dialog.get_filename();
      if (filePath === null) {
        Notify({
          summary: "Failed to import",
          body: "No file selected.",
          iconName: icons_default.ui.warning
        });
        return;
      }
      const importedConfig = loadJsonFile(filePath);
      if (!importedConfig) {
        dialog.destroy();
        return;
      }
      Notify({
        summary: `Importing ${themeOnly ? "Theme" : "Config"}`,
        body: `Importing: ${filePath}`,
        iconName: icons_default.ui.info
      });
      const tmpConfigFile = Gio2.File.new_for_path(`${TMP}/config.json`);
      const optionsConfigFile = Gio2.File.new_for_path(CONFIG);
      const [tmpSuccess, tmpContent] = tmpConfigFile.load_contents(null);
      const [optionsSuccess, optionsContent] = optionsConfigFile.load_contents(null);
      if (!tmpSuccess || !optionsSuccess) {
        console.error("Failed to read existing configuration files.");
        dialog.destroy();
        return;
      }
      let tmpConfig = JSON.parse(new TextDecoder("utf-8").decode(tmpContent));
      let optionsConfig = JSON.parse(new TextDecoder("utf-8").decode(optionsContent));
      if (themeOnly) {
        const filteredConfig = filterConfigForThemeOnly(importedConfig);
        tmpConfig = { ...tmpConfig, ...filteredConfig };
        optionsConfig = { ...optionsConfig, ...filteredConfig };
      } else {
        const filteredConfig = filterConfigForNonTheme(importedConfig);
        tmpConfig = { ...tmpConfig, ...filteredConfig };
        optionsConfig = { ...optionsConfig, ...filteredConfig };
      }
      saveConfigToFile(tmpConfig, `${TMP}/config.json`);
      saveConfigToFile(optionsConfig, CONFIG);
    }
    dialog.destroy();
    bash(restartCommand.get());
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    dialog.destroy();
    Notify({
      summary: `${themeOnly ? "Theme" : "Config"} Import Failed`,
      body: errorMessage ?? "An unknown error occurred.",
      iconName: icons_default.ui.warning
    });
  }
};

// src/globals/useTheme.ts
var { restartCommand: restartCommand2 } = options_default.hyprpanel;
var hexColorPattern = /^#([0-9A-Fa-f]{6}|[0-9A-Fa-f]{8})$/;
globalThis.useTheme = (filePath) => {
  try {
    const importedConfig = loadJsonFile(filePath);
    if (!importedConfig) {
      return;
    }
    const tmpConfigFile = Gio3.File.new_for_path(`${TMP}/config.json`);
    const optionsConfigFile = Gio3.File.new_for_path(CONFIG);
    const [tmpSuccess, tmpContent] = tmpConfigFile.load_contents(null);
    const [optionsSuccess, optionsContent] = optionsConfigFile.load_contents(null);
    if (!tmpSuccess || !optionsSuccess) {
      throw new Error("Failed to load theme file.");
    }
    let tmpConfig = JSON.parse(new TextDecoder("utf-8").decode(tmpContent));
    let optionsConfig = JSON.parse(new TextDecoder("utf-8").decode(optionsContent));
    const filteredConfig = filterConfigForThemeOnly(importedConfig);
    tmpConfig = { ...tmpConfig, ...filteredConfig };
    optionsConfig = { ...optionsConfig, ...filteredConfig };
    saveConfigToFile(tmpConfig, `${TMP}/config.json`);
    saveConfigToFile(optionsConfig, CONFIG);
    bash(restartCommand2.get());
  } catch (error) {
    errorHandler(error);
  }
};

// src/globals/wallpaper.ts
import GLib4 from "gi://GLib?version=2.0";
var { EXISTS, IS_REGULAR } = GLib4.FileTest;
var { enable: enableWallpaper, image } = options_default.wallpaper;
globalThis.setWallpaper = (filePath) => {
  if (!(GLib4.file_test(filePath, EXISTS) && GLib4.file_test(filePath, IS_REGULAR))) {
    throw new Error("The input file is not a valid wallpaper.");
  }
  image.set(filePath);
  if (!enableWallpaper.get()) {
    return;
  }
  try {
    Wallpaper_default.setWallpaper(filePath);
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(error.message);
    } else {
      throw new Error(`An error occurred while setting the wallpaper: ${error}`);
    }
  }
};

// src/globals/systray.ts
import AstalTray from "gi://AstalTray";
var systemtray = AstalTray.get_default();
globalThis.getSystrayItems = () => {
  try {
    const items = systemtray.get_items().map((systrayItem) => systrayItem.id).join("\n");
    return items;
  } catch (error) {
    errorHandler(error);
  }
};

// src/globals/dropdown.ts
var globalEventBoxes = variable_default({});

// src/globals/utilities.ts
globalThis.isWindowVisible = (windowName) => {
  const appWindow = app_default.get_window(windowName);
  if (appWindow === void 0 || appWindow === null) {
    throw new Error(`Window with name "${windowName}" not found.`);
  }
  return appWindow.visible;
};
globalThis.setLayout = (layout) => {
  try {
    const { layouts: layouts3 } = options_default.bar;
    layouts3.set(layout);
    return "Successfully updated layout.";
  } catch (error) {
    return `Failed to set layout: ${error}`;
  }
};

// src/components/bar/utils/sideEffects.ts
var { showIcon, showTime } = options_default.bar.clock;
showIcon.subscribe(() => {
  if (!showTime.get() && !showIcon.get()) {
    showTime.set(true);
  }
});
showTime.subscribe(() => {
  if (!showTime.get() && !showIcon.get()) {
    showIcon.set(true);
  }
});
var { label, icon } = options_default.bar.windowtitle;
label.subscribe(() => {
  if (!label.get() && !icon.get()) {
    icon.set(true);
  }
});
icon.subscribe(() => {
  if (!label.get() && !icon.get()) {
    label.set(true);
  }
});

// src/components/menus/shared/dropdown/locationHandler/index.ts
var { location } = options_default.theme.bar;
var { scalingPriority } = options_default;
function getDropdownEventBox(windowName) {
  return globalEventBoxes.get()[windowName];
}
function getFocusedHyprlandMonitor() {
  const allMonitors = hyprlandService.get_monitors();
  return allMonitors.find((monitor3) => monitor3.id === hyprlandService.focusedMonitor.id);
}
function applyMonitorScaling(width, height, monitorScaling) {
  const gdkEnvScale = default2.getenv("GDK_SCALE") || "1";
  const userScalingPriority = scalingPriority.get();
  let adjustedWidth = width;
  let adjustedHeight = height;
  if (userScalingPriority === "both") {
    const gdkScaleValue = parseFloat(gdkEnvScale);
    adjustedWidth /= gdkScaleValue;
    adjustedHeight /= gdkScaleValue;
    adjustedWidth /= monitorScaling;
    adjustedHeight /= monitorScaling;
  } else if (/^\d+(\.\d+)?$/.test(gdkEnvScale) && userScalingPriority === "gdk") {
    const gdkScaleValue = parseFloat(gdkEnvScale);
    adjustedWidth /= gdkScaleValue;
    adjustedHeight /= gdkScaleValue;
  } else {
    adjustedWidth /= monitorScaling;
    adjustedHeight /= monitorScaling;
  }
  return { adjustedWidth, adjustedHeight };
}
function adjustForVerticalTransform(monitorWidth, monitorHeight, isVertical) {
  if (!isVertical) {
    return { finalWidth: monitorWidth, finalHeight: monitorHeight };
  }
  return { finalWidth: monitorHeight, finalHeight: monitorWidth };
}
function calculateHorizontalMargins(monitorWidth, dropdownWidth, anchorX) {
  const minimumSpacing = 0;
  let rightMarginSpacing = monitorWidth - dropdownWidth / 2;
  rightMarginSpacing -= anchorX;
  let leftMarginSpacing = monitorWidth - dropdownWidth - rightMarginSpacing;
  if (rightMarginSpacing < minimumSpacing) {
    rightMarginSpacing = minimumSpacing;
    leftMarginSpacing = monitorWidth - dropdownWidth - minimumSpacing;
  }
  if (leftMarginSpacing < minimumSpacing) {
    leftMarginSpacing = minimumSpacing;
    rightMarginSpacing = monitorWidth - dropdownWidth - minimumSpacing;
  }
  return { leftMargin: leftMarginSpacing, rightMargin: rightMarginSpacing };
}
function setVerticalPosition(dropdownEventBox, monitorHeight, dropdownHeight) {
  if (location.get() === "top") {
    dropdownEventBox.set_margin_top(0);
    dropdownEventBox.set_margin_bottom(monitorHeight);
  } else {
    dropdownEventBox.set_margin_bottom(0);
    dropdownEventBox.set_margin_top(monitorHeight - dropdownHeight);
  }
}
var calculateMenuPosition = async (positionCoordinates, windowName) => {
  try {
    const dropdownEventBox = getDropdownEventBox(windowName);
    if (!dropdownEventBox) {
      return;
    }
    const focusedHyprlandMonitor = getFocusedHyprlandMonitor();
    if (!focusedHyprlandMonitor) {
      return;
    }
    const dropdownWidth = dropdownEventBox.get_child()?.get_allocation().width ?? 0;
    const dropdownHeight = dropdownEventBox.get_child()?.get_allocation().height ?? 0;
    const monitorScaling = focusedHyprlandMonitor.scale || 1;
    const { width: rawMonitorWidth, height: rawMonitorHeight, transform } = focusedHyprlandMonitor;
    if (!rawMonitorWidth || !rawMonitorHeight) {
      return;
    }
    const { adjustedWidth, adjustedHeight } = applyMonitorScaling(
      rawMonitorWidth,
      rawMonitorHeight,
      monitorScaling
    );
    const isVertical = transform !== void 0 ? transform % 2 !== 0 : false;
    const { finalWidth, finalHeight } = adjustForVerticalTransform(adjustedWidth, adjustedHeight, isVertical);
    const { leftMargin, rightMargin } = calculateHorizontalMargins(
      finalWidth,
      dropdownWidth,
      positionCoordinates[0]
    );
    dropdownEventBox.set_margin_left(leftMargin);
    dropdownEventBox.set_margin_right(rightMargin);
    setVerticalPosition(dropdownEventBox, finalHeight, dropdownHeight);
  } catch (caughtError) {
    console.error(`Error getting menu position: ${caughtError}`);
  }
};

// src/components/bar/utils/menu.ts
var closeAllMenus = () => {
  const menuWindows = app_default.get_windows().filter((w) => {
    if (w.name) {
      return /.*menu/.test(w.name);
    }
    return false;
  }).map((window) => window.name);
  menuWindows.forEach((window) => {
    if (window) {
      app_default.get_window(window)?.set_visible(false);
    }
  });
};
var openMenu = async (clicked, event, window) => {
  try {
    const middleOfButton = Math.floor(clicked.get_allocated_width() / 2);
    const xAxisOfButtonClick = clicked.get_pointer()[0];
    const middleOffset = middleOfButton - xAxisOfButtonClick;
    const clickPos = event.get_root_coords();
    const adjustedXCoord = clickPos[1] + middleOffset;
    const coords = [adjustedXCoord, clickPos[2]];
    await calculateMenuPosition(coords, window);
    closeAllMenus();
    app_default.toggle_window(window);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Error calculating menu position: ${error.stack}`);
    } else {
      console.error(`Unknown error occurred: ${error}`);
    }
  }
};

// src/lib/shared/eventHandlers.ts
function onPrimaryClick(widget2, handler2) {
  const id = widget2.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_PRIMARY) {
      handler2(self, event);
    }
  });
  return () => widget2.disconnect(id);
}
function onSecondaryClick(widget2, handler2) {
  const id = widget2.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_SECONDARY) {
      handler2(self, event);
    }
  });
  return () => widget2.disconnect(id);
}
function onMiddleClick(widget2, handler2) {
  const id = widget2.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_MIDDLE) {
      handler2(self, event);
    }
  });
  return () => widget2.disconnect(id);
}
function onScroll(widget2, throttledHandler, scrollUpAction, scrollDownAction) {
  const id = widget2.connect("scroll-event", (self, event) => {
    const [directionSuccess, direction] = event.get_scroll_direction();
    const [deltasSuccess, , yScroll] = event.get_scroll_deltas();
    if (directionSuccess) {
      handleScrollDirection(direction, scrollUpAction, scrollDownAction, self, event, throttledHandler);
    } else if (deltasSuccess) {
      handleScrollDeltas(yScroll, scrollUpAction, scrollDownAction, self, event, throttledHandler);
    }
  });
  return () => widget2.disconnect(id);
}
function handleScrollDirection(direction, scrollUpAction, scrollDownAction, self, event, throttledHandler) {
  if (direction === Gdk.ScrollDirection.UP) {
    throttledHandler(scrollUpAction, { clicked: self, event });
  } else if (direction === Gdk.ScrollDirection.DOWN) {
    throttledHandler(scrollDownAction, { clicked: self, event });
  }
}
function handleScrollDeltas(yScroll, scrollUpAction, scrollDownAction, self, event, throttledHandler) {
  if (yScroll > 0) {
    throttledHandler(scrollDownAction, { clicked: self, event });
  } else if (yScroll < 0) {
    throttledHandler(scrollUpAction, { clicked: self, event });
  }
}

// src/components/bar/utils/helpers.ts
var { scrollSpeed } = options_default.bar.customModules;
var dummyVar = Variable("");
var handlePostInputUpdater = (postInputUpdater2) => {
  if (postInputUpdater2 !== void 0) {
    postInputUpdater2.set(!postInputUpdater2.get());
  }
};
var runAsyncCommand = (cmd, events, fn, postInputUpdater2) => {
  if (cmd.startsWith("menu:")) {
    const menuName = cmd.split(":")[1].trim().toLowerCase();
    openMenu(events.clicked, events.event, `${menuName}menu`);
    return;
  }
  execAsync(["bash", "-c", cmd]).then((output) => {
    handlePostInputUpdater(postInputUpdater2);
    if (fn !== void 0) {
      fn(output);
    }
  }).catch((err) => console.error(`Error running command "${cmd}": ${err})`));
};
function throttleInput(func, limit) {
  let inThrottle = false;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => {
        inThrottle = false;
      }, limit);
    }
  };
}
var throttledScrollHandler = (interval3) => throttleInput((cmd, args, fn, postInputUpdater2) => {
  runAsyncCommand(cmd, args, fn, postInputUpdater2);
}, 200 / interval3);
var inputHandler = (self, {
  onPrimaryClick: onPrimaryClickInput,
  onSecondaryClick: onSecondaryClickInput,
  onMiddleClick: onMiddleClickInput,
  onScrollUp: onScrollUpInput,
  onScrollDown: onScrollDownInput
}, postInputUpdater2) => {
  const sanitizeInput = (input) => {
    if (input === void 0) {
      return "";
    }
    return input.get();
  };
  const updateHandlers = () => {
    const interval3 = scrollSpeed.get();
    const throttledHandler = throttledScrollHandler(interval3);
    const disconnectPrimaryClick = onPrimaryClick(self, (clicked, event) => {
      runAsyncCommand(
        sanitizeInput(onPrimaryClickInput?.cmd || dummyVar),
        { clicked, event },
        onPrimaryClickInput.fn,
        postInputUpdater2
      );
    });
    const disconnectSecondaryClick = onSecondaryClick(self, (clicked, event) => {
      runAsyncCommand(
        sanitizeInput(onSecondaryClickInput?.cmd || dummyVar),
        { clicked, event },
        onSecondaryClickInput.fn,
        postInputUpdater2
      );
    });
    const disconnectMiddleClick = onMiddleClick(self, (clicked, event) => {
      runAsyncCommand(
        sanitizeInput(onMiddleClickInput?.cmd || dummyVar),
        { clicked, event },
        onMiddleClickInput.fn,
        postInputUpdater2
      );
    });
    const id = self.connect("scroll-event", (self2, event) => {
      const handleScroll = (input) => {
        if (input) {
          throttledHandler(sanitizeInput(input.cmd), { clicked: self2, event }, input.fn, postInputUpdater2);
        }
      };
      if (isScrollUp(event)) {
        handleScroll(onScrollUpInput);
      }
      if (isScrollDown(event)) {
        handleScroll(onScrollDownInput);
      }
    });
    return {
      disconnectPrimary: disconnectPrimaryClick,
      disconnectSecondary: disconnectSecondaryClick,
      disconnectMiddle: disconnectMiddleClick,
      disconnectScroll: () => self.disconnect(id)
    };
  };
  updateHandlers();
  const sanitizeVariable = (someVar) => {
    if (someVar === void 0 || typeof someVar.bind !== "function") {
      return bind(dummyVar);
    }
    return bind(someVar);
  };
  Variable.derive(
    [
      bind(scrollSpeed),
      sanitizeVariable(onPrimaryClickInput),
      sanitizeVariable(onSecondaryClickInput),
      sanitizeVariable(onMiddleClickInput),
      sanitizeVariable(onScrollUpInput),
      sanitizeVariable(onScrollDownInput)
    ],
    () => {
      const handlers = updateHandlers();
      handlers.disconnectPrimary();
      handlers.disconnectSecondary();
      handlers.disconnectMiddle();
      handlers.disconnectScroll();
    }
  )();
};
var divide = ([total, used], round6) => {
  const percentageTotal = used / total * 100;
  if (round6) {
    return total > 0 ? Math.round(percentageTotal) : 0;
  }
  return total > 0 ? parseFloat(percentageTotal.toFixed(2)) : 0;
};
var formatSizeInKiB = (sizeInBytes, round6) => {
  const sizeInGiB = sizeInBytes / 1024 ** 1;
  return round6 ? Math.round(sizeInGiB) : parseFloat(sizeInGiB.toFixed(2));
};
var formatSizeInMiB = (sizeInBytes, round6) => {
  const sizeInGiB = sizeInBytes / 1024 ** 2;
  return round6 ? Math.round(sizeInGiB) : parseFloat(sizeInGiB.toFixed(2));
};
var formatSizeInGiB = (sizeInBytes, round6) => {
  const sizeInGiB = sizeInBytes / 1024 ** 3;
  return round6 ? Math.round(sizeInGiB) : parseFloat(sizeInGiB.toFixed(2));
};
var formatSizeInTiB = (sizeInBytes, round6) => {
  const sizeInGiB = sizeInBytes / 1024 ** 4;
  return round6 ? Math.round(sizeInGiB) : parseFloat(sizeInGiB.toFixed(2));
};
var autoFormatSize = (sizeInBytes, round6) => {
  if (sizeInBytes >= 1024 ** 4) return formatSizeInTiB(sizeInBytes, round6);
  if (sizeInBytes >= 1024 ** 3) return formatSizeInGiB(sizeInBytes, round6);
  if (sizeInBytes >= 1024 ** 2) return formatSizeInMiB(sizeInBytes, round6);
  if (sizeInBytes >= 1024 ** 1) return formatSizeInKiB(sizeInBytes, round6);
  return sizeInBytes;
};
var getPostfix = (sizeInBytes) => {
  if (sizeInBytes >= 1024 ** 4) return "TiB";
  if (sizeInBytes >= 1024 ** 3) return "GiB";
  if (sizeInBytes >= 1024 ** 2) return "MiB";
  if (sizeInBytes >= 1024 ** 1) return "KiB";
  return "B";
};
var renderResourceLabel = (lblType, rmUsg, round6) => {
  const { used, total, percentage, free } = rmUsg;
  const formatFunctions = {
    TiB: formatSizeInTiB,
    GiB: formatSizeInGiB,
    MiB: formatSizeInMiB,
    KiB: formatSizeInKiB,
    B: (size) => size
  };
  const totalSizeFormatted = autoFormatSize(total, round6);
  const postfix = getPostfix(total);
  const formatUsed = formatFunctions[postfix] || formatFunctions["B"];
  const usedSizeFormatted = formatUsed(used, round6);
  if (lblType === "used/total") {
    return `${usedSizeFormatted}/${totalSizeFormatted} ${postfix}`;
  }
  if (lblType === "used") {
    return `${autoFormatSize(used, round6)} ${getPostfix(used)}`;
  }
  if (lblType === "free") {
    return `${autoFormatSize(free, round6)} ${getPostfix(free)}`;
  }
  return `${percentage}%`;
};
var formatTooltip = (dataType, lblTyp) => {
  switch (lblTyp) {
    case "used":
      return `Used ${dataType}`;
    case "free":
      return `Free ${dataType}`;
    case "used/total":
      return `Used/Total ${dataType}`;
    case "percentage":
      return `Percentage ${dataType} Usage`;
    default:
      return "";
  }
};

// ../../../usr/share/astal/gjs/gtk3/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx2;

// src/components/bar/modules/menu/index.tsx
var { rightClick, middleClick, scrollUp, scrollDown, autoDetectIcon, icon: icon2 } = options_default.bar.launcher;
var Menu = () => {
  const iconBinding = Variable.derive(
    [autoDetectIcon, icon2],
    (autoDetect, iconValue) => autoDetect ? getDistroIcon() : iconValue
  );
  const componentClassName = bind(options_default.theme.bar.buttons.style).as((style3) => {
    const styleMap2 = {
      default: "style1",
      split: "style2",
      wave: "style3",
      wave2: "style3"
    };
    return `dashboard ${styleMap2[style3]}`;
  });
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName,
      onDestroy: () => {
        iconBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("label", { className: "bar-menu_label bar-button_icon txt-icon bar", label: iconBinding() })
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "dashboard",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick),
            bind(middleClick),
            bind(scrollUp),
            bind(scrollDown),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "dashboardmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp.get(), scrollDown.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/workspaces/helpers/index.ts
var { workspaces, reverse_scroll, ignored } = options_default.bar.workspaces;
var workspaceRules = Variable(getWorkspaceMonitorMap());
var forceUpdater = Variable(true);
function isWorkspaceValidForMonitor(workspaceId, workspaceMonitorRules, monitorId, workspaceList, monitorList) {
  const monitorNameMap = {};
  const allWorkspaceInstances = workspaceList ?? [];
  const workspaceMonitorReferences = allWorkspaceInstances.filter((workspaceInstance) => workspaceInstance !== null).map((workspaceInstance) => {
    return {
      id: workspaceInstance.monitor?.id,
      name: workspaceInstance.monitor?.name
    };
  });
  const mergedMonitorInstances = [
    ...new Map(
      [...workspaceMonitorReferences, ...monitorList].map((monitorCandidate) => [
        monitorCandidate.id,
        monitorCandidate
      ])
    ).values()
  ];
  mergedMonitorInstances.forEach((monitorInstance) => {
    monitorNameMap[monitorInstance.id] = monitorInstance.name;
  });
  const currentMonitorName = monitorNameMap[monitorId];
  const currentMonitorWorkspaceRules = workspaceMonitorRules[currentMonitorName] ?? [];
  const activeWorkspaceIds = new Set(allWorkspaceInstances.map((ws) => ws.id));
  const filteredWorkspaceRules = currentMonitorWorkspaceRules.filter((ws) => !activeWorkspaceIds.has(ws));
  if (filteredWorkspaceRules === void 0) {
    return false;
  }
  return filteredWorkspaceRules.includes(workspaceId);
}
function getWorkspaceMonitorMap() {
  try {
    const rulesResponse = hyprlandService.message("j/workspacerules");
    const workspaceMonitorRules = {};
    const parsedWorkspaceRules = JSON.parse(rulesResponse);
    parsedWorkspaceRules.forEach((rule) => {
      const workspaceNumber = parseInt(rule.workspaceString, 10);
      if (rule.monitor === void 0 || isNaN(workspaceNumber)) {
        return;
      }
      const doesMonitorExistInRules = Object.hasOwnProperty.call(workspaceMonitorRules, rule.monitor);
      if (doesMonitorExistInRules) {
        workspaceMonitorRules[rule.monitor].push(workspaceNumber);
      } else {
        workspaceMonitorRules[rule.monitor] = [workspaceNumber];
      }
    });
    return workspaceMonitorRules;
  } catch (error) {
    console.error(error);
    return {};
  }
}
function isWorkspaceIgnored(ignoredWorkspacesVariable, workspaceNumber) {
  if (ignoredWorkspacesVariable.get() === "") {
    return false;
  }
  const ignoredWorkspacesRegex = new RegExp(ignoredWorkspacesVariable.get());
  return ignoredWorkspacesRegex.test(workspaceNumber.toString());
}
function navigateWorkspace(direction, ignoredWorkspacesVariable) {
  const allHyprlandWorkspaces = hyprlandService.get_workspaces() || [];
  const activeWorkspaceIds = allHyprlandWorkspaces.filter((workspaceInstance) => hyprlandService.focusedMonitor.id === workspaceInstance.monitor?.id).map((workspaceInstance) => workspaceInstance.id);
  const assignedOrOccupiedWorkspaces = activeWorkspaceIds.sort((a, b) => a - b);
  if (assignedOrOccupiedWorkspaces.length === 0) {
    return;
  }
  const workspaceIndex = assignedOrOccupiedWorkspaces.indexOf(hyprlandService.focusedWorkspace?.id);
  const step = direction === "next" ? 1 : -1;
  let newIndex = (workspaceIndex + step + assignedOrOccupiedWorkspaces.length) % assignedOrOccupiedWorkspaces.length;
  let attempts = 0;
  while (attempts < assignedOrOccupiedWorkspaces.length) {
    const targetWorkspaceNumber = assignedOrOccupiedWorkspaces[newIndex];
    if (!isWorkspaceIgnored(ignoredWorkspacesVariable, targetWorkspaceNumber)) {
      hyprlandService.dispatch("workspace", targetWorkspaceNumber.toString());
      return;
    }
    newIndex = (newIndex + step + assignedOrOccupiedWorkspaces.length) % assignedOrOccupiedWorkspaces.length;
    attempts++;
  }
}
function goToNextWorkspace(ignoredWorkspacesVariable) {
  navigateWorkspace("next", ignoredWorkspacesVariable);
}
function goToPreviousWorkspace(ignoredWorkspacesVariable) {
  navigateWorkspace("prev", ignoredWorkspacesVariable);
}
function throttle(func, limit) {
  let isThrottleActive;
  return function(...args) {
    if (!isThrottleActive) {
      func.apply(this, args);
      isThrottleActive = true;
      setTimeout(() => {
        isThrottleActive = false;
      }, limit);
    }
  };
}
function initThrottledScrollHandlers(scrollSpeed2) {
  const throttledScrollUp = throttle(() => {
    if (reverse_scroll.get()) {
      goToPreviousWorkspace(ignored);
    } else {
      goToNextWorkspace(ignored);
    }
  }, 200 / scrollSpeed2);
  const throttledScrollDown = throttle(() => {
    if (reverse_scroll.get()) {
      goToNextWorkspace(ignored);
    } else {
      goToPreviousWorkspace(ignored);
    }
  }, 200 / scrollSpeed2);
  return { throttledScrollUp, throttledScrollDown };
}
function getWorkspacesToRender(totalWorkspaces, workspaceInstances, workspaceMonitorRules, monitorId, isMonitorSpecific, hyprlandMonitorInstances) {
  let allPotentialWorkspaces = range(totalWorkspaces || 8);
  const allWorkspaceInstances = workspaceInstances ?? [];
  const activeWorkspaceIds = allWorkspaceInstances.map((workspaceInstance) => workspaceInstance.id);
  const monitorReferencesForActiveWorkspaces = allWorkspaceInstances.map((workspaceInstance) => {
    return {
      id: workspaceInstance.monitor?.id ?? -1,
      name: workspaceInstance.monitor?.name ?? ""
    };
  });
  const currentMonitorInstance = hyprlandMonitorInstances.find((monitorObj) => monitorObj.id === monitorId) || monitorReferencesForActiveWorkspaces.find((monitorObj) => monitorObj.id === monitorId);
  const allWorkspacesWithRules = Object.keys(workspaceMonitorRules).reduce(
    (accumulator, monitorName) => {
      return [...accumulator, ...workspaceMonitorRules[monitorName]];
    },
    []
  );
  const activeWorkspacesForCurrentMonitor = activeWorkspaceIds.filter((workspaceId) => {
    const metadataForWorkspace = allWorkspaceInstances.find((workspaceObj) => workspaceObj.id === workspaceId);
    if (metadataForWorkspace) {
      return metadataForWorkspace?.monitor?.id === monitorId;
    }
    if (currentMonitorInstance && Object.hasOwnProperty.call(workspaceMonitorRules, currentMonitorInstance.name) && allWorkspacesWithRules.includes(workspaceId)) {
      return workspaceMonitorRules[currentMonitorInstance.name].includes(workspaceId);
    }
  });
  if (isMonitorSpecific) {
    const validWorkspaceNumbers = range(totalWorkspaces).filter((workspaceNumber) => {
      return isWorkspaceValidForMonitor(
        workspaceNumber,
        workspaceMonitorRules,
        monitorId,
        allWorkspaceInstances,
        hyprlandMonitorInstances
      );
    });
    allPotentialWorkspaces = [.../* @__PURE__ */ new Set([...activeWorkspacesForCurrentMonitor, ...validWorkspaceNumbers])];
  } else {
    allPotentialWorkspaces = [.../* @__PURE__ */ new Set([...allPotentialWorkspaces, ...activeWorkspaceIds])];
  }
  return allPotentialWorkspaces.filter((workspace) => !isWorkspaceIgnored(ignored, workspace)).sort((a, b) => a - b);
}
function initWorkspaceEvents() {
  hyprlandService.connect("config-reloaded", () => {
    workspaceRules.set(getWorkspaceMonitorMap());
  });
  hyprlandService.connect("client-moved", () => {
    forceUpdater.set(!forceUpdater.get());
  });
  hyprlandService.connect("client-added", () => {
    forceUpdater.set(!forceUpdater.get());
  });
  hyprlandService.connect("client-removed", () => {
    forceUpdater.set(!forceUpdater.get());
  });
}

// src/lib/constants/workspaces.ts
var defaultApplicationIcons = {
  "[dD]iscord": "\u{F066F}",
  "^thunderbird": "\uF42F",
  "class:wezterm$": "\uF489",
  "draw.io": "\u{F01DF}",
  "firefox-developer-edition": "\uF488",
  "google-chrome": "\uF268",
  "title:YouTube ": "\uF16A",
  Spotify: "\u{F04C7}",
  chromium: "\uF268",
  code: "\u{F0A1E}",
  dbeaver: "\uF1C0",
  edge: "\u{F01E9}",
  evince: "\uF1C1",
  firefox: "\uF269",
  foot: "\uF489",
  keepassxc: "\uEB11",
  keymapp: "\uF4EC",
  kitty: "\uF489",
  obsidian: "\u{F082E}",
  password$: "\uEB11",
  qBittorrent$: "\uF0ED",
  rofi: "\uEA6D",
  slack: "\uF198",
  spotube: "\u{F04C7}",
  steam: "\uF1B7",
  telegram: "\uE217",
  vlc: "\u{F057C}"
};

// src/components/bar/modules/workspaces/helpers/utils.ts
var { monochrome, background } = options_default.theme.bar.buttons;
var { background: wsBackground, active } = options_default.theme.bar.buttons.workspaces;
var { showWsIcons, showAllActive, numbered_active_indicator: wsActiveIndicator } = options_default.bar.workspaces;
var isWorkspaceActiveOnMonitor = (monitor3, i) => {
  return showAllActive.get() && hyprlandService.get_monitor(monitor3)?.activeWorkspace?.id === i;
};
var getWsIcon = (wsIconMap, i) => {
  const iconEntry = wsIconMap[i];
  if (!iconEntry) {
    return `${i}`;
  }
  const hasIcon = typeof iconEntry === "object" && "icon" in iconEntry && iconEntry.icon !== "";
  if (typeof iconEntry === "string" && iconEntry !== "") {
    return iconEntry;
  }
  if (hasIcon) {
    return iconEntry.icon;
  }
  return `${i}`;
};
var getWsColor = (wsIconMap, i, smartHighlight2, monitor3) => {
  const iconEntry = wsIconMap[i];
  const hasColor = typeof iconEntry === "object" && "color" in iconEntry && isValidGjsColor(iconEntry.color);
  if (!iconEntry) {
    return "";
  }
  if (showWsIcons.get() && smartHighlight2 && wsActiveIndicator.get() === "highlight" && (hyprlandService.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i))) {
    const iconColor = monochrome.get() ? background.get() : wsBackground.get();
    const iconBackground = hasColor && isValidGjsColor(iconEntry.color) ? iconEntry.color : active.get();
    const colorCss = `color: ${iconColor};`;
    const backgroundCss = `background: ${iconBackground};`;
    return colorCss + backgroundCss;
  }
  if (hasColor && isValidGjsColor(iconEntry.color)) {
    return `color: ${iconEntry.color}; border-bottom-color: ${iconEntry.color};`;
  }
  return "";
};
var getAppIcon = (workspaceIndex, removeDuplicateIcons, { iconMap: userDefinedIconMap, defaultIcon, emptyIcon }) => {
  const iconMap = { ...userDefinedIconMap, ...defaultApplicationIcons };
  const clients = hyprlandService.get_clients().filter((client) => client?.workspace?.id === workspaceIndex).map((client) => [client.class, client.title]);
  if (!clients.length) {
    return emptyIcon;
  }
  let icons2 = clients.map(([clientClass, clientTitle]) => {
    const maybeIcon = Object.entries(iconMap).find(([matcher]) => {
      try {
        if (matcher.startsWith("class:")) {
          const re = matcher.substring(6);
          return new RegExp(re).test(clientClass);
        }
        if (matcher.startsWith("title:")) {
          const re = matcher.substring(6);
          return new RegExp(re).test(clientTitle);
        }
        return new RegExp(matcher, "i").test(clientClass);
      } catch {
        return false;
      }
    });
    if (!maybeIcon) {
      return void 0;
    }
    return maybeIcon.at(1);
  }).filter((x) => x);
  if (removeDuplicateIcons) {
    icons2 = [...new Set(icons2)];
  }
  if (icons2.length) {
    return icons2.join(" ");
  }
  return defaultIcon;
};
var renderClassnames = (showIcons, showNumbered, numberedActiveIndicator, showWsIcons4, smartHighlight2, monitor3, i) => {
  const isWorkspaceActive = hyprlandService.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i);
  const isActive3 = isWorkspaceActive ? "active" : "";
  if (showIcons) {
    return `workspace-icon txt-icon bar ${isActive3}`;
  }
  if (showNumbered || showWsIcons4) {
    const numActiveInd = isWorkspaceActive ? numberedActiveIndicator : "";
    const wsIconClass = showWsIcons4 ? "txt-icon" : "";
    const smartHighlightClass = smartHighlight2 ? "smart-highlight" : "";
    const className = `workspace-number can_${numberedActiveIndicator} ${numActiveInd} ${wsIconClass} ${smartHighlightClass} ${isActive3}`;
    return className.trim();
  }
  return `default ${isActive3}`;
};
var renderLabel = (showIcons, availableIndicator, activeIndicator, occupiedIndicator, showAppIcons, appIcons, workspaceMask2, showWorkspaceIcons, wsIconMap, i, index, monitor3) => {
  if (showAppIcons) {
    return appIcons;
  }
  if (showIcons) {
    if (hyprlandService.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i)) {
      return activeIndicator;
    }
    if ((hyprlandService.get_workspace(i)?.get_clients().length || 0) > 0) {
      return occupiedIndicator;
    }
    if (monitor3 !== -1) {
      return availableIndicator;
    }
  }
  if (showWorkspaceIcons) {
    return getWsIcon(wsIconMap, i);
  }
  return workspaceMask2 ? `${index + 1}` : `${i}`;
};

// src/components/bar/modules/workspaces/workspaces.tsx
var {
  workspaces: workspaces2,
  monitorSpecific,
  workspaceMask,
  spacing,
  ignored: ignored2,
  showAllActive: showAllActive2,
  show_icons,
  show_numbered,
  numbered_active_indicator,
  workspaceIconMap,
  showWsIcons: showWsIcons2,
  showApplicationIcons,
  applicationIconOncePerWorkspace,
  applicationIconMap,
  applicationIconEmptyWorkspace,
  applicationIconFallback
} = options_default.bar.workspaces;
var { available, active: active2, occupied } = options_default.bar.workspaces.icons;
var { matugen: matugen3 } = options_default.theme;
var { smartHighlight } = options_default.theme.bar.buttons.workspaces;
initWorkspaceEvents();
var WorkspaceModule = ({ monitor: monitor3 }) => {
  const boxChildren = Variable.derive(
    [
      bind(monitorSpecific),
      bind(hyprlandService, "workspaces"),
      bind(workspaceMask),
      bind(workspaces2),
      bind(show_icons),
      bind(available),
      bind(active2),
      bind(occupied),
      bind(show_numbered),
      bind(numbered_active_indicator),
      bind(spacing),
      bind(workspaceIconMap),
      bind(showWsIcons2),
      bind(showApplicationIcons),
      bind(applicationIconOncePerWorkspace),
      bind(applicationIconMap),
      bind(applicationIconEmptyWorkspace),
      bind(applicationIconFallback),
      bind(matugen3),
      bind(smartHighlight),
      bind(hyprlandService, "clients"),
      bind(hyprlandService, "monitors"),
      bind(ignored2),
      bind(showAllActive2),
      bind(hyprlandService, "focusedWorkspace"),
      bind(workspaceRules),
      bind(forceUpdater)
    ],
    (isMonitorSpecific, workspaceList, workspaceMaskFlag, totalWorkspaces, displayIcons, availableStatus, activeStatus, occupiedStatus, displayNumbered, numberedActiveIndicator, spacingValue, workspaceIconMapping, displayWorkspaceIcons, displayApplicationIcons, appIconOncePerWorkspace, applicationIconMapping, applicationIconEmptyWorkspace2, applicationIconFallback2, matugenEnabled, smartHighlightEnabled, clients, monitorList) => {
      const workspacesToRender = getWorkspacesToRender(
        totalWorkspaces,
        workspaceList,
        workspaceRules.get(),
        monitor3,
        isMonitorSpecific,
        monitorList
      );
      return workspacesToRender.map((wsId, index) => {
        const appIcons = displayApplicationIcons ? getAppIcon(wsId, appIconOncePerWorkspace, {
          iconMap: applicationIconMapping,
          defaultIcon: applicationIconFallback2,
          emptyIcon: applicationIconEmptyWorkspace2
        }) : "";
        return /* @__PURE__ */ jsx2(
          "button",
          {
            className: "workspace-button",
            onClick: (_, event) => {
              if (isPrimaryClick(event)) {
                hyprlandService.dispatch("workspace", wsId.toString());
              }
            },
            children: /* @__PURE__ */ jsx2(
              "label",
              {
                valign: Gtk4.Align.CENTER,
                css: `margin: 0rem ${0.375 * spacingValue}rem;${displayWorkspaceIcons && !matugenEnabled ? getWsColor(workspaceIconMapping, wsId, smartHighlightEnabled, monitor3) : ""}`,
                className: renderClassnames(
                  displayIcons,
                  displayNumbered,
                  numberedActiveIndicator,
                  displayWorkspaceIcons,
                  smartHighlightEnabled,
                  monitor3,
                  wsId
                ),
                label: renderLabel(
                  displayIcons,
                  availableStatus,
                  activeStatus,
                  occupiedStatus,
                  displayApplicationIcons,
                  appIcons,
                  workspaceMaskFlag,
                  displayWorkspaceIcons,
                  workspaceIconMapping,
                  wsId,
                  index,
                  monitor3
                ),
                setup: (self) => {
                  const currentWsClients = clients.filter((client) => client.workspace.id === wsId);
                  self.toggleClassName("occupied", currentWsClients.length > 0);
                }
              }
            )
          }
        );
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        boxChildren.drop();
      },
      children: boxChildren()
    }
  );
};

// src/components/bar/modules/workspaces/index.tsx
var { scroll_speed } = options_default.bar.workspaces;
var Workspaces = (monitor3 = -1) => {
  const component = /* @__PURE__ */ jsx2("box", { className: "workspaces-box-container", children: /* @__PURE__ */ jsx2(WorkspaceModule, { monitor: monitor3 }) });
  return {
    component,
    isVisible: true,
    boxClass: "workspaces",
    isBox: true,
    props: {
      setup: (self) => {
        let scrollHandlers;
        Variable.derive([bind(scroll_speed)], (scroll_speed2) => {
          if (scrollHandlers) {
            self.disconnect(scrollHandlers);
          }
          const { throttledScrollUp, throttledScrollDown } = initThrottledScrollHandlers(scroll_speed2);
          scrollHandlers = self.connect("scroll-event", (_, event) => {
            if (isScrollUp(event)) {
              throttledScrollUp();
            }
            if (isScrollDown(event)) {
              throttledScrollDown();
            }
          });
        });
      }
    }
  };
};

// src/components/bar/modules/window_title/helpers/title.ts
var getWindowMatch = (client) => {
  const windowTitleMap = [
    // user provided values
    ...options_default.bar.windowtitle.title_map.get(),
    // Original Entries
    ["kitty", "\u{F011B}", "Kitty Terminal"],
    ["firefox", "\u{F0239}", "Firefox"],
    ["microsoft-edge", "\u{F01E9}", "Edge"],
    ["discord", "\uF1FF", "Discord"],
    ["vesktop", "\uF1FF", "Vesktop"],
    ["org.kde.dolphin", "\uF07C", "Dolphin"],
    ["plex", "\u{F06BA}", "Plex"],
    ["steam", "\uF1B6", "Steam"],
    ["spotify", "\u{F04C7}", "Spotify"],
    ["ristretto", "\u{F02E9}", "Ristretto"],
    ["obsidian", "\u{F14E7}", "Obsidian"],
    // Browsers
    ["google-chrome", "\uF268", "Google Chrome"],
    ["brave-browser", "\u{F059F}", "Brave Browser"],
    ["chromium", "\uF268", "Chromium"],
    ["opera", "\uF26A", "Opera"],
    ["vivaldi", "\u{F059F}", "Vivaldi"],
    ["waterfox", "\u{F059F}", "Waterfox"],
    ["thorium", "\u{F059F}", "Thorium"],
    ["tor-browser", "\uF371", "Tor Browser"],
    ["floorp", "\u{F0239}", "Floorp"],
    // Terminals
    ["gnome-terminal", "\uE795", "GNOME Terminal"],
    ["konsole", "\uE795", "Konsole"],
    ["alacritty", "\uE795", "Alacritty"],
    ["wezterm", "\uE795", "Wezterm"],
    ["foot", "\u{F0F52}", "Foot Terminal"],
    ["tilix", "\uE795", "Tilix"],
    ["xterm", "\uE795", "XTerm"],
    ["urxvt", "\uE795", "URxvt"],
    ["com.mitchellh.ghostty", "\u{F02A0}", "Ghostty"],
    ["st", "\uE795", "st Terminal"],
    // Development Tools
    ["code", "\u{F0A1E}", "Visual Studio Code"],
    ["vscode", "\u{F0A1E}", "VS Code"],
    ["sublime-text", "\uE7AA", "Sublime Text"],
    ["atom", "\uE764", "Atom"],
    ["android-studio", "\u{F0034}", "Android Studio"],
    ["intellij-idea", "\uE7B5", "IntelliJ IDEA"],
    ["pycharm", "\u{F10D6}", "PyCharm"],
    ["webstorm", "\u{F10D6}", "WebStorm"],
    ["phpstorm", "\u{F10D6}", "PhpStorm"],
    ["eclipse", "\uE79E", "Eclipse"],
    ["netbeans", "\uE79B", "NetBeans"],
    ["docker", "\uF21F", "Docker"],
    ["vim", "\uE7C5", "Vim"],
    ["neovim", "\uF36F", "Neovim"],
    ["neovide", "\uF36F", "Neovide"],
    ["emacs", "\uE632", "Emacs"],
    // Communication Tools
    ["slack", "\u{F04B1}", "Slack"],
    ["telegram-desktop", "\uF2C6", "Telegram"],
    ["org.telegram.desktop", "\uE217", "Telegram"],
    ["whatsapp", "\u{F05A3}", "WhatsApp"],
    ["teams", "\u{F02BB}", "Microsoft Teams"],
    ["skype", "\u{F04AF}", "Skype"],
    ["thunderbird", "\uF370", "Thunderbird"],
    // File Managers
    ["nautilus", "\u{F0770}", "Files (Nautilus)"],
    ["thunar", "\u{F0770}", "Thunar"],
    ["pcmanfm", "\u{F0770}", "PCManFM"],
    ["nemo", "\u{F0770}", "Nemo"],
    ["ranger", "\u{F0770}", "Ranger"],
    ["doublecmd", "\u{F0770}", "Double Commander"],
    ["krusader", "\u{F0770}", "Krusader"],
    // Media Players
    ["vlc", "\u{F057C}", "VLC Media Player"],
    ["mpv", "\uF36E", "MPV"],
    ["rhythmbox", "\u{F04C3}", "Rhythmbox"],
    // Graphics Tools
    ["gimp", "\uF338", "GIMP"],
    ["inkscape", "\uF33B", "Inkscape"],
    ["krita", "\uF33D", "Krita"],
    ["blender", "\u{F00AB}", "Blender"],
    // Video Editing
    ["kdenlive", "\uF33C", "Kdenlive"],
    // Games and Gaming Platforms
    ["lutris", "\u{F0EB5}", "Lutris"],
    ["heroic", "\u{F0EB5}", "Heroic Games Launcher"],
    ["minecraft", "\u{F0373}", "Minecraft"],
    ["csgo", "\u{F0EB5}", "CS:GO"],
    ["dota2", "\u{F0EB5}", "Dota 2"],
    // Office and Productivity
    ["evernote", "\uEF98", "Evernote"],
    ["sioyek", "\uE28A", "Sioyek"],
    // Cloud Services and Sync
    ["dropbox", "\u{F01E3}", "Dropbox"],
    // Desktop
    ["^$", "\u{F01C4}", "Desktop"],
    // Fallback icon
    ["(.+)", "\u{F08C6}", `${capitalizeFirstLetter(client?.class ?? "Unknown")}`]
  ];
  if (!client?.class) {
    return {
      icon: "\u{F01C4}",
      label: "Desktop"
    };
  }
  const foundMatch = windowTitleMap.find((wt) => RegExp(wt[0]).test(client?.class.toLowerCase()));
  if (!foundMatch || foundMatch.length !== 3) {
    return {
      icon: windowTitleMap[windowTitleMap.length - 1][1],
      label: windowTitleMap[windowTitleMap.length - 1][2]
    };
  }
  return {
    icon: foundMatch[1],
    label: foundMatch[2]
  };
};
var getTitle = (client, useCustomTitle, useClassName) => {
  if (client === null || useCustomTitle) return getWindowMatch(client).label;
  const title = client.title;
  if (!title || useClassName) return client.class;
  if (title.length === 0 || title.match(/^ *$/)) {
    return client.class;
  }
  return title;
};
var truncateTitle = (title, max_size) => {
  if (max_size > 0 && title.length > max_size) {
    return title.substring(0, max_size).trim() + "...";
  }
  return title;
};

// src/components/bar/modules/window_title/index.tsx
var { leftClick, rightClick: rightClick2, middleClick: middleClick2, scrollDown: scrollDown2, scrollUp: scrollUp2 } = options_default.bar.windowtitle;
var ClientTitle = () => {
  const { custom_title, class_name, label: label15, icon: icon13, truncation: truncation3, truncation_size: truncation_size3 } = options_default.bar.windowtitle;
  const ClientIcon = ({ client }) => {
    return /* @__PURE__ */ jsx2("label", { className: "bar-button-icon windowtitle txt-icon bar", label: getWindowMatch(client).icon });
  };
  const ClientLabel = ({
    client,
    useCustomTitle,
    useClassName,
    showIcon: showIcon3,
    truncate,
    truncationSize
  }) => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: `bar-button-label windowtitle ${showIcon3 ? "" : "no-icon"}`,
        label: truncateTitle(getTitle(client, useCustomTitle, useClassName), truncate ? truncationSize : -1)
      }
    );
  };
  const componentClassName = Variable.derive(
    [bind(options_default.theme.bar.buttons.style), bind(label15)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `windowtitle-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [
      bind(hyprlandService, "focusedClient"),
      bind(custom_title),
      bind(class_name),
      bind(label15),
      bind(icon13),
      bind(truncation3),
      bind(truncation_size3)
    ],
    (client, useCustomTitle, useClassName, showLabel2, showIcon3, truncate, truncationSize) => {
      const children = [];
      if (showIcon3) {
        children.push(/* @__PURE__ */ jsx2(ClientIcon, { client }));
      }
      if (showLabel2) {
        children.push(
          /* @__PURE__ */ jsx2(
            ClientLabel,
            {
              client,
              useCustomTitle,
              useClassName,
              truncate,
              truncationSize,
              showIcon: showIcon3
            }
          )
        );
      }
      return children;
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { className: componentClassName(), children: componentChildren() });
  return {
    component,
    isVisible: true,
    boxClass: "windowtitle",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick2),
            bind(middleClick2),
            bind(scrollUp2),
            bind(scrollDown2),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                runAsyncCommand(leftClick.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick2.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick2.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp2.get(), scrollDown2.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/media/helpers/index.ts
var getIconForPlayer = (playerName) => {
  const windowTitleMap = [
    ["Firefox", "\u{F0239}"],
    ["Microsoft Edge", "\u{F01E9}"],
    ["Discord", "\uF1FF"],
    ["Plex", "\u{F06BA}"],
    ["Spotify", "\u{F04C7}"],
    ["Vlc", "\u{F057C}"],
    ["Mpv", "\uF36E"],
    ["Rhythmbox", "\u{F04C3}"],
    ["Google Chrome", "\uF268"],
    ["Brave Browser", "\u{F059F}"],
    ["Chromium", "\uF268"],
    ["Opera", "\uF26A"],
    ["Vivaldi", "\u{F059F}"],
    ["Waterfox", "\u{F0239}"],
    ["Thorium", "\u{F0239}"],
    ["Zen Browser", "\u{F0239}"],
    ["Floorp", "\u{F0239}"],
    ["(.*)", "\u{F075A}"]
  ];
  const foundMatch = windowTitleMap.find((wt) => RegExp(wt[0], "i").test(playerName));
  return foundMatch ? foundMatch[1] : "\u{F075A}";
};
var isValidMediaTag = (tag) => {
  if (typeof tag !== "string") {
    return false;
  }
  const mediaTagKeys = ["title", "artists", "artist", "album", "name", "identity"];
  return mediaTagKeys.includes(tag);
};
var generateMediaLabel = (truncation_size3, show_label3, format3, songIcon, activePlayer2) => {
  const currentPlayer = activePlayer2.get();
  if (!currentPlayer || !show_label3.get()) {
    songIcon.set(getIconForPlayer(activePlayer2.get()?.identity || ""));
    return `Media`;
  }
  const { title, identity, artist, album, busName } = currentPlayer;
  songIcon.set(getIconForPlayer(identity));
  const mediaTags = {
    title,
    artists: artist,
    artist,
    album,
    name: busName,
    identity
  };
  const mediaFormat = format3.get();
  const truncatedLabel = mediaFormat.replace(
    /{(title|artists|artist|album|name|identity)(:[^}]*)?}/g,
    (_, p1, p2) => {
      if (!isValidMediaTag(p1)) {
        return "";
      }
      const value = p1 !== void 0 ? mediaTags[p1] : "";
      const suffix = p2?.length ? p2.slice(1) : "";
      return value ? value + suffix : "";
    }
  );
  const maxLabelSize = truncation_size3.get();
  let mediaLabel = truncatedLabel;
  if (maxLabelSize > 0 && truncatedLabel.length > maxLabelSize) {
    mediaLabel = `${truncatedLabel.substring(0, maxLabelSize)}...`;
  }
  return mediaLabel.length ? mediaLabel : "Media";
};

// src/globals/media.ts
import AstalMpris2 from "gi://AstalMpris?version=0.1";

// src/components/menus/media/components/timebar/helpers.ts
var getTimeStamp = (position2, totalLength) => {
  if (typeof position2 === "number" && position2 >= 0) {
    return `${getFormattedTime(position2)} / ${getFormattedTime(totalLength)}`;
  } else {
    return `00:00`;
  }
};
var getFormattedTime = (time2) => {
  const curHour = Math.floor(time2 / 3600);
  const curMin = Math.floor(time2 % 3600 / 60);
  const curSec = Math.floor(time2 % 60);
  const formatTime = (time3) => {
    return time3.toString().padStart(2, "0");
  };
  const formatHour = (hour) => {
    return hour > 0 ? formatTime(hour) + ":" : "";
  };
  return `${formatHour(curHour)}${formatTime(curMin)}:${formatTime(curSec)}`;
};

// src/globals/media.ts
var { noMediaText } = options_default.menus.media;
var activePlayer = Variable(void 0);
var forceUpdate = Variable(false);
mprisService.connect("player-closed", (_, closedPlayer) => {
  if (mprisService.get_players().length === 1 && closedPlayer.busName === mprisService.get_players()[0]?.busName) {
    return activePlayer.set(void 0);
  }
  if (closedPlayer.busName === activePlayer.get()?.busName) {
    const nextPlayer = mprisService.get_players().find((player) => player.busName !== closedPlayer.busName);
    activePlayer.set(nextPlayer);
  }
});
mprisService.connect("player-added", (_, addedPlayer) => {
  if (activePlayer.get() === void 0) {
    activePlayer.set(addedPlayer);
  }
});
var timeStamp = Variable("00:00");
var currentPosition = Variable(0);
var loopStatus = Variable(AstalMpris2.Loop.NONE);
var shuffleStatus = Variable(AstalMpris2.Shuffle.OFF);
var canPlay = Variable(false);
var playbackStatus = Variable(AstalMpris2.PlaybackStatus.STOPPED);
var canGoNext = Variable(false);
var canGoPrevious = Variable(false);
var mediaTitle = Variable(noMediaText.get());
var mediaAlbum = Variable("-----");
var mediaArtist = Variable("-----");
var mediaArtUrl = Variable("");
var positionUnsub;
var loopUnsub;
var shuffleUnsub;
var canPlayUnsub;
var playbackStatusUnsub;
var canGoNextUnsub;
var canGoPreviousUnsub;
var titleUnsub;
var albumUnsub;
var artistUnsub;
var artUrlUnsub;
var updatePosition = (player) => {
  positionUnsub?.drop();
  positionUnsub = void 0;
  if (player === void 0) {
    timeStamp.set("00:00");
    currentPosition.set(0);
    return;
  }
  const loopBinding = bind(player, "position");
  positionUnsub = Variable.derive([bind(loopBinding), bind(player, "playbackStatus")], (pos) => {
    if (player?.length > 0) {
      timeStamp.set(getTimeStamp(pos, player.length));
      currentPosition.set(pos);
    } else {
      timeStamp.set("00:00");
      currentPosition.set(0);
    }
  });
  const initialPos = loopBinding.get();
  timeStamp.set(getTimeStamp(initialPos, player.length));
  currentPosition.set(initialPos);
};
var updateLoop = (player) => {
  loopUnsub?.drop();
  loopUnsub = void 0;
  if (player === void 0) {
    loopStatus.set(AstalMpris2.Loop.NONE);
    return;
  }
  const loopBinding = bind(player, "loopStatus");
  loopUnsub = Variable.derive([bind(loopBinding), bind(player, "playbackStatus")], (status) => {
    if (player?.length > 0) {
      loopStatus.set(status);
    } else {
      currentPosition.set(AstalMpris2.Loop.NONE);
    }
  });
  const initialStatus = loopBinding.get();
  loopStatus.set(initialStatus);
};
var updateShuffle = (player) => {
  shuffleUnsub?.drop();
  shuffleUnsub = void 0;
  if (player === void 0) {
    shuffleStatus.set(AstalMpris2.Shuffle.OFF);
    return;
  }
  const shuffleBinding = bind(player, "shuffleStatus");
  shuffleUnsub = Variable.derive([bind(shuffleBinding), bind(player, "playbackStatus")], (status) => {
    shuffleStatus.set(status ?? AstalMpris2.Shuffle.OFF);
  });
  const initialStatus = shuffleBinding.get();
  shuffleStatus.set(initialStatus);
};
var updateCanPlay = (player) => {
  canPlayUnsub?.drop();
  canPlayUnsub = void 0;
  if (player === void 0) {
    canPlay.set(false);
    return;
  }
  const canPlayBinding = bind(player, "canPlay");
  canPlayUnsub = Variable.derive([canPlayBinding, bind(player, "playbackStatus")], (playable) => {
    canPlay.set(playable ?? false);
  });
  const initialCanPlay = canPlay.get();
  canPlay.set(initialCanPlay);
};
var updatePlaybackStatus = (player) => {
  playbackStatusUnsub?.drop();
  playbackStatusUnsub = void 0;
  if (player === void 0) {
    playbackStatus.set(AstalMpris2.PlaybackStatus.STOPPED);
    return;
  }
  const playbackStatusBinding = bind(player, "playbackStatus");
  playbackStatusUnsub = Variable.derive([playbackStatusBinding], (status) => {
    playbackStatus.set(status ?? AstalMpris2.PlaybackStatus.STOPPED);
  });
  const initialStatus = playbackStatus.get();
  playbackStatus.set(initialStatus);
};
var updateCanGoNext = (player) => {
  canGoNextUnsub?.drop();
  canGoNextUnsub = void 0;
  if (player === void 0) {
    canGoNext.set(false);
    return;
  }
  const canGoNextBinding = bind(player, "canGoNext");
  canGoNextUnsub = Variable.derive([canGoNextBinding, bind(player, "playbackStatus")], (canNext) => {
    canGoNext.set(canNext ?? false);
  });
  const initialCanNext = canGoNext.get();
  canGoNext.set(initialCanNext);
};
var updateCanGoPrevious = (player) => {
  canGoPreviousUnsub?.drop();
  canGoPreviousUnsub = void 0;
  if (player === void 0) {
    canGoPrevious.set(false);
    return;
  }
  const canGoPreviousBinding = bind(player, "canGoPrevious");
  canGoPreviousUnsub = Variable.derive([canGoPreviousBinding, bind(player, "playbackStatus")], (canPrev) => {
    canGoPrevious.set(canPrev ?? false);
  });
  const initialCanPrev = canGoPrevious.get();
  canGoPrevious.set(initialCanPrev);
};
var updateTitle = (player) => {
  titleUnsub?.drop();
  titleUnsub = void 0;
  if (player === void 0) {
    mediaTitle.set(noMediaText.get());
    return;
  }
  const titleBinding = bind(player, "title");
  titleUnsub = Variable.derive([titleBinding, bind(player, "playbackStatus")], (newTitle, pbStatus) => {
    if (pbStatus === AstalMpris2.PlaybackStatus.STOPPED) {
      return mediaTitle.set(noMediaText.get() ?? "-----");
    }
    mediaTitle.set(newTitle.length > 0 ? newTitle : "-----");
  });
  const initialTitle = mediaTitle.get();
  mediaTitle.set(initialTitle.length > 0 ? initialTitle : "-----");
};
var updateAlbum = (player) => {
  albumUnsub?.drop();
  albumUnsub = void 0;
  if (player === void 0) {
    mediaAlbum.set("-----");
    return;
  }
  albumUnsub = Variable.derive([bind(player, "album"), bind(player, "playbackStatus")], (newAlbum) => {
    mediaAlbum.set(newAlbum?.length > 0 ? newAlbum : "-----");
  });
  const initialAlbum = mediaAlbum.get();
  mediaAlbum.set(initialAlbum.length > 0 ? initialAlbum : "-----");
};
var updateArtist = (player) => {
  artistUnsub?.drop();
  artistUnsub = void 0;
  if (player === void 0) {
    mediaArtist.set("-----");
    return;
  }
  const artistBinding = bind(player, "artist");
  artistUnsub = Variable.derive([artistBinding, bind(player, "playbackStatus")], (newArtist) => {
    mediaArtist.set(newArtist?.length > 0 ? newArtist : "-----");
  });
  const initialArtist = mediaArtist.get();
  mediaArtist.set(initialArtist?.length > 0 ? initialArtist : "-----");
};
var updateArtUrl = (player) => {
  artUrlUnsub?.drop();
  artUrlUnsub = void 0;
  if (player === void 0) {
    mediaArtUrl.set("");
    return;
  }
  const artUrlBinding = bind(player, "artUrl");
  artUrlUnsub = Variable.derive([artUrlBinding, bind(player, "playbackStatus")], (newArtUrl) => {
    mediaArtUrl.set(newArtUrl ?? "");
  });
  const initialArtUrl = mediaArtUrl.get();
  mediaArtUrl.set(initialArtUrl);
};
Variable.derive([bind(activePlayer), bind(forceUpdate)], (player) => {
  updatePosition(player);
  updateLoop(player);
  updateShuffle(player);
  updateCanPlay(player);
  updatePlaybackStatus(player);
  updateCanGoNext(player);
  updateCanGoPrevious(player);
  updateTitle(player);
  updateAlbum(player);
  updateArtist(player);
  updateArtUrl(player);
});

// src/components/bar/modules/media/index.tsx
var {
  truncation,
  truncation_size,
  show_label,
  show_active_only,
  rightClick: rightClick3,
  middleClick: middleClick3,
  scrollUp: scrollUp3,
  scrollDown: scrollDown3,
  format
} = options_default.bar.media;
var isVis = Variable(!show_active_only.get());
Variable.derive([bind(show_active_only), bind(mprisService, "players")], (showActive, players) => {
  isVis.set(!showActive || players?.length > 0);
});
var Media = () => {
  activePlayer.set(mprisService.get_players()[0]);
  const songIcon = Variable("");
  const mediaLabel = Variable.derive(
    [
      bind(activePlayer),
      bind(truncation),
      bind(truncation_size),
      bind(show_label),
      bind(format),
      bind(mediaTitle),
      bind(mediaAlbum),
      bind(mediaArtist)
    ],
    () => {
      return generateMediaLabel(truncation_size, show_label, format, songIcon, activePlayer);
    }
  );
  const componentClassName = Variable.derive([options_default.theme.bar.buttons.style, show_label], (style3) => {
    const styleMap2 = {
      default: "style1",
      split: "style2",
      wave: "style3",
      wave2: "style3"
    };
    return `media-container ${styleMap2[style3]}`;
  });
  const component = /* @__PURE__ */ jsxs(
    "box",
    {
      className: componentClassName(),
      onDestroy: () => {
        songIcon.drop();
        mediaLabel.drop();
        componentClassName.drop();
      },
      children: [
        /* @__PURE__ */ jsx2("label", { className: "bar-button-icon media txt-icon bar", label: bind(songIcon).as((icn) => icn || "\u{F075A}") }),
        /* @__PURE__ */ jsx2("label", { className: "bar-button-label media", label: mediaLabel() })
      ]
    }
  );
  return {
    component,
    isVis,
    boxClass: "media",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick3),
            bind(middleClick3),
            bind(scrollUp3),
            bind(scrollDown3),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "mediamenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick3.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick3.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp3.get(), scrollDown3.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/notifications/index.tsx
import AstalNotifd2 from "gi://AstalNotifd?version=0.1";

// src/lib/shared/notifications.ts
var normalizeName = (name2) => name2.toLowerCase().replace(/\s+/g, "_");
var isNotificationIgnored = (notification, filter2) => {
  const notificationFilters = new Set(filter2.map(normalizeName));
  const normalizedAppName = normalizeName(notification.app_name);
  return notificationFilters.has(normalizedAppName);
};
var filterNotifications = (notifications, filter2) => {
  const filteredNotifications = notifications.filter((notif) => {
    return !isNotificationIgnored(notif, filter2);
  });
  return filteredNotifications;
};

// src/components/bar/modules/notifications/index.tsx
var { show_total, rightClick: rightClick4, middleClick: middleClick4, scrollUp: scrollUp4, scrollDown: scrollDown4, hideCountWhenZero } = options_default.bar.notifications;
var { ignore } = options_default.notifications;
var notifs = AstalNotifd2.get_default();
var Notifications = () => {
  const componentClassName = Variable.derive(
    [bind(options_default.theme.bar.buttons.style), bind(show_total)],
    (style3, showTotal) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `notifications-container ${styleMap2[style3]} ${!showTotal ? "no-label" : ""}`;
    }
  );
  const boxChildren = Variable.derive(
    [
      bind(notifs, "notifications"),
      bind(notifs, "dontDisturb"),
      bind(show_total),
      bind(ignore),
      bind(hideCountWhenZero)
    ],
    (notif, dnd, showTotal, ignoredNotifs, hideCountForZero) => {
      const filteredNotifications = filterNotifications(notif, ignoredNotifs);
      const NotifIcon = () => /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.CENTER,
          className: "bar-button-icon notifications txt-icon bar",
          label: dnd ? "\u{F009B}" : filteredNotifications.length > 0 ? "\u{F116B}" : "\u{F009A}"
        }
      );
      const NotifLabel = () => /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.CENTER,
          className: "bar-button-label notifications",
          label: filteredNotifications.length.toString()
        }
      );
      if (showTotal) {
        if (hideCountForZero && filteredNotifications.length === 0) {
          return /* @__PURE__ */ jsx2(NotifIcon, {});
        }
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(NotifIcon, {}),
          /* @__PURE__ */ jsx2(NotifLabel, {})
        ] });
      }
      return /* @__PURE__ */ jsx2(NotifIcon, {});
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, className: componentClassName(), children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, className: "bar-notifications", children: boxChildren() }) });
  return {
    component,
    isVisible: true,
    boxClass: "notifications",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick4),
            bind(middleClick4),
            bind(scrollUp4),
            bind(scrollDown4),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "notificationsmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick4.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick4.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp4.get(), scrollDown4.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/volume/helpers/index.ts
var icons = {
  101: "\u{F057E}",
  66: "\u{F057E}",
  34: "\u{F0580}",
  1: "\u{F057F}",
  0: "\u{F075F}"
};
var getIcon = (isMuted, vol) => {
  if (isMuted) return icons[0];
  const foundVol = [101, 66, 34, 1, 0].find((threshold) => threshold <= vol * 100);
  if (foundVol !== void 0) {
    return icons[foundVol];
  }
  return icons[101];
};

// src/components/bar/modules/volume/index.tsx
var { rightClick: rightClick5, middleClick: middleClick5, scrollUp: scrollUp5, scrollDown: scrollDown5 } = options_default.bar.volume;
var Volume = () => {
  const VolumeIcon = ({ isMuted, volume }) => {
    return /* @__PURE__ */ jsx2("label", { className: "bar-button-icon volume txt-icon bar", label: getIcon(isMuted, volume) });
  };
  const VolumeLabel = ({ volume }) => {
    return /* @__PURE__ */ jsx2("label", { className: "bar-button-label volume", label: `${Math.round(volume * 100)}%` });
  };
  const componentTooltip = Variable.derive(
    [
      bind(audioService.defaultSpeaker, "description"),
      bind(audioService.defaultSpeaker, "volume"),
      bind(audioService.defaultSpeaker, "mute")
    ],
    (desc, vol, isMuted) => {
      return `${getIcon(isMuted, vol)} ${desc}`;
    }
  );
  const componentClassName = Variable.derive(
    [options_default.theme.bar.buttons.style, options_default.bar.volume.label],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `volume-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [
      bind(options_default.bar.volume.label),
      bind(audioService.defaultSpeaker, "volume"),
      bind(audioService.defaultSpeaker, "mute")
    ],
    (showLabel2, vol, isMuted) => {
      if (showLabel2) {
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(VolumeIcon, { isMuted, volume: vol }),
          /* @__PURE__ */ jsx2(VolumeLabel, { volume: vol })
        ] });
      }
      return /* @__PURE__ */ jsx2(VolumeIcon, { isMuted, volume: vol });
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      vexpand: true,
      tooltipText: componentTooltip(),
      className: componentClassName(),
      onDestroy: () => {
        componentTooltip.drop();
        componentClassName.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "volume",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick5),
            bind(middleClick5),
            bind(scrollUp5),
            bind(scrollDown5),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "audiomenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick5.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick5.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp5.get(), scrollDown5.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/network/index.tsx
import AstalNetwork2 from "gi://AstalNetwork?version=0.1";

// src/components/bar/modules/network/helpers.ts
var wiredIcon = Variable("");
var wirelessIcon = Variable("");
var wiredIconBinding;
var wirelessIconBinding;
var handleWiredIcon = () => {
  wiredIconBinding?.drop();
  wiredIconBinding = void 0;
  if (!networkService.wired) {
    return;
  }
  wiredIconBinding = Variable.derive([bind(networkService.wired, "iconName")], (icon13) => {
    wiredIcon.set(icon13);
  });
};
var handleWirelessIcon = () => {
  wirelessIconBinding?.drop();
  wirelessIconBinding = void 0;
  if (!networkService.wifi) {
    return;
  }
  wirelessIconBinding = Variable.derive([bind(networkService.wifi, "iconName")], (icon13) => {
    wirelessIcon.set(icon13);
  });
};
var formatFrequency = (frequency) => {
  return `${(frequency / 1e3).toFixed(2)}MHz`;
};
var formatWifiInfo = (wifi) => {
  const netSsid = wifi?.ssid ? wifi.ssid : "None";
  const wifiStrength = wifi?.strength ? wifi.strength : "--";
  const wifiFreq = wifi?.frequency ? formatFrequency(wifi.frequency) : "--";
  return `Network: ${netSsid} 
Signal Strength: ${wifiStrength}% 
Frequency: ${wifiFreq}`;
};
Variable.derive([bind(networkService, "wifi")], () => {
  handleWiredIcon();
  handleWirelessIcon();
});

// src/components/bar/modules/network/index.tsx
var { label: label2, truncation: truncation2, truncation_size: truncation_size2, rightClick: rightClick6, middleClick: middleClick6, scrollDown: scrollDown6, scrollUp: scrollUp6, showWifiInfo } = options_default.bar.network;
var Network = () => {
  const iconBinding = Variable.derive(
    [bind(networkService, "primary"), bind(wiredIcon), bind(wirelessIcon)],
    (primaryNetwork, wiredIcon3, wifiIcon) => {
      const isWired = primaryNetwork === AstalNetwork2.Primary.WIRED;
      const iconName = isWired ? wiredIcon3 : wifiIcon;
      return iconName;
    }
  );
  const NetworkIcon = () => /* @__PURE__ */ jsx2("icon", { className: "bar-button-icon network-icon", icon: iconBinding() });
  const networkLabel = Variable.derive(
    [
      bind(networkService, "primary"),
      bind(networkService, "wifi"),
      bind(label2),
      bind(truncation2),
      bind(truncation_size2),
      bind(showWifiInfo)
    ],
    (primaryNetwork, networkWifi, showLabel2, trunc, tSize, showWifiInfo2) => {
      if (!showLabel2) {
        return /* @__PURE__ */ jsx2("box", {});
      }
      if (primaryNetwork === AstalNetwork2.Primary.WIRED) {
        return /* @__PURE__ */ jsx2("label", { className: "bar-button-label network-label", label: "Wired".substring(0, tSize) });
      }
      return /* @__PURE__ */ jsx2(
        "label",
        {
          className: "bar-button-label network-label",
          label: networkWifi?.ssid ? `${trunc ? networkWifi.ssid.substring(0, tSize) : networkWifi.ssid}` : "--",
          tooltipText: showWifiInfo2 ? formatWifiInfo(networkWifi) : ""
        }
      );
    }
  );
  const componentClassName = Variable.derive(
    [bind(options_default.theme.bar.buttons.style), bind(options_default.bar.network.label)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `network-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const component = /* @__PURE__ */ jsxs(
    "box",
    {
      vexpand: true,
      valign: Gtk4.Align.FILL,
      className: componentClassName(),
      onDestroy: () => {
        iconBinding.drop();
        networkLabel.drop();
        componentClassName.drop();
      },
      children: [
        /* @__PURE__ */ jsx2(NetworkIcon, {}),
        networkLabel()
      ]
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "network",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick6),
            bind(middleClick6),
            bind(scrollUp6),
            bind(scrollDown6),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "networkmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick6.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick6.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp6.get(), scrollDown6.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/bluetooth/index.tsx
var { rightClick: rightClick7, middleClick: middleClick7, scrollDown: scrollDown7, scrollUp: scrollUp7 } = options_default.bar.bluetooth;
var Bluetooth = () => {
  const BluetoothIcon = ({ isPowered: isPowered2 }) => /* @__PURE__ */ jsx2("label", { className: "bar-button-icon bluetooth txt-icon bar", label: isPowered2 ? "\u{F00AF}" : "\u{F00B2}" });
  const BluetoothLabel = ({ isPowered: isPowered2, devices }) => {
    const connectDevices = devices.filter((device) => device.connected);
    const label15 = isPowered2 && connectDevices.length ? ` Connected (${connectDevices.length})` : isPowered2 ? "On" : "Off";
    return /* @__PURE__ */ jsx2("label", { label: label15, className: "bar-button-label bluetooth" });
  };
  const componentClassName = Variable.derive(
    [options_default.theme.bar.buttons.style, options_default.bar.bluetooth.label],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `bluetooth-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentBinding = Variable.derive(
    [
      bind(options_default.bar.bluetooth.label),
      bind(bluetoothService, "isPowered"),
      bind(bluetoothService, "devices"),
      bind(bluetoothService, "isConnected")
    ],
    (showLabel2, isPowered2, devices) => {
      if (showLabel2) {
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(BluetoothIcon, { isPowered: isPowered2 }),
          /* @__PURE__ */ jsx2(BluetoothLabel, { isPowered: isPowered2, devices })
        ] });
      }
      return /* @__PURE__ */ jsx2(BluetoothIcon, { isPowered: isPowered2 });
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { className: componentClassName(), children: componentBinding() });
  return {
    component,
    isVisible: true,
    boxClass: "bluetooth",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick7),
            bind(middleClick7),
            bind(scrollUp7),
            bind(scrollDown7),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "bluetoothmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick7.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick7.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp7.get(), scrollDown7.get()));
          }
        );
      },
      onDestroy: () => {
        componentClassName.drop();
        componentBinding.drop();
      }
    }
  };
};

// src/components/bar/modules/battery/index.tsx
import AstalBattery2 from "gi://AstalBattery?version=0.1";

// src/components/bar/modules/battery/helpers/index.ts
var batteryIcons = {
  0: "\u{F008E}",
  10: "\u{F007A}",
  20: "\u{F007B}",
  30: "\u{F007C}",
  40: "\u{F007D}",
  50: "\u{F007E}",
  60: "\u{F007F}",
  70: "\u{F0080}",
  80: "\u{F0081}",
  90: "\u{F0082}",
  100: "\u{F0079}"
};
var batteryIconsCharging = {
  0: "\u{F089F}",
  10: "\u{F089C}",
  20: "\u{F0086}",
  30: "\u{F0087}",
  40: "\u{F0088}",
  50: "\u{F089D}",
  60: "\u{F0089}",
  70: "\u{F089E}",
  80: "\u{F008A}",
  90: "\u{F008B}",
  100: "\u{F0085}"
};
var getBatteryIcon = (percentage, charging, isCharged) => {
  if (isCharged) {
    return "\u{F17E2}";
  }
  const percentages = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0];
  const foundPercentage = percentages.find((threshold) => threshold <= percentage) ?? 100;
  return charging ? batteryIconsCharging[foundPercentage] : batteryIcons[foundPercentage];
};

// src/components/bar/modules/battery/index.tsx
var { label: show_label2, rightClick: rightClick8, middleClick: middleClick8, scrollUp: scrollUp8, scrollDown: scrollDown8, hideLabelWhenFull } = options_default.bar.battery;
var BatteryLabel = () => {
  const batIcon = variable_default.derive(
    [bind(batteryService, "percentage"), bind(batteryService, "charging"), bind(batteryService, "state")],
    (batPercent, batCharging, state) => {
      const batCharged = state === AstalBattery2.State.FULLY_CHARGED;
      return getBatteryIcon(Math.floor(batPercent * 100), batCharging, batCharged);
    }
  );
  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    return { hours, minutes };
  };
  const generateTooltip = (timeSeconds, isCharging, isCharged) => {
    if (isCharged === true) {
      return "Full";
    }
    const { hours, minutes } = formatTime(timeSeconds);
    if (isCharging) {
      return `Time to full: ${hours} h ${minutes} min`;
    } else {
      return `Time to empty: ${hours} h ${minutes} min`;
    }
  };
  const componentClassName = variable_default.derive(
    [bind(options_default.theme.bar.buttons.style), bind(show_label2)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `battery-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentTooltip = variable_default.derive(
    [bind(batteryService, "charging"), bind(batteryService, "timeToFull"), bind(batteryService, "timeToEmpty")],
    (isCharging, timeToFull, timeToEmpty) => {
      const timeRemaining = isCharging ? timeToFull : timeToEmpty;
      return generateTooltip(timeRemaining, isCharging, Math.floor(batteryService.percentage * 100) === 100);
    }
  );
  const componentChildren = variable_default.derive(
    [bind(show_label2), bind(batteryService, "percentage"), bind(hideLabelWhenFull)],
    (showLabel2, percentage, hideLabelWhenFull2) => {
      const isCharged = Math.round(percentage) === 100;
      const icon13 = /* @__PURE__ */ jsx2("label", { className: "bar-button-icon battery txt-icon", label: batIcon() });
      const label15 = /* @__PURE__ */ jsx2("label", { className: "bar-button-label battery", label: `${Math.floor(percentage * 100)}%` });
      const children = [icon13];
      if (showLabel2 && !(isCharged && hideLabelWhenFull2)) {
        children.push(label15);
      }
      return children;
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName(),
      tooltipText: componentTooltip(),
      onDestroy: () => {
        batIcon.drop();
        componentClassName.drop();
        componentTooltip.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "battery",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        variable_default.derive(
          [
            bind(rightClick8),
            bind(middleClick8),
            bind(scrollUp8),
            bind(scrollDown8),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "energymenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick8.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick8.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp8.get(), scrollDown8.get()));
          }
        );
      }
    }
  };
};

// src/globals/time.ts
var systemTime = Variable(default2.DateTime.new_now_local()).poll(
  1e3,
  () => default2.DateTime.new_now_local()
);

// src/components/bar/modules/clock/index.tsx
var { format: format2, icon: icon3, showIcon: showIcon2, showTime: showTime2, rightClick: rightClick9, middleClick: middleClick9, scrollUp: scrollUp9, scrollDown: scrollDown9 } = options_default.bar.clock;
var { style } = options_default.theme.bar.buttons;
var time = Variable.derive([systemTime, format2], (c, f) => c.format(f) || "");
var Clock = () => {
  const ClockTime = () => /* @__PURE__ */ jsx2("label", { className: "bar-button-label clock bar", label: bind(time) });
  const ClockIcon = () => /* @__PURE__ */ jsx2("label", { className: "bar-button-icon clock txt-icon bar", label: bind(icon3) });
  const componentClassName = Variable.derive(
    [bind(style), bind(showIcon2), bind(showTime2)],
    (btnStyle, shwIcn, shwLbl) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `clock-container ${styleMap2[btnStyle]} ${!shwLbl ? "no-label" : ""} ${!shwIcn ? "no-icon" : ""}`;
    }
  );
  const componentChildren = Variable.derive([bind(showIcon2), bind(showTime2)], (shIcn, shTm) => {
    if (shIcn && !shTm) {
      return /* @__PURE__ */ jsx2(ClockIcon, {});
    } else if (shTm && !shIcn) {
      return /* @__PURE__ */ jsx2(ClockTime, {});
    }
    return /* @__PURE__ */ jsxs("box", { children: [
      /* @__PURE__ */ jsx2(ClockIcon, {}),
      /* @__PURE__ */ jsx2(ClockTime, {})
    ] });
  });
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName(),
      onDestroy: () => {
        componentClassName.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "clock",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick9),
            bind(middleClick9),
            bind(scrollUp9),
            bind(scrollDown9),
            bind(options_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(options_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openMenu(clicked, event, "calendarmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick9.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick9.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(onScroll(self, throttledHandler, scrollUp9.get(), scrollDown9.get()));
          }
        );
      }
    }
  };
};

// src/components/bar/modules/systray/index.tsx
import AstalTray2 from "gi://AstalTray?version=0.1";
var systemtray2 = AstalTray2.get_default();
var { ignore: ignore2, customIcons } = options_default.bar.systray;
var createMenu = (menuModel, actionGroup) => {
  const menu = Gtk4.Menu.new_from_model(menuModel);
  menu.insert_action_group("dbusmenu", actionGroup);
  return menu;
};
var MenuCustomIcon = ({ iconLabel, iconColor, item }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "systray-icon txt-icon",
      label: iconLabel,
      css: iconColor ? `color: ${iconColor}` : "",
      tooltipMarkup: bind(item, "tooltipMarkup")
    }
  );
};
var MenuDefaultIcon = ({ item }) => {
  return /* @__PURE__ */ jsx2("icon", { className: "systray-icon", gIcon: bind(item, "gicon"), tooltipMarkup: bind(item, "tooltipMarkup") });
};
var MenuEntry = ({ item, child }) => {
  let menu;
  const entryBinding = Variable.derive(
    [bind(item, "menuModel"), bind(item, "actionGroup")],
    (menuModel, actionGroup) => {
      if (!menuModel) {
        return console.error(`Menu Model not found for ${item.id}`);
      }
      if (!actionGroup) {
        return console.error(`Action Group not found for ${item.id}`);
      }
      menu = createMenu(menuModel, actionGroup);
    }
  );
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cursor: "pointer",
      onClick: (self, event) => {
        if (isPrimaryClick(event)) {
          item.activate(0, 0);
        }
        if (isSecondaryClick(event)) {
          menu?.popup_at_widget(self, Gdk.Gravity.NORTH, Gdk.Gravity.SOUTH, null);
        }
        if (isMiddleClick(event)) {
          Notify({ summary: "App Name", body: item.id });
        }
      },
      onDestroy: () => {
        menu?.destroy();
        entryBinding.drop();
      },
      children: child
    }
  );
};
var SysTray = () => {
  const isVis4 = Variable(false);
  const componentChildren = Variable.derive(
    [bind(systemtray2, "items"), bind(ignore2), bind(customIcons)],
    (items, ignored3, custIcons) => {
      const filteredTray = items.filter(({ id }) => !ignored3.includes(id) && id !== null);
      isVis4.set(filteredTray.length > 0);
      return filteredTray.map((item) => {
        const matchedCustomIcon = Object.keys(custIcons).find((iconRegex) => item.id.match(iconRegex));
        if (matchedCustomIcon !== void 0) {
          const iconLabel = custIcons[matchedCustomIcon].icon || "\u{F082B}";
          const iconColor = custIcons[matchedCustomIcon].color;
          return /* @__PURE__ */ jsx2(MenuEntry, { item, children: /* @__PURE__ */ jsx2(MenuCustomIcon, { iconLabel, iconColor, item }) });
        }
        return /* @__PURE__ */ jsx2(MenuEntry, { item, children: /* @__PURE__ */ jsx2(MenuDefaultIcon, { item }) });
      });
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: "systray-container",
      onDestroy: () => {
        isVis4.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "systray",
    isVis: isVis4,
    isBox: true,
    props: {}
  };
};

// src/components/bar/shared/Module.tsx
var { style: style2 } = options_default.theme.bar.buttons;
var Module = ({
  icon: icon13,
  textIcon,
  useTextIcon = bind(Variable(false)),
  label: label15,
  tooltipText,
  boxClass,
  isVis: isVis4,
  props = {},
  showLabelBinding = bind(Variable(true)),
  showIconBinding = bind(Variable(true)),
  showLabel: showLabel2,
  labelHook,
  hook: hook2
}) => {
  const getIconWidget = (useTxtIcn) => {
    let iconWidget;
    if (icon13 !== void 0 && !useTxtIcn) {
      iconWidget = /* @__PURE__ */ jsx2("icon", { className: `txt-icon bar-button-icon module-icon ${boxClass}`, icon: icon13 });
    } else if (textIcon !== void 0) {
      iconWidget = /* @__PURE__ */ jsx2("label", { className: `txt-icon bar-button-icon module-icon ${boxClass}`, label: textIcon });
    }
    return iconWidget;
  };
  const componentClass = Variable.derive(
    [bind(style2), showLabelBinding],
    (style3, shwLabel) => {
      const shouldShowLabel = shwLabel || showLabel2;
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `${boxClass} ${styleMap2[style3]} ${!shouldShowLabel ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [showLabelBinding, showIconBinding, useTextIcon],
    (showLabel3, showIcon3, forceTextIcon) => {
      const childrenArray = [];
      const iconWidget = getIconWidget(forceTextIcon);
      if (showIcon3 && iconWidget !== void 0) {
        childrenArray.push(iconWidget);
      }
      if (showLabel3) {
        childrenArray.push(
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: `bar-button-label module-label ${boxClass}`,
              label: label15 ?? "",
              setup: labelHook
            }
          )
        );
      }
      return childrenArray;
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      tooltipText,
      className: componentClass(),
      setup: hook2,
      onDestroy: () => {
        componentChildren.drop();
        componentClass.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    tooltip_text: tooltipText,
    isVis: isVis4,
    boxClass,
    props
  };
};

// src/components/bar/modules/ram/helpers/index.ts
var calculateRamUsage = (round6) => {
  try {
    const [success, meminfoBytes] = default2.file_get_contents("/proc/meminfo");
    if (!success || !meminfoBytes) {
      throw new Error("Failed to read /proc/meminfo or file content is null.");
    }
    const meminfo = new TextDecoder("utf-8").decode(meminfoBytes);
    const totalMatch = meminfo.match(/MemTotal:\s+(\d+)/);
    const availableMatch = meminfo.match(/MemAvailable:\s+(\d+)/);
    if (!totalMatch || !availableMatch) {
      throw new Error("Failed to parse /proc/meminfo for memory values.");
    }
    const totalRamInBytes = parseInt(totalMatch[1], 10) * 1024;
    const availableRamInBytes = parseInt(availableMatch[1], 10) * 1024;
    let usedRam = totalRamInBytes - availableRamInBytes;
    usedRam = isNaN(usedRam) || usedRam < 0 ? 0 : usedRam;
    return {
      percentage: divide([totalRamInBytes, usedRam], round6.get()),
      total: totalRamInBytes,
      used: usedRam,
      free: availableRamInBytes
    };
  } catch (error) {
    console.error("Error calculating RAM usage:", error);
    return { total: 0, used: 0, percentage: 0, free: 0 };
  }
};

// src/lib/types/defaults/bar.ts
var LABEL_TYPES = ["used/total", "used", "free", "percentage"];
var NETWORK_LABEL_TYPES = ["full", "in", "out"];
var locationMap = {
  top: Astal7.WindowAnchor.TOP,
  bottom: Astal7.WindowAnchor.BOTTOM
};

// src/lib/poller/Poller.ts
var { layouts } = options.bar;
var Poller = class {
  /**
   * Creates an instance of Poller.
   * @param pollingInterval - The interval at which polling occurs.
   * @param trackers - An array of trackers to monitor.
   * @param pollingFunction - The function to execute during each poll.
   */
  constructor(pollingInterval10, trackers, pollingFunction) {
    this.pollingInterval = pollingInterval10;
    this.trackers = trackers;
    this.pollingFunction = pollingFunction;
  }
  intervalInstance = null;
  isExecuting = false;
  pollingFunction;
  /**
   * Starts the polling process by setting up the interval.
   */
  start() {
    Variable.derive([this.pollingInterval, ...this.trackers], (intervalMs) => {
      this.executePolling(intervalMs);
    })();
  }
  /**
   * Stops the polling process and cleans up resources.
   */
  stop() {
    if (this.intervalInstance !== null) {
      this.intervalInstance.cancel();
      this.intervalInstance = null;
    }
  }
  /**
   * Initializes the polling based on module usage.
   *
   * If not module is provided then we can safely assume that we want
   * to always run the pollig interval.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    if (moduleName === void 0) {
      return this.start();
    }
    const initialModules = getLayoutItems();
    if (initialModules.includes(moduleName)) {
      this.start();
    } else {
      this.stop();
    }
    layouts.subscribe(() => {
      const usedModules = getLayoutItems();
      if (usedModules.includes(moduleName)) {
        this.start();
      } else {
        this.stop();
      }
    });
  }
  /**
   * Executes the polling function at the specified interval.
   *
   * @param intervalMs - The polling interval in milliseconds.
   */
  executePolling(intervalMs) {
    if (this.intervalInstance !== null) {
      this.intervalInstance.cancel();
    }
    this.intervalInstance = interval(intervalMs, async () => {
      if (this.isExecuting) {
        return;
      }
      this.isExecuting = true;
      try {
        await this.pollingFunction();
      } catch (error) {
        console.error("Error during polling execution:", error);
      } finally {
        this.isExecuting = false;
      }
    });
  }
};

// src/lib/poller/FunctionPoller.ts
var FunctionPoller = class {
  /**
   * Creates an instance of FunctionPoller.
   *
   * @param targetVariable - The target variable to poll.
   * @param trackers - An array of trackers to monitor.
   * @param pollingInterval - The interval at which polling occurs.
   * @param pollingFunction - The function to execute during each poll.
   * @param params - Additional parameters for the polling function.
   *
   * @example
   *
   * ```ts
   * //##################### EXAMPLE ##########################
   *  const cpuPoller = new FunctionPoller<number, []>(
   *    cpuUsage,
   *    [bind(round)],
   *    bind(pollingInterval),
   *    computeCPU,
   *  );
   * //#######################################################
   *
   * ```
   */
  constructor(targetVariable, trackers, pollingInterval10, pollingFunction, ...params) {
    this.targetVariable = targetVariable;
    this.trackers = trackers;
    this.pollingInterval = pollingInterval10;
    this.pollingFunction = pollingFunction;
    this.params = params;
    this.poller = new Poller(this.pollingInterval, this.trackers, this.execute);
  }
  poller;
  params;
  /**
   * Executes the polling function with the provided parameters.
   *
   * The result of the function is assigned to the target variable.
   */
  execute = async () => {
    try {
      const result = await this.pollingFunction(...this.params);
      this.targetVariable.set(result);
    } catch (error) {
      console.error("Error executing polling function:", error);
    }
  };
  /**
   * Starts the polling process.
   */
  start() {
    this.poller.start();
  }
  /**
   * Stops the polling process.
   */
  stop() {
    this.poller.stop();
  }
  /**
   * Initializes the poller with the specified module.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    this.poller.initialize(moduleName);
  }
};

// src/components/bar/modules/ram/index.tsx
var { label: label3, labelType, round, leftClick: leftClick2, rightClick: rightClick10, middleClick: middleClick10, pollingInterval, icon: icon4 } = options_default.bar.customModules.ram;
var defaultRamData = { total: 0, used: 0, percentage: 0, free: 0 };
var ramUsage = Variable(defaultRamData);
var ramPoller = new FunctionPoller(
  ramUsage,
  [bind(round)],
  bind(pollingInterval),
  calculateRamUsage,
  round
);
ramPoller.initialize("ram");
var Ram = () => {
  const labelBinding = Variable.derive(
    [bind(ramUsage), bind(labelType), bind(round)],
    (rmUsg, lblTyp, round6) => {
      const returnValue = renderResourceLabel(lblTyp, rmUsg, round6);
      return returnValue;
    }
  );
  const ramModule = Module({
    textIcon: bind(icon4),
    label: labelBinding(),
    tooltipText: bind(labelType).as((lblTyp) => {
      return formatTooltip("RAM", lblTyp);
    }),
    boxClass: "ram",
    showLabelBinding: bind(label3),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick2
          },
          onSecondaryClick: {
            cmd: rightClick10
          },
          onMiddleClick: {
            cmd: middleClick10
          },
          onScrollUp: {
            fn: () => {
              labelType.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType.get()) + 1) % LABEL_TYPES.length]
              );
            }
          },
          onScrollDown: {
            fn: () => {
              labelType.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType.get()) - 1 + LABEL_TYPES.length) % LABEL_TYPES.length]
              );
            }
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
      }
    }
  });
  return ramModule;
};

// src/components/bar/modules/cpu/helpers/index.ts
import GTop from "gi://GTop";
var previousCpuData = new GTop.glibtop_cpu();
GTop.glibtop_get_cpu(previousCpuData);
var computeCPU = () => {
  const currentCpuData = new GTop.glibtop_cpu();
  GTop.glibtop_get_cpu(currentCpuData);
  const totalDiff = currentCpuData.total - previousCpuData.total;
  const idleDiff = currentCpuData.idle - previousCpuData.idle;
  const cpuUsagePercentage = totalDiff > 0 ? (totalDiff - idleDiff) / totalDiff * 100 : 0;
  previousCpuData = currentCpuData;
  return cpuUsagePercentage;
};

// src/components/bar/modules/cpu/index.tsx
var { label: label4, round: round2, leftClick: leftClick3, rightClick: rightClick11, middleClick: middleClick11, scrollUp: scrollUp10, scrollDown: scrollDown10, pollingInterval: pollingInterval2, icon: icon5 } = options_default.bar.customModules.cpu;
var cpuUsage = Variable(0);
var cpuPoller = new FunctionPoller(cpuUsage, [bind(round2)], bind(pollingInterval2), computeCPU);
cpuPoller.initialize("cpu");
var Cpu = () => {
  const renderLabel2 = (cpuUsg, rnd) => {
    return rnd ? `${Math.round(cpuUsg)}%` : `${cpuUsg.toFixed(2)}%`;
  };
  const labelBinding = Variable.derive([bind(cpuUsage), bind(round2)], (cpuUsg, rnd) => {
    return renderLabel2(cpuUsg, rnd);
  });
  const cpuModule = Module({
    textIcon: bind(icon5),
    label: labelBinding(),
    tooltipText: "CPU",
    boxClass: "cpu",
    showLabelBinding: bind(label4),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick3
          },
          onSecondaryClick: {
            cmd: rightClick11
          },
          onMiddleClick: {
            cmd: middleClick11
          },
          onScrollUp: {
            cmd: scrollUp10
          },
          onScrollDown: {
            cmd: scrollDown10
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
      }
    }
  });
  return cpuModule;
};

// src/components/bar/modules/cputemp/helpers/index.ts
import GLib6 from "gi://GLib?version=2.0";

// src/lib/types/defaults/weather.ts
var DEFAULT_WEATHER = {
  location: {
    name: "Tahiti",
    region: "Somewhere",
    country: "United States of America",
    lat: 0,
    lon: 0,
    tz_id: "Tahiti",
    localtime_epoch: 1721981457,
    localtime: "2024-07-26 1:10"
  },
  current: {
    last_updated_epoch: 1721980800,
    last_updated: "2024-07-26 01:00",
    temp_c: 0,
    temp_f: 0,
    is_day: 0,
    condition: {
      text: "Clear",
      icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
      code: 1e3
    },
    wind_mph: 0,
    wind_kph: 0,
    wind_degree: 0,
    wind_dir: "NW",
    pressure_mb: 0,
    pressure_in: 0,
    precip_mm: 0,
    precip_in: 0,
    humidity: 0,
    cloud: 0,
    feelslike_c: 0,
    feelslike_f: 0,
    windchill_c: 0,
    windchill_f: 0,
    heatindex_c: 0,
    heatindex_f: 0,
    dewpoint_c: 0,
    dewpoint_f: 0,
    vis_km: 0,
    vis_miles: 0,
    uv: 0,
    gust_mph: 0,
    gust_kph: 0
  },
  forecast: {
    forecastday: [
      {
        date: "2024-07-26",
        date_epoch: 1721952e3,
        day: {
          maxtemp_c: 0,
          maxtemp_f: 0,
          mintemp_c: 0,
          mintemp_f: 0,
          avgtemp_c: 0,
          avgtemp_f: 0,
          maxwind_mph: 0,
          maxwind_kph: 0,
          totalprecip_mm: 0,
          totalprecip_in: 0,
          totalsnow_cm: 0,
          avgvis_km: 0,
          avgvis_miles: 0,
          avghumidity: 0,
          daily_will_it_rain: 0,
          daily_chance_of_rain: 0,
          daily_will_it_snow: 0,
          daily_chance_of_snow: 0,
          condition: {
            text: "Sunny",
            icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
            code: 1e3
          },
          uv: 0
        },
        astro: {
          sunrise: "06:01 AM",
          sunset: "08:10 PM",
          moonrise: "11:32 PM",
          moonset: "12:01 PM",
          moon_phase: "Waning Gibbous",
          moon_illumination: 0,
          is_moon_up: 0,
          is_sun_up: 0
        },
        hour: [
          {
            time_epoch: 1721977200,
            time: "2024-07-26 00:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721980800,
            time: "2024-07-26 01:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721984400,
            time: "2024-07-26 02:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721988e3,
            time: "2024-07-26 03:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721991600,
            time: "2024-07-26 04:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721995200,
            time: "2024-07-26 05:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1721998800,
            time: "2024-07-26 06:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1722002400,
            time: "2024-07-26 07:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 7
          },
          {
            time_epoch: 1722006e3,
            time: "2024-07-26 08:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 7
          },
          {
            time_epoch: 1722009600,
            time: "2024-07-26 09:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 8
          },
          {
            time_epoch: 1722013200,
            time: "2024-07-26 10:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 8
          },
          {
            time_epoch: 1722016800,
            time: "2024-07-26 11:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 9
          },
          {
            time_epoch: 1722020400,
            time: "2024-07-26 12:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 9
          },
          {
            time_epoch: 1722024e3,
            time: "2024-07-26 13:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 9
          },
          {
            time_epoch: 1722027600,
            time: "2024-07-26 14:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 10
          },
          {
            time_epoch: 1722031200,
            time: "2024-07-26 15:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 10
          },
          {
            time_epoch: 1722034800,
            time: "2024-07-26 16:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 10
          },
          {
            time_epoch: 1722038400,
            time: "2024-07-26 17:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 10
          },
          {
            time_epoch: 1722042e3,
            time: "2024-07-26 18:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 9
          },
          {
            time_epoch: 1722045600,
            time: "2024-07-26 19:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 9
          },
          {
            time_epoch: 1722049200,
            time: "2024-07-26 20:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 1,
            condition: {
              text: "Sunny",
              icon: "//cdn.weatherapi.com/weather/64x64/day/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 8
          },
          {
            time_epoch: 1722052800,
            time: "2024-07-26 21:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 1722056400,
            time: "2024-07-26 22:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          },
          {
            time_epoch: 172206e4,
            time: "2024-07-26 23:00",
            temp_c: 0,
            temp_f: 0,
            is_day: 0,
            condition: {
              text: "Clear ",
              icon: "//cdn.weatherapi.com/weather/64x64/night/113.png",
              code: 1e3
            },
            wind_mph: 0,
            wind_kph: 0,
            wind_degree: 0,
            wind_dir: "N",
            pressure_mb: 0,
            pressure_in: 0,
            precip_mm: 0,
            precip_in: 0,
            snow_cm: 0,
            humidity: 0,
            cloud: 0,
            feelslike_c: 0,
            feelslike_f: 0,
            windchill_c: 0,
            windchill_f: 0,
            heatindex_c: 0,
            heatindex_f: 0,
            dewpoint_c: 0,
            dewpoint_f: 0,
            will_it_rain: 0,
            chance_of_rain: 0,
            will_it_snow: 0,
            chance_of_snow: 0,
            vis_km: 0,
            vis_miles: 0,
            gust_mph: 0,
            gust_kph: 0,
            uv: 0
          }
        ]
      }
    ]
  }
};

// src/globals/weather.ts
import GLib5 from "gi://GLib?version=2.0";

// src/lib/icons/weather.ts
var weatherIcons = {
  warning: "\u{F0F2F}",
  sunny: "\u{F0599}",
  clear: "\u{F0594}",
  partly_cloudy: "\u{F0595}",
  partly_cloudy_night: "\u{F0F31}",
  cloudy: "\u{F0590}",
  overcast: "\u{F0595}",
  mist: "\u{F0591}",
  patchy_rain_nearby: "\u{F0F33}",
  patchy_rain_possible: "\u{F0F33}",
  patchy_snow_possible: "\u{F0F34}",
  patchy_sleet_possible: "\u{F067F}",
  patchy_freezing_drizzle_possible: "\u{F067F}",
  thundery_outbreaks_possible: "\u{F067E}",
  blowing_snow: "\u{F0F36}",
  blizzard: "\u{F0F36}",
  fog: "\u{F0591}",
  freezing_fog: "\u{F0591}",
  patchy_light_drizzle: "\u{F0F33}",
  light_drizzle: "\u{F0F33}",
  freezing_drizzle: "\u{F067F}",
  heavy_freezing_drizzle: "\u{F067F}",
  patchy_light_rain: "\u{F0F33}",
  light_rain: "\u{F0F33}",
  moderate_rain_at_times: "\u{F0597}",
  moderate_rain: "\u{F0F33}",
  heavy_rain_at_times: "\u{F0596}",
  heavy_rain: "\u{F0596}",
  light_freezing_rain: "\u{F067F}",
  moderate_or_heavy_freezing_rain: "\u{F067F}",
  light_sleet: "\u{F067F}",
  moderate_or_heavy_sleet: "\u{F067F}",
  patchy_light_snow: "\u{F0F34}",
  light_snow: "\u{F0F34}",
  patchy_moderate_snow: "\u{F0F34}",
  moderate_snow: "\u{F0F36}",
  patchy_heavy_snow: "\u{F0F36}",
  heavy_snow: "\u{F0F36}",
  ice_pellets: "\u{F0592}",
  light_rain_shower: "\u{F0596}",
  moderate_or_heavy_rain_shower: "\u{F0596}",
  torrential_rain_shower: "\u{F0596}",
  light_sleet_showers: "\u{F0F35}",
  moderate_or_heavy_sleet_showers: "\u{F0F35}",
  light_snow_showers: "\u{F0F35}",
  moderate_or_heavy_snow_showers: "\u{F0F35}",
  light_showers_of_ice_pellets: "\u{F0592}",
  moderate_or_heavy_showers_of_ice_pellets: "\u{F0592}",
  patchy_light_rain_with_thunder: "\u{F067E}",
  moderate_or_heavy_rain_with_thunder: "\u{F067E}",
  moderate_or_heavy_rain_in_area_with_thunder: "\u{F067E}",
  patchy_light_snow_with_thunder: "\u{F0F36}",
  moderate_or_heavy_snow_with_thunder: "\u{F0F36}"
};

// src/globals/weather.ts
var { EXISTS: EXISTS2, IS_REGULAR: IS_REGULAR2 } = GLib5.FileTest;
var { key, interval: weatherInterval, location: location2 } = options_default.menus.clock.weather;
var globalWeatherVar2 = Variable(DEFAULT_WEATHER);
var weatherIntervalInstance = null;
key.subscribe(() => {
  const fetchedKey = getWeatherKey(key.get());
  weatherApiKey.set(fetchedKey);
});
var getWeatherKey = (apiKey) => {
  const weatherKey = apiKey;
  if (GLib5.file_test(weatherKey, EXISTS2) && GLib5.file_test(weatherKey, IS_REGULAR2)) {
    try {
      const fileContentArray = GLib5.file_get_contents(weatherKey)[1];
      const fileContent = new TextDecoder().decode(fileContentArray);
      if (!fileContent) {
        console.error("File content is empty");
        return "";
      }
      const parsedContent = JSON.parse(fileContent);
      if (parsedContent.weather_api_key !== void 0) {
        return parsedContent.weather_api_key;
      } else {
        console.error("weather_api_key is missing in the JSON content");
        return "";
      }
    } catch (error) {
      console.error(`Failed to read or parse weather key file: ${error}`);
      return "";
    }
  }
  return apiKey;
};
var fetchedApiKey = getWeatherKey(key.get());
var weatherApiKey = Variable(fetchedApiKey);
var weatherIntervalFn = (weatherInterval2, loc, weatherKey) => {
  if (weatherIntervalInstance !== null) {
    weatherIntervalInstance.cancel();
  }
  const formattedLocation = loc.replace(" ", "%20");
  weatherIntervalInstance = interval(weatherInterval2, () => {
    execAsync(
      `curl "https://api.weatherapi.com/v1/forecast.json?key=${weatherKey}&q=${formattedLocation}&days=1&aqi=no&alerts=no"`
    ).then((res) => {
      try {
        if (typeof res !== "string") {
          return globalWeatherVar2.set(DEFAULT_WEATHER);
        }
        const parsedWeather = JSON.parse(res);
        if (Object.keys(parsedWeather).includes("error")) {
          return globalWeatherVar2.set(DEFAULT_WEATHER);
        }
        return globalWeatherVar2.set(parsedWeather);
      } catch (error) {
        globalWeatherVar2.set(DEFAULT_WEATHER);
        console.warn(`Failed to parse weather data: ${error}`);
      }
    }).catch((err) => {
      console.error(`Failed to fetch weather: ${err}`);
      globalWeatherVar2.set(DEFAULT_WEATHER);
    });
  });
};
Variable.derive([bind(weatherApiKey), bind(weatherInterval), bind(location2)], (weatherKey, weatherInterval2, loc) => {
  if (!weatherKey) {
    return globalWeatherVar2.set(DEFAULT_WEATHER);
  }
  weatherIntervalFn(weatherInterval2, loc, weatherKey);
})();
var getTemperature = (weatherData, unitType) => {
  if (unitType === "imperial") {
    return `${Math.ceil(weatherData.current.temp_f)}\xB0 F`;
  } else {
    return `${Math.ceil(weatherData.current.temp_c)}\xB0 C`;
  }
};
var getWeatherIcon = (fahrenheit) => {
  const icons2 = {
    100: "\uF2C7",
    75: "\uF2C8",
    50: "\uF2C9",
    25: "\uF2CA",
    0: "\uF2CB"
  };
  const colors2 = {
    100: "weather-color red",
    75: "weather-color orange",
    50: "weather-color lavender",
    25: "weather-color blue",
    0: "weather-color sky"
  };
  const threshold = fahrenheit < 0 ? 0 : [100, 75, 50, 25, 0].find((threshold2) => threshold2 <= fahrenheit) || 0;
  const icon13 = icons2[threshold || 50];
  const color2 = colors2[threshold || 50];
  return {
    icon: icon13,
    color: color2
  };
};
var getRainChance = (weatherData) => `${weatherData.forecast.forecastday[0].day.daily_chance_of_rain}%`;
var isValidWeatherIconTitle = (title) => {
  return title in weatherIcons;
};
var getWeatherStatusTextIcon = (weatherData) => {
  let iconQuery = weatherData.current.condition.text.trim().toLowerCase().replaceAll(" ", "_");
  if (!weatherData.current.is_day && iconQuery === "partly_cloudy") {
    iconQuery = "partly_cloudy_night";
  }
  if (isValidWeatherIconTitle(iconQuery)) {
    return weatherIcons[iconQuery];
  } else {
    console.warn(`Unknown weather icon title: ${iconQuery}`);
    return weatherIcons["warning"];
  }
};
var convertCelsiusToFahrenheit = (celsiusValue) => {
  return celsiusValue * 9 / 5 + 32;
};
globalThis["globalWeatherVar"] = globalWeatherVar2;

// src/components/bar/modules/cputemp/helpers/index.ts
var { sensor } = options_default.bar.customModules.cpuTemp;
var getCPUTemperature = (round6, unit6) => {
  try {
    if (sensor.get().length === 0) {
      return 0;
    }
    const [success, tempInfoBytes] = GLib6.file_get_contents(sensor.get());
    const tempInfo = new TextDecoder("utf-8").decode(tempInfoBytes);
    if (!success || !tempInfoBytes) {
      console.error(`Failed to read ${sensor.get()} or file content is null.`);
      return 0;
    }
    let decimalTemp = parseInt(tempInfo, 10) / 1e3;
    if (unit6.get() === "imperial") {
      decimalTemp = convertCelsiusToFahrenheit(decimalTemp);
    }
    return round6.get() ? Math.round(decimalTemp) : parseFloat(decimalTemp.toFixed(2));
  } catch (error) {
    console.error("Error calculating CPU Temp:", error);
    return 0;
  }
};

// src/components/bar/modules/cputemp/index.tsx
var {
  label: label5,
  sensor: sensor2,
  round: round3,
  showUnit,
  unit,
  leftClick: leftClick4,
  rightClick: rightClick12,
  middleClick: middleClick12,
  scrollUp: scrollUp11,
  scrollDown: scrollDown11,
  pollingInterval: pollingInterval3,
  icon: icon6
} = options_default.bar.customModules.cpuTemp;
var cpuTemp = Variable(0);
var cpuTempPoller = new FunctionPoller(
  cpuTemp,
  [bind(sensor2), bind(round3), bind(unit)],
  bind(pollingInterval3),
  getCPUTemperature,
  round3,
  unit
);
cpuTempPoller.initialize("cputemp");
var CpuTemp = () => {
  const labelBinding = Variable.derive(
    [bind(cpuTemp), bind(unit), bind(showUnit), bind(round3)],
    (cpuTmp, tempUnit, shwUnit) => {
      const unitLabel = tempUnit === "imperial" ? "F" : "C";
      const unit6 = shwUnit ? ` ${unitLabel}` : "";
      return `${cpuTmp.toString()}\xB0${unit6}`;
    }
  );
  const cpuTempModule = Module({
    textIcon: bind(icon6),
    label: labelBinding(),
    tooltipText: "CPU Temperature",
    boxClass: "cpu-temp",
    showLabelBinding: bind(label5),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick4
          },
          onSecondaryClick: {
            cmd: rightClick12
          },
          onMiddleClick: {
            cmd: middleClick12
          },
          onScrollUp: {
            cmd: scrollUp11
          },
          onScrollDown: {
            cmd: scrollDown11
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
      }
    }
  });
  return cpuTempModule;
};

// src/components/bar/modules/storage/helpers/index.ts
import GTop2 from "gi://GTop";
var computeStorage = (round6) => {
  try {
    const currentFsUsage = new GTop2.glibtop_fsusage();
    GTop2.glibtop_get_fsusage(currentFsUsage, "/");
    const total = currentFsUsage.blocks * currentFsUsage.block_size;
    const available2 = currentFsUsage.bavail * currentFsUsage.block_size;
    const used = total - available2;
    return {
      total,
      used,
      free: available2,
      percentage: divide([total, used], round6.get())
    };
  } catch (error) {
    console.error("Error calculating RAM usage:", error);
    return { total: 0, used: 0, percentage: 0, free: 0 };
  }
};

// src/components/bar/modules/storage/index.tsx
var { label: label6, labelType: labelType2, icon: icon7, round: round4, leftClick: leftClick5, rightClick: rightClick13, middleClick: middleClick13, pollingInterval: pollingInterval4 } = options_default.bar.customModules.storage;
var defaultStorageData = { total: 0, used: 0, percentage: 0, free: 0 };
var storageUsage = Variable(defaultStorageData);
var storagePoller = new FunctionPoller(
  storageUsage,
  [bind(round4)],
  bind(pollingInterval4),
  computeStorage,
  round4
);
storagePoller.initialize("storage");
var Storage = () => {
  const labelBinding = Variable.derive(
    [bind(storageUsage), bind(labelType2), bind(round4)],
    (storage, lblTyp, round6) => {
      return renderResourceLabel(lblTyp, storage, round6);
    }
  );
  const storageModule = Module({
    textIcon: bind(icon7),
    label: labelBinding(),
    tooltipText: bind(labelType2).as((lblTyp) => {
      return formatTooltip("Storage", lblTyp);
    }),
    boxClass: "storage",
    showLabelBinding: bind(label6),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick5
          },
          onSecondaryClick: {
            cmd: rightClick13
          },
          onMiddleClick: {
            cmd: middleClick13
          },
          onScrollUp: {
            fn: () => {
              labelType2.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType2.get()) + 1) % LABEL_TYPES.length]
              );
            }
          },
          onScrollDown: {
            fn: () => {
              labelType2.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType2.get()) - 1 + LABEL_TYPES.length) % LABEL_TYPES.length]
              );
            }
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
      }
    }
  });
  return storageModule;
};

// src/components/bar/modules/netstat/helpers/index.ts
import GLib7 from "gi://GLib";

// src/lib/types/defaults/netstat.ts
var GET_DEFAULT_NETSTAT_DATA = (dataType) => {
  if (dataType === "auto") {
    return { in: `0 Kib/s`, out: `0 Kib/s` };
  }
  return { in: `0 ${dataType}/s`, out: `0 ${dataType}/s` };
};

// src/components/bar/modules/netstat/helpers/index.ts
var previousNetUsage = { rx: 0, tx: 0, time: 0 };
var formatRate = (rate, type, round6) => {
  const fixed = round6 ? 0 : 2;
  switch (true) {
    case type === "KiB":
      return `${(rate / 1e3).toFixed(fixed)} KiB/s`;
    case type === "MiB":
      return `${(rate / 1e6).toFixed(fixed)} MiB/s`;
    case type === "GiB":
      return `${(rate / 1e9).toFixed(fixed)} GiB/s`;
    case rate >= 1e9:
      return `${(rate / 1e9).toFixed(fixed)} GiB/s`;
    case rate >= 1e6:
      return `${(rate / 1e6).toFixed(fixed)} MiB/s`;
    case rate >= 1e3:
      return `${(rate / 1e3).toFixed(fixed)} KiB/s`;
    default:
      return `${rate.toFixed(fixed)} bytes/s`;
  }
};
var parseInterfaceData = (line) => {
  const trimmedLine = line.trim();
  if (!trimmedLine || trimmedLine.startsWith("Inter-") || trimmedLine.startsWith("face")) {
    return null;
  }
  const [iface, rx, , , , , , , , tx] = trimmedLine.split(/\s+/);
  const rxValue = parseInt(rx, 10);
  const txValue = parseInt(tx, 10);
  const cleanedIface = iface.replace(":", "");
  return { name: cleanedIface, rx: rxValue, tx: txValue };
};
var isValidInterface = (iface, interfaceName) => {
  if (!iface) return false;
  if (interfaceName) return iface.name === interfaceName;
  return iface.name !== "lo" && iface.rx > 0 && iface.tx > 0;
};
var getNetworkUsage = (interfaceName = "") => {
  const [success, data] = GLib7.file_get_contents("/proc/net/dev");
  if (!success) {
    console.error("Failed to read /proc/net/dev");
    return { name: "", rx: 0, tx: 0 };
  }
  const lines = new TextDecoder("utf-8").decode(data).split("\n");
  for (const line of lines) {
    const iface = parseInterfaceData(line);
    if (isValidInterface(iface, interfaceName)) {
      return iface;
    }
  }
  return { name: "", rx: 0, tx: 0 };
};
var computeNetwork = (round6, interfaceNameVar, dataType) => {
  const rateUnit2 = dataType.get();
  const interfaceName = interfaceNameVar ? interfaceNameVar.get() : "";
  const DEFAULT_NETSTAT_DATA = GET_DEFAULT_NETSTAT_DATA(rateUnit2);
  try {
    const { rx, tx, name: name2 } = getNetworkUsage(interfaceName);
    const currentTime = Date.now();
    if (!name2) {
      return DEFAULT_NETSTAT_DATA;
    }
    if (previousNetUsage.time === 0) {
      previousNetUsage = { rx, tx, time: currentTime };
      return DEFAULT_NETSTAT_DATA;
    }
    const timeDiff = Math.max((currentTime - previousNetUsage.time) / 1e3, 1);
    const rxRate = (rx - previousNetUsage.rx) / timeDiff;
    const txRate = (tx - previousNetUsage.tx) / timeDiff;
    previousNetUsage = { rx, tx, time: currentTime };
    return {
      in: formatRate(rxRate, rateUnit2, round6.get()),
      out: formatRate(txRate, rateUnit2, round6.get())
    };
  } catch (error) {
    console.error("Error calculating network usage:", error);
    return DEFAULT_NETSTAT_DATA;
  }
};

// src/components/bar/modules/netstat/index.tsx
import AstalNetwork3 from "gi://AstalNetwork?version=0.1";
var {
  label: label7,
  labelType: labelType3,
  networkInterface,
  rateUnit,
  dynamicIcon,
  icon: icon8,
  networkInLabel,
  networkOutLabel,
  round: round5,
  leftClick: leftClick6,
  rightClick: rightClick14,
  middleClick: middleClick14,
  pollingInterval: pollingInterval5
} = options_default.bar.customModules.netstat;
var networkUsage = Variable(GET_DEFAULT_NETSTAT_DATA(rateUnit.get()));
var netstatPoller = new FunctionPoller(
  networkUsage,
  [bind(rateUnit), bind(networkInterface), bind(round5)],
  bind(pollingInterval5),
  computeNetwork,
  round5,
  networkInterface,
  rateUnit
);
netstatPoller.initialize("netstat");
var Netstat = () => {
  const renderNetworkLabel = (lblType, networkService2) => {
    switch (lblType) {
      case "in":
        return `${networkInLabel.get()} ${networkService2.in}`;
      case "out":
        return `${networkOutLabel.get()} ${networkService2.out}`;
      default:
        return `${networkInLabel.get()} ${networkService2.in} ${networkOutLabel.get()} ${networkService2.out}`;
    }
  };
  const iconBinding = Variable.derive(
    [bind(networkService, "primary"), bind(networkService, "wifi"), bind(networkService, "wired")],
    (pmry, wfi, wrd) => {
      if (pmry === AstalNetwork3.Primary.WIRED) {
        return wrd?.icon_name;
      }
      return wfi?.icon_name;
    }
  );
  const labelBinding = Variable.derive(
    [bind(networkUsage), bind(labelType3)],
    (networkService2, lblTyp) => renderNetworkLabel(lblTyp, networkService2)
  );
  const netstatModule = Module({
    useTextIcon: bind(dynamicIcon).as((useDynamicIcon) => !useDynamicIcon),
    icon: iconBinding(),
    textIcon: bind(icon8),
    label: labelBinding(),
    tooltipText: bind(labelType3).as((lblTyp) => {
      return lblTyp === "full" ? "Ingress / Egress" : lblTyp === "in" ? "Ingress" : "Egress";
    }),
    boxClass: "netstat",
    showLabelBinding: bind(label7),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick6
          },
          onSecondaryClick: {
            cmd: rightClick14
          },
          onMiddleClick: {
            cmd: middleClick14
          },
          onScrollUp: {
            fn: () => {
              labelType3.set(
                NETWORK_LABEL_TYPES[(NETWORK_LABEL_TYPES.indexOf(labelType3.get()) + 1) % NETWORK_LABEL_TYPES.length]
              );
            }
          },
          onScrollDown: {
            fn: () => {
              labelType3.set(
                NETWORK_LABEL_TYPES[(NETWORK_LABEL_TYPES.indexOf(labelType3.get()) - 1 + NETWORK_LABEL_TYPES.length) % NETWORK_LABEL_TYPES.length]
              );
            }
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
        iconBinding.drop();
      }
    }
  });
  return netstatModule;
};

// src/components/bar/modules/kblayout/helpers/layouts.ts
var layoutMap = {
  "Abkhazian (Russia)": "RU (Ab)",
  Akan: "GH (Akan)",
  Albanian: "AL",
  "Albanian (Plisi)": "AL (Plisi)",
  "Albanian (Veqilharxhi)": "AL (Veqilharxhi)",
  Amharic: "ET",
  Arabic: "ARA",
  "Arabic (Algeria)": "DZ (Ar)",
  "Arabic (AZERTY, Eastern Arabic numerals)": "ARA (Azerty Digits)",
  "Arabic (AZERTY)": "ARA (Azerty)",
  "Arabic (Buckwalter)": "ARA (Buckwalter)",
  "Arabic (Eastern Arabic numerals)": "ARA (Digits)",
  "Arabic (Macintosh)": "ARA (Mac)",
  "Arabic (Morocco)": "MA",
  "Arabic (OLPC)": "ARA (Olpc)",
  "Arabic (Pakistan)": "PK (Ara)",
  "Arabic (QWERTY, Eastern Arabic numerals)": "ARA (Qwerty Digits)",
  "Arabic (QWERTY)": "ARA (Qwerty)",
  "Arabic (Syria)": "SY",
  Armenian: "AM",
  "Armenian (alt. eastern)": "AM (Eastern-Alt)",
  "Armenian (alt. phonetic)": "AM (Phonetic-Alt)",
  "Armenian (eastern)": "AM (Eastern)",
  "Armenian (phonetic)": "AM (Phonetic)",
  "Armenian (western)": "AM (Western)",
  "Asturian (Spain, with bottom-dot H and L)": "ES (Ast)",
  Avatime: "GH (Avn)",
  Azerbaijani: "AZ",
  "Azerbaijani (Cyrillic)": "AZ (Cyrillic)",
  "Azerbaijani (Iran)": "IR (Azb)",
  Bambara: "ML",
  Bangla: "BD",
  "Bangla (India, Baishakhi InScript)": "IN (Ben Inscript)",
  "Bangla (India, Baishakhi)": "IN (Ben Baishakhi)",
  "Bangla (India, Bornona)": "IN (Ben Bornona)",
  "Bangla (India, Gitanjali)": "IN (Ben Gitanjali)",
  "Bangla (India, Probhat)": "IN (Ben Probhat)",
  "Bangla (India)": "IN (Ben)",
  "Bangla (Probhat)": "BD (Probhat)",
  Bashkirian: "RU (Bak)",
  Belarusian: "BY",
  "Belarusian (intl.)": "BY (Intl)",
  "Belarusian (Latin)": "BY (Latin)",
  "Belarusian (legacy)": "BY (Legacy)",
  "Belarusian (phonetic)": "BY (Phonetic)",
  Belgian: "BE",
  "Belgian (alt.)": "BE (Oss)",
  "Belgian (ISO, alt.)": "BE (Iso-Alternate)",
  "Belgian (Latin-9 only, alt.)": "BE (Oss Latin9)",
  "Belgian (no dead keys)": "BE (Nodeadkeys)",
  "Belgian (Wang 724 AZERTY)": "BE (Wang)",
  "Berber (Algeria, Latin)": "DZ",
  "Berber (Algeria, Tifinagh)": "DZ (Ber)",
  "Berber (Morocco, Tifinagh alt.)": "MA (Tifinagh-Alt)",
  "Berber (Morocco, Tifinagh extended phonetic)": "MA (Tifinagh-Extended-Phonetic)",
  "Berber (Morocco, Tifinagh extended)": "MA (Tifinagh-Extended)",
  "Berber (Morocco, Tifinagh phonetic, alt.)": "MA (Tifinagh-Alt-Phonetic)",
  "Berber (Morocco, Tifinagh phonetic)": "MA (Tifinagh-Phonetic)",
  "Berber (Morocco, Tifinagh)": "MA (Tifinagh)",
  Bosnian: "BA",
  "Bosnian (US, with Bosnian digraphs)": "BA (Unicodeus)",
  "Bosnian (US)": "BA (Us)",
  "Bosnian (with Bosnian digraphs)": "BA (Unicode)",
  "Bosnian (with guillemets)": "BA (Alternatequotes)",
  Braille: "BRAI",
  "Braille (left-handed inverted thumb)": "BRAI (Left Hand Invert)",
  "Braille (left-handed)": "BRAI (Left Hand)",
  "Braille (right-handed inverted thumb)": "BRAI (Right Hand Invert)",
  "Braille (right-handed)": "BRAI (Right Hand)",
  "Breton (France)": "FR (Bre)",
  Bulgarian: "BG",
  "Bulgarian (enhanced)": "BG (Bekl)",
  "Bulgarian (new phonetic)": "BG (Bas Phonetic)",
  "Bulgarian (traditional phonetic)": "BG (Phonetic)",
  Burmese: "MM",
  "Burmese Zawgyi": "MM (Zawgyi)",
  "Cameroon (AZERTY, intl.)": "CM (Azerty)",
  "Cameroon (Dvorak, intl.)": "CM (Dvorak)",
  "Cameroon Multilingual (QWERTY, intl.)": "CM (Qwerty)",
  "Canadian (CSA)": "CA (Multix)",
  "Catalan (Spain, with middle-dot L)": "ES (Cat)",
  Cherokee: "US (Chr)",
  Chinese: "CN",
  Chuvash: "RU (Cv)",
  "Chuvash (Latin)": "RU (Cv Latin)",
  CloGaelach: "IE (CloGaelach)",
  "Crimean Tatar (Turkish Alt-Q)": "UA (Crh Alt)",
  "Crimean Tatar (Turkish F)": "UA (Crh F)",
  "Crimean Tatar (Turkish Q)": "UA (Crh)",
  Croatian: "HR",
  "Croatian (US, with Croatian digraphs)": "HR (Unicodeus)",
  "Croatian (US)": "HR (Us)",
  "Croatian (with Croatian digraphs)": "HR (Unicode)",
  "Croatian (with guillemets)": "HR (Alternatequotes)",
  Czech: "CZ",
  "Czech (QWERTY, extended backslash)": "CZ (Qwerty Bksl)",
  "Czech (QWERTY, Macintosh)": "CZ (Qwerty-Mac)",
  "Czech (QWERTY)": "CZ (Qwerty)",
  "Czech (UCW, only accented letters)": "CZ (Ucw)",
  "Czech (US, Dvorak, UCW support)": "CZ (Dvorak-Ucw)",
  "Czech (with <\\|> key)": "CZ (Bksl)",
  Danish: "DK",
  "Danish (Dvorak)": "DK (Dvorak)",
  "Danish (Macintosh, no dead keys)": "DK (Mac Nodeadkeys)",
  "Danish (Macintosh)": "DK (Mac)",
  "Danish (no dead keys)": "DK (Nodeadkeys)",
  "Danish (Windows)": "DK (Winkeys)",
  Dari: "AF",
  "Dari (Afghanistan, OLPC)": "AF (Fa-Olpc)",
  Dhivehi: "MV",
  Dutch: "NL",
  "Dutch (Macintosh)": "NL (Mac)",
  "Dutch (standard)": "NL (Std)",
  "Dutch (US)": "NL (Us)",
  Dzongkha: "BT",
  "English (Australian)": "AU",
  "English (Cameroon)": "CM",
  "English (Canada)": "CA (Eng)",
  "English (classic Dvorak)": "US (Dvorak-Classic)",
  "English (Colemak-DH ISO)": "US (Colemak Dh Iso)",
  "English (Colemak-DH)": "US (Colemak Dh)",
  "English (Colemak)": "US (Colemak)",
  "English (Dvorak, alt. intl.)": "US (Dvorak-Alt-Intl)",
  "English (Dvorak, intl., with dead keys)": "US (Dvorak-Intl)",
  "English (Dvorak, left-handed)": "US (Dvorak-L)",
  "English (Dvorak, Macintosh)": "US (Dvorak-Mac)",
  "English (Dvorak, right-handed)": "US (Dvorak-R)",
  "English (Dvorak)": "US (Dvorak)",
  "English (Ghana, GILLBT)": "GH (Gillbt)",
  "English (Ghana, multilingual)": "GH (Generic)",
  "English (Ghana)": "GH",
  "English (India, with rupee)": "IN (Eng)",
  "English (intl., with AltGr dead keys)": "US (Altgr-Intl)",
  "English (Macintosh)": "US (Mac)",
  "English (Mali, US, intl.)": "ML (Us-Intl)",
  "English (Mali, US, Macintosh)": "ML (Us-Mac)",
  "English (Nigeria)": "NG",
  "English (Norman)": "US (Norman)",
  "English (programmer Dvorak)": "US (Dvp)",
  "English (South Africa)": "ZA",
  "English (the divide/multiply toggle the layout)": "US (Olpc2)",
  "English (UK, Colemak-DH)": "GB (Colemak Dh)",
  "English (UK, Colemak)": "GB (Colemak)",
  "English (UK, Dvorak, with UK punctuation)": "GB (Dvorakukp)",
  "English (UK, Dvorak)": "GB (Dvorak)",
  "English (UK, extended, Windows)": "GB (Extd)",
  "English (UK, intl., with dead keys)": "GB (Intl)",
  "English (UK, Macintosh, intl.)": "GB (Mac Intl)",
  "English (UK, Macintosh)": "GB (Mac)",
  "English (UK)": "GB",
  "English (US, alt. intl.)": "US (Alt-Intl)",
  "English (US, euro on 5)": "US (Euro)",
  "English (US, intl., with dead keys)": "US (Intl)",
  "English (US, Symbolic)": "US (Symbolic)",
  "English (US)": "US",
  "English (Workman, intl., with dead keys)": "US (Workman-Intl)",
  "English (Workman)": "US (Workman)",
  Esperanto: "EPO",
  "Esperanto (Brazil, Nativo)": "BR (Nativo-Epo)",
  "Esperanto (legacy)": "EPO (Legacy)",
  "Esperanto (Portugal, Nativo)": "PT (Nativo-Epo)",
  Estonian: "EE",
  "Estonian (Dvorak)": "EE (Dvorak)",
  "Estonian (no dead keys)": "EE (Nodeadkeys)",
  "Estonian (US)": "EE (Us)",
  Ewe: "GH (Ewe)",
  Faroese: "FO",
  "Faroese (no dead keys)": "FO (Nodeadkeys)",
  Filipino: "PH",
  "Filipino (Capewell-Dvorak, Baybayin)": "PH (Capewell-Dvorak-Bay)",
  "Filipino (Capewell-Dvorak, Latin)": "PH (Capewell-Dvorak)",
  "Filipino (Capewell-QWERF 2006, Baybayin)": "PH (Capewell-Qwerf2k6-Bay)",
  "Filipino (Capewell-QWERF 2006, Latin)": "PH (Capewell-Qwerf2k6)",
  "Filipino (Colemak, Baybayin)": "PH (Colemak-Bay)",
  "Filipino (Colemak, Latin)": "PH (Colemak)",
  "Filipino (Dvorak, Baybayin)": "PH (Dvorak-Bay)",
  "Filipino (Dvorak, Latin)": "PH (Dvorak)",
  "Filipino (QWERTY, Baybayin)": "PH (Qwerty-Bay)",
  Finnish: "FI",
  "Finnish (classic, no dead keys)": "FI (Nodeadkeys)",
  "Finnish (classic)": "FI (Classic)",
  "Finnish (Macintosh)": "FI (Mac)",
  "Finnish (Windows)": "FI (Winkeys)",
  French: "FR",
  "French (alt., Latin-9 only)": "FR (Oss Latin9)",
  "French (alt., no dead keys)": "FR (Oss Nodeadkeys)",
  "French (alt.)": "FR (Oss)",
  "French (AZERTY, AFNOR)": "FR (Afnor)",
  "French (AZERTY)": "FR (Azerty)",
  "French (BEPO, AFNOR)": "FR (Bepo Afnor)",
  "French (BEPO, Latin-9 only)": "FR (Bepo Latin9)",
  "French (BEPO)": "FR (Bepo)",
  "French (Cameroon)": "CM (French)",
  "French (Canada, Dvorak)": "CA (Fr-Dvorak)",
  "French (Canada, legacy)": "CA (Fr-Legacy)",
  "French (Canada)": "CA",
  "French (Democratic Republic of the Congo)": "CD",
  "French (Dvorak)": "FR (Dvorak)",
  "French (legacy, alt., no dead keys)": "FR (Latin9 Nodeadkeys)",
  "French (legacy, alt.)": "FR (Latin9)",
  "French (Macintosh)": "FR (Mac)",
  "French (Mali, alt.)": "ML (Fr-Oss)",
  "French (Morocco)": "MA (French)",
  "French (no dead keys)": "FR (Nodeadkeys)",
  "French (Switzerland, Macintosh)": "CH (Fr Mac)",
  "French (Switzerland, no dead keys)": "CH (Fr Nodeadkeys)",
  "French (Switzerland)": "CH (Fr)",
  "French (Togo)": "TG",
  "French (US)": "FR (Us)",
  "Friulian (Italy)": "IT (Fur)",
  Fula: "GH (Fula)",
  Ga: "GH (Ga)",
  Georgian: "GE",
  "Georgian (ergonomic)": "GE (Ergonomic)",
  "Georgian (France, AZERTY Tskapo)": "FR (Geo)",
  "Georgian (Italy)": "IT (Geo)",
  "Georgian (MESS)": "GE (Mess)",
  German: "DE",
  "German (Austria, Macintosh)": "AT (Mac)",
  "German (Austria, no dead keys)": "AT (Nodeadkeys)",
  "German (Austria)": "AT",
  "German (dead acute)": "DE (Deadacute)",
  "German (dead grave acute)": "DE (Deadgraveacute)",
  "German (dead tilde)": "DE (Deadtilde)",
  "German (Dvorak)": "DE (Dvorak)",
  "German (E1)": "DE (E1)",
  "German (E2)": "DE (E2)",
  "German (Macintosh, no dead keys)": "DE (Mac Nodeadkeys)",
  "German (Macintosh)": "DE (Mac)",
  "German (Neo 2)": "DE (Neo)",
  "German (no dead keys)": "DE (Nodeadkeys)",
  "German (QWERTY)": "DE (Qwerty)",
  "German (Switzerland, legacy)": "CH (Legacy)",
  "German (Switzerland, Macintosh)": "CH (De Mac)",
  "German (Switzerland, no dead keys)": "CH (De Nodeadkeys)",
  "German (Switzerland)": "CH",
  "German (T3)": "DE (T3)",
  "German (US)": "DE (Us)",
  Greek: "GR",
  "Greek (extended)": "GR (Extended)",
  "Greek (no dead keys)": "GR (Nodeadkeys)",
  "Greek (polytonic)": "GR (Polytonic)",
  "Greek (simple)": "GR (Simple)",
  Gujarati: "IN (Guj)",
  "Hanyu Pinyin Letters (with AltGr dead keys)": "CN (Altgr-Pinyin)",
  "Hausa (Ghana)": "GH (Hausa)",
  "Hausa (Nigeria)": "NG (Hausa)",
  Hawaiian: "US (Haw)",
  Hebrew: "IL",
  "Hebrew (Biblical, Tiro)": "IL (Biblical)",
  "Hebrew (lyx)": "IL (Lyx)",
  "Hebrew (phonetic)": "IL (Phonetic)",
  "Hindi (Bolnagri)": "IN (Bolnagri)",
  "Hindi (KaGaPa, phonetic)": "IN (Hin-Kagapa)",
  "Hindi (Wx)": "IN (Hin-Wx)",
  Hungarian: "HU",
  "Hungarian (no dead keys)": "HU (Nodeadkeys)",
  "Hungarian (QWERTY, 101-key, comma, dead keys)": "HU (101 Qwerty Comma Dead)",
  "Hungarian (QWERTY, 101-key, comma, no dead keys)": "HU (101 Qwerty Comma Nodead)",
  "Hungarian (QWERTY, 101-key, dot, dead keys)": "HU (101 Qwerty Dot Dead)",
  "Hungarian (QWERTY, 101-key, dot, no dead keys)": "HU (101 Qwerty Dot Nodead)",
  "Hungarian (QWERTY, 102-key, comma, dead keys)": "HU (102 Qwerty Comma Dead)",
  "Hungarian (QWERTY, 102-key, comma, no dead keys)": "HU (102 Qwerty Comma Nodead)",
  "Hungarian (QWERTY, 102-key, dot, dead keys)": "HU (102 Qwerty Dot Dead)",
  "Hungarian (QWERTY, 102-key, dot, no dead keys)": "HU (102 Qwerty Dot Nodead)",
  "Hungarian (QWERTY)": "HU (Qwerty)",
  "Hungarian (QWERTZ, 101-key, comma, dead keys)": "HU (101 Qwertz Comma Dead)",
  "Hungarian (QWERTZ, 101-key, comma, no dead keys)": "HU (101 Qwertz Comma Nodead)",
  "Hungarian (QWERTZ, 101-key, dot, dead keys)": "HU (101 Qwertz Dot Dead)",
  "Hungarian (QWERTZ, 101-key, dot, no dead keys)": "HU (101 Qwertz Dot Nodead)",
  "Hungarian (QWERTZ, 102-key, comma, dead keys)": "HU (102 Qwertz Comma Dead)",
  "Hungarian (QWERTZ, 102-key, comma, no dead keys)": "HU (102 Qwertz Comma Nodead)",
  "Hungarian (QWERTZ, 102-key, dot, dead keys)": "HU (102 Qwertz Dot Dead)",
  "Hungarian (QWERTZ, 102-key, dot, no dead keys)": "HU (102 Qwertz Dot Nodead)",
  "Hungarian (standard)": "HU (Standard)",
  Icelandic: "IS",
  "Icelandic (Dvorak)": "IS (Dvorak)",
  "Icelandic (Macintosh, legacy)": "IS (Mac Legacy)",
  "Icelandic (Macintosh)": "IS (Mac)",
  Igbo: "NG (Igbo)",
  Indian: "IN",
  "Indic IPA": "IN (Iipa)",
  "Indonesian (Arab Melayu, extended phonetic)": "ID (Melayu-Phoneticx)",
  "Indonesian (Arab Melayu, phonetic)": "ID (Melayu-Phonetic)",
  "Indonesian (Arab Pegon, phonetic)": "ID (Pegon-Phonetic)",
  "Indonesian (Latin)": "ID",
  Inuktitut: "CA (Ike)",
  Iraqi: "IQ",
  Irish: "IE",
  "Irish (UnicodeExpert)": "IE (UnicodeExpert)",
  Italian: "IT",
  "Italian (IBM 142)": "IT (Ibm)",
  "Italian (intl., with dead keys)": "IT (Intl)",
  "Italian (Macintosh)": "IT (Mac)",
  "Italian (no dead keys)": "IT (Nodeadkeys)",
  "Italian (US)": "IT (Us)",
  "Italian (Windows)": "IT (Winkeys)",
  Japanese: "JP",
  "Japanese (Dvorak)": "JP (Dvorak)",
  "Japanese (Kana 86)": "JP (Kana86)",
  "Japanese (Kana)": "JP (Kana)",
  "Japanese (Macintosh)": "JP (Mac)",
  "Japanese (OADG 109A)": "JP (OADG109A)",
  Javanese: "ID (Javanese)",
  "Kabyle (AZERTY, with dead keys)": "DZ (Azerty-Deadkeys)",
  "Kabyle (QWERTY, UK, with dead keys)": "DZ (Qwerty-Gb-Deadkeys)",
  "Kabyle (QWERTY, US, with dead keys)": "DZ (Qwerty-Us-Deadkeys)",
  Kalmyk: "RU (Xal)",
  Kannada: "IN (Kan)",
  "Kannada (KaGaPa, phonetic)": "IN (Kan-Kagapa)",
  Kashubian: "PL (Csb)",
  Kazakh: "KZ",
  "Kazakh (extended)": "KZ (Ext)",
  "Kazakh (Latin)": "KZ (Latin)",
  "Kazakh (with Russian)": "KZ (Kazrus)",
  "Khmer (Cambodia)": "KH",
  Kikuyu: "KE (Kik)",
  Komi: "RU (Kom)",
  Korean: "KR",
  "Korean (101/104-key compatible)": "KR (Kr104)",
  "Kurdish (Iran, Arabic-Latin)": "IR (Ku Ara)",
  "Kurdish (Iran, F)": "IR (Ku F)",
  "Kurdish (Iran, Latin Alt-Q)": "IR (Ku Alt)",
  "Kurdish (Iran, Latin Q)": "IR (Ku)",
  "Kurdish (Iraq, Arabic-Latin)": "IQ (Ku Ara)",
  "Kurdish (Iraq, F)": "IQ (Ku F)",
  "Kurdish (Iraq, Latin Alt-Q)": "IQ (Ku Alt)",
  "Kurdish (Iraq, Latin Q)": "IQ (Ku)",
  "Kurdish (Syria, F)": "SY (Ku F)",
  "Kurdish (Syria, Latin Alt-Q)": "SY (Ku Alt)",
  "Kurdish (Syria, Latin Q)": "SY (Ku)",
  "Kurdish (Turkey, F)": "TR (Ku F)",
  "Kurdish (Turkey, Latin Alt-Q)": "TR (Ku Alt)",
  "Kurdish (Turkey, Latin Q)": "TR (Ku)",
  Kyrgyz: "KG",
  "Kyrgyz (phonetic)": "KG (Phonetic)",
  Lao: "LA",
  "Lao (STEA)": "LA (Stea)",
  Latvian: "LV",
  "Latvian (adapted)": "LV (Adapted)",
  "Latvian (apostrophe)": "LV (Apostrophe)",
  "Latvian (ergonomic, \u016AGJRMV)": "LV (Ergonomic)",
  "Latvian (F)": "LV (Fkey)",
  "Latvian (modern)": "LV (Modern)",
  "Latvian (tilde)": "LV (Tilde)",
  Lithuanian: "LT",
  "Lithuanian (IBM LST 1205-92)": "LT (Ibm)",
  "Lithuanian (LEKP)": "LT (Lekp)",
  "Lithuanian (LEKPa)": "LT (Lekpa)",
  "Lithuanian (Ratise)": "LT (Ratise)",
  "Lithuanian (standard)": "LT (Std)",
  "Lithuanian (US)": "LT (Us)",
  "Lower Sorbian": "DE (Dsb)",
  "Lower Sorbian (QWERTZ)": "DE (Dsb Qwertz)",
  Macedonian: "MK",
  "Macedonian (no dead keys)": "MK (Nodeadkeys)",
  "Malay (Jawi, Arabic Keyboard)": "MY",
  "Malay (Jawi, phonetic)": "MY (Phonetic)",
  Malayalam: "IN (Mal)",
  "Malayalam (enhanced InScript, with rupee)": "IN (Mal Enhanced)",
  "Malayalam (Lalitha)": "IN (Mal Lalitha)",
  Maltese: "MT",
  "Maltese (UK, with AltGr overrides)": "MT (Alt-Gb)",
  "Maltese (US, with AltGr overrides)": "MT (Alt-Us)",
  "Maltese (US)": "MT (Us)",
  "Manipuri (Eeyek)": "IN (Eeyek)",
  Maori: "MAO",
  "Marathi (enhanced InScript)": "IN (Marathi)",
  "Marathi (KaGaPa, phonetic)": "IN (Mar-Kagapa)",
  Mari: "RU (Chm)",
  Mmuock: "CM (Mmuock)",
  Moldavian: "MD",
  "Moldavian (Gagauz)": "MD (Gag)",
  Mon: "MM (Mnw)",
  "Mon (A1)": "MM (Mnw-A1)",
  Mongolian: "MN",
  "Mongolian (Bichig)": "CN (Mon Trad)",
  "Mongolian (Galik)": "CN (Mon Trad Galik)",
  "Mongolian (Manchu Galik)": "CN (Mon Manchu Galik)",
  "Mongolian (Manchu)": "CN (Mon Trad Manchu)",
  "Mongolian (Todo Galik)": "CN (Mon Todo Galik)",
  "Mongolian (Todo)": "CN (Mon Trad Todo)",
  "Mongolian (Xibe)": "CN (Mon Trad Xibe)",
  Montenegrin: "ME",
  "Montenegrin (Cyrillic, with guillemets)": "ME (Cyrillicalternatequotes)",
  "Montenegrin (Cyrillic, ZE and ZHE swapped)": "ME (Cyrillicyz)",
  "Montenegrin (Cyrillic)": "ME (Cyrillic)",
  "Montenegrin (Latin, QWERTY)": "ME (Latinyz)",
  "Montenegrin (Latin, Unicode, QWERTY)": "ME (Latinunicodeyz)",
  "Montenegrin (Latin, Unicode)": "ME (Latinunicode)",
  "Montenegrin (Latin, with guillemets)": "ME (Latinalternatequotes)",
  "N'Ko (AZERTY)": "GN",
  Nepali: "NP",
  "Northern Saami (Finland)": "FI (Smi)",
  "Northern Saami (Norway, no dead keys)": "NO (Smi Nodeadkeys)",
  "Northern Saami (Norway)": "NO (Smi)",
  "Northern Saami (Sweden)": "SE (Smi)",
  Norwegian: "NO",
  "Norwegian (Colemak)": "NO (Colemak)",
  "Norwegian (Dvorak)": "NO (Dvorak)",
  "Norwegian (Macintosh, no dead keys)": "NO (Mac Nodeadkeys)",
  "Norwegian (Macintosh)": "NO (Mac)",
  "Norwegian (no dead keys)": "NO (Nodeadkeys)",
  "Norwegian (Windows)": "NO (Winkeys)",
  Occitan: "FR (Oci)",
  Ogham: "IE (Ogam)",
  "Ogham (IS434)": "IE (Ogam Is434)",
  "Ol Chiki": "IN (Olck)",
  "Old Turkic": "TR (Otk)",
  "Old Turkic (F)": "TR (Otkf)",
  Oriya: "IN (Ori)",
  "Oriya (Bolnagri)": "IN (Ori-Bolnagri)",
  "Oriya (Wx)": "IN (Ori-Wx)",
  "Ossetian (Georgia)": "GE (Os)",
  "Ossetian (legacy)": "RU (Os Legacy)",
  "Ossetian (Windows)": "RU (Os Winkeys)",
  "Ottoman (F)": "TR (Otf)",
  "Ottoman (Q)": "TR (Ot)",
  "Pannonian Rusyn": "RS (Rue)",
  Pashto: "AF (Ps)",
  "Pashto (Afghanistan, OLPC)": "AF (Ps-Olpc)",
  Persian: "IR",
  "Persian (with Persian keypad)": "IR (Pes Keypad)",
  Polish: "PL",
  "Polish (British keyboard)": "GB (Pl)",
  "Polish (Dvorak, with Polish quotes on key 1)": "PL (Dvorak Altquotes)",
  "Polish (Dvorak, with Polish quotes on quotemark key)": "PL (Dvorak Quotes)",
  "Polish (Dvorak)": "PL (Dvorak)",
  "Polish (legacy)": "PL (Legacy)",
  "Polish (programmer Dvorak)": "PL (Dvp)",
  "Polish (QWERTZ)": "PL (Qwertz)",
  Portuguese: "PT",
  "Portuguese (Brazil, Dvorak)": "BR (Dvorak)",
  "Portuguese (Brazil, IBM/Lenovo ThinkPad)": "BR (Thinkpad)",
  "Portuguese (Brazil, Nativo for US keyboards)": "BR (Nativo-Us)",
  "Portuguese (Brazil, Nativo)": "BR (Nativo)",
  "Portuguese (Brazil, no dead keys)": "BR (Nodeadkeys)",
  "Portuguese (Brazil)": "BR",
  "Portuguese (Macintosh, no dead keys)": "PT (Mac Nodeadkeys)",
  "Portuguese (Macintosh)": "PT (Mac)",
  "Portuguese (Nativo for US keyboards)": "PT (Nativo-Us)",
  "Portuguese (Nativo)": "PT (Nativo)",
  "Portuguese (no dead keys)": "PT (Nodeadkeys)",
  "Punjabi (Gurmukhi Jhelum)": "IN (Jhelum)",
  "Punjabi (Gurmukhi)": "IN (Guru)",
  Romanian: "RO",
  "Romanian (Germany, no dead keys)": "DE (Ro Nodeadkeys)",
  "Romanian (Germany)": "DE (Ro)",
  "Romanian (standard)": "RO (Std)",
  "Romanian (Windows)": "RO (Winkeys)",
  Russian: "RU",
  "Russian (Belarus)": "BY (Ru)",
  "Russian (Czech, phonetic)": "CZ (Rus)",
  "Russian (DOS)": "RU (Dos)",
  "Russian (engineering, EN)": "RU (Ruchey En)",
  "Russian (engineering, RU)": "RU (Ruchey Ru)",
  "Russian (Georgia)": "GE (Ru)",
  "Russian (Germany, phonetic)": "DE (Ru)",
  "Russian (Kazakhstan, with Kazakh)": "KZ (Ruskaz)",
  "Russian (legacy)": "RU (Legacy)",
  "Russian (Macintosh)": "RU (Mac)",
  "Russian (phonetic, AZERTY)": "RU (Phonetic Azerty)",
  "Russian (phonetic, Dvorak)": "RU (Phonetic Dvorak)",
  "Russian (phonetic, French)": "RU (Phonetic Fr)",
  "Russian (phonetic, Windows)": "RU (Phonetic Winkeys)",
  "Russian (phonetic, YAZHERTY)": "RU (Phonetic YAZHERTY)",
  "Russian (phonetic)": "RU (Phonetic)",
  "Russian (Poland, phonetic Dvorak)": "PL (Ru Phonetic Dvorak)",
  "Russian (Sweden, phonetic, no dead keys)": "SE (Rus Nodeadkeys)",
  "Russian (Sweden, phonetic)": "SE (Rus)",
  "Russian (typewriter, legacy)": "RU (Typewriter-Legacy)",
  "Russian (typewriter)": "RU (Typewriter)",
  "Russian (Ukraine, standard RSTU)": "UA (Rstu Ru)",
  "Russian (US, phonetic)": "US (Rus)",
  "Saisiyat (Taiwan)": "TW (Saisiyat)",
  Samogitian: "LT (Sgs)",
  "Sanskrit (KaGaPa, phonetic)": "IN (San-Kagapa)",
  "Scottish Gaelic": "GB (Gla)",
  Serbian: "RS",
  "Serbian (Cyrillic, with guillemets)": "RS (Alternatequotes)",
  "Serbian (Cyrillic, ZE and ZHE swapped)": "RS (Yz)",
  "Serbian (Latin, QWERTY)": "RS (Latinyz)",
  "Serbian (Latin, Unicode, QWERTY)": "RS (Latinunicodeyz)",
  "Serbian (Latin, Unicode)": "RS (Latinunicode)",
  "Serbian (Latin, with guillemets)": "RS (Latinalternatequotes)",
  "Serbian (Latin)": "RS (Latin)",
  "Serbian (Russia)": "RU (Srp)",
  "Serbo-Croatian (US)": "US (Hbs)",
  Shan: "MM (Shn)",
  "Shan (Zawgyi Tai)": "MM (Zgt)",
  Sicilian: "IT (Scn)",
  Silesian: "PL (Szl)",
  Sindhi: "PK (Snd)",
  "Sinhala (phonetic)": "LK",
  "Sinhala (US)": "LK (Us)",
  Slovak: "SK",
  "Slovak (extended backslash)": "SK (Bksl)",
  "Slovak (QWERTY, extended backslash)": "SK (Qwerty Bksl)",
  "Slovak (QWERTY)": "SK (Qwerty)",
  Slovenian: "SI",
  "Slovenian (US)": "SI (Us)",
  "Slovenian (with guillemets)": "SI (Alternatequotes)",
  Spanish: "ES",
  "Spanish (dead tilde)": "ES (Deadtilde)",
  "Spanish (Dvorak)": "ES (Dvorak)",
  "Spanish (Latin American, Colemak)": "LATAM (Colemak)",
  "Spanish (Latin American, dead tilde)": "LATAM (Deadtilde)",
  "Spanish (Latin American, Dvorak)": "LATAM (Dvorak)",
  "Spanish (Latin American, no dead keys)": "LATAM (Nodeadkeys)",
  "Spanish (Latin American)": "LATAM",
  "Spanish (Macintosh)": "ES (Mac)",
  "Spanish (no dead keys)": "ES (Nodeadkeys)",
  "Spanish (Windows)": "ES (Winkeys)",
  "Swahili (Kenya)": "KE",
  "Swahili (Tanzania)": "TZ",
  Swedish: "SE",
  "Swedish (Dvorak, intl.)": "SE (Us Dvorak)",
  "Swedish (Dvorak)": "SE (Dvorak)",
  "Swedish (Macintosh)": "SE (Mac)",
  "Swedish (no dead keys)": "SE (Nodeadkeys)",
  "Swedish (Svdvorak)": "SE (Svdvorak)",
  "Swedish (US)": "SE (Us)",
  "Swedish Sign Language": "SE (Swl)",
  Syriac: "SY (Syc)",
  "Syriac (phonetic)": "SY (Syc Phonetic)",
  Taiwanese: "TW",
  "Taiwanese (indigenous)": "TW (Indigenous)",
  Tajik: "TJ",
  "Tajik (legacy)": "TJ (Legacy)",
  "Tamil (InScript, with Arabic numerals)": "IN (Tam)",
  "Tamil (InScript, with Tamil numerals)": "IN (Tam Tamilnumbers)",
  "Tamil (Sri Lanka, TamilNet '99, TAB encoding)": "LK (Tam TAB)",
  "Tamil (Sri Lanka, TamilNet '99)": "LK (Tam Unicode)",
  "Tamil (TamilNet '99 with Tamil numerals)": "IN (Tamilnet Tamilnumbers)",
  "Tamil (TamilNet '99, TAB encoding)": "IN (Tamilnet TAB)",
  "Tamil (TamilNet '99, TSCII encoding)": "IN (Tamilnet TSCII)",
  "Tamil (TamilNet '99)": "IN (Tamilnet)",
  Tarifit: "MA (Rif)",
  Tatar: "RU (Tt)",
  Telugu: "IN (Tel)",
  "Telugu (KaGaPa, phonetic)": "IN (Tel-Kagapa)",
  "Telugu (Sarala)": "IN (Tel-Sarala)",
  Thai: "TH",
  "Thai (Pattachote)": "TH (Pat)",
  "Thai (TIS-820.2538)": "TH (Tis)",
  Tibetan: "CN (Tib)",
  "Tibetan (with ASCII numerals)": "CN (Tib Asciinum)",
  Tswana: "BW",
  Turkish: "TR",
  "Turkish (Alt-Q)": "TR (Alt)",
  "Turkish (E)": "TR (E)",
  "Turkish (F)": "TR (F)",
  "Turkish (Germany)": "DE (Tr)",
  "Turkish (intl., with dead keys)": "TR (Intl)",
  Turkmen: "TM",
  "Turkmen (Alt-Q)": "TM (Alt)",
  Udmurt: "RU (Udm)",
  Ukrainian: "UA",
  "Ukrainian (homophonic)": "UA (Homophonic)",
  "Ukrainian (legacy)": "UA (Legacy)",
  "Ukrainian (macOS)": "UA (MacOS)",
  "Ukrainian (phonetic)": "UA (Phonetic)",
  "Ukrainian (standard RSTU)": "UA (Rstu)",
  "Ukrainian (typewriter)": "UA (Typewriter)",
  "Ukrainian (Windows)": "UA (Winkeys)",
  "Urdu (alt. phonetic)": "IN (Urd-Phonetic3)",
  "Urdu (Pakistan, CRULP)": "PK (Urd-Crulp)",
  "Urdu (Pakistan, NLA)": "PK (Urd-Nla)",
  "Urdu (Pakistan)": "PK",
  "Urdu (phonetic)": "IN (Urd-Phonetic)",
  "Urdu (Windows)": "IN (Urd-Winkeys)",
  Uyghur: "CN (Ug)",
  Uzbek: "UZ",
  "Uzbek (Afghanistan, OLPC)": "AF (Uz-Olpc)",
  "Uzbek (Afghanistan)": "AF (Uz)",
  "Uzbek (Latin)": "UZ (Latin)",
  Vietnamese: "VN",
  "Vietnamese (France)": "VN (Fr)",
  "Vietnamese (US)": "VN (Us)",
  Wolof: "SN",
  Yakut: "RU (Sah)",
  Yoruba: "NG (Yoruba)",
  "Unknown Layout": "Unknown"
};

// src/components/bar/modules/kblayout/helpers/index.ts
var getKeyboardLayout = (layoutData, format3) => {
  const hyprctlDevices = JSON.parse(layoutData);
  const keyboards = hyprctlDevices["keyboards"];
  if (keyboards.length === 0) {
    return format3 === "code" ? "Unknown" : "Unknown Layout";
  }
  let mainKb = keyboards.find((kb) => kb.main);
  if (!mainKb) {
    mainKb = keyboards[keyboards.length - 1];
  }
  const layout = mainKb["active_keymap"];
  const foundLayout = layoutMap[layout];
  return format3 === "code" ? foundLayout || layout : layout;
};

// src/lib/shared/hookHandler.ts
function useHook(widget2, hookTarget, setup, signal2) {
  const passedWidget = widget2;
  let currentDisconnect = () => {
  };
  const executeSetup = () => {
    currentDisconnect();
    if (typeof setup === "function") {
      currentDisconnect = setup() || (() => {
      });
    }
  };
  const isConnectable = (target) => {
    return "connect" in target;
  };
  const isSubscribable = (target) => {
    return "subscribe" in target;
  };
  const hookIntoTarget = () => {
    if (signal2 && isConnectable(hookTarget)) {
      passedWidget.hook(hookTarget, signal2, executeSetup);
    } else if (isSubscribable(hookTarget)) {
      passedWidget.hook(hookTarget, executeSetup);
    }
  };
  executeSetup();
  hookIntoTarget();
}

// src/components/bar/modules/kblayout/index.tsx
var { label: label8, labelType: labelType4, icon: icon9, leftClick: leftClick7, rightClick: rightClick15, middleClick: middleClick15, scrollUp: scrollUp12, scrollDown: scrollDown12 } = options_default.bar.customModules.kbLayout;
function setLabel(self) {
  try {
    const devices = hyprlandService.message("j/devices");
    self.label = getKeyboardLayout(devices, labelType4.get());
  } catch (error) {
    console.error(error);
  }
}
var KbInput = () => {
  const keyboardModule = Module({
    textIcon: bind(icon9),
    tooltipText: "",
    labelHook: (self) => {
      useHook(
        self,
        hyprlandService,
        () => {
          setLabel(self);
        },
        "keyboard-layout"
      );
      useHook(self, labelType4, () => {
        setLabel(self);
      });
    },
    boxClass: "kblayout",
    showLabelBinding: bind(label8),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick7
          },
          onSecondaryClick: {
            cmd: rightClick15
          },
          onMiddleClick: {
            cmd: middleClick15
          },
          onScrollUp: {
            cmd: scrollUp12
          },
          onScrollDown: {
            cmd: scrollDown12
          }
        });
      }
    }
  });
  return keyboardModule;
};

// src/lib/poller/BashPoller.ts
var BashPoller = class {
  /**
   * Creates an instance of BashPoller.
   *
   * @param targetVariable - The target variable to poll.
   * @param trackers - An array of trackers to monitor.
   * @param pollingInterval - The interval at which polling occurs.
   * @param updateCommand - The command to update the target variable.
   * @param pollingFunction - The function to execute during each poll.
   * @param params - Additional parameters for the polling function.
   *
   * @example
   *
   * ```ts
   * //##################### EXAMPLE ##########################
   *  const updatesPoller = new BashPoller<string, []>(
   *    pendingUpdates,
   *    [bind(padZero), bind(postInputUpdater)],
   *    bind(pollingInterval),
   *    updateCommand.value,
   *    processUpdateCount,
   *  );
   * //#######################################################
   *
   * ```
   */
  constructor(targetVariable, trackers, pollingInterval10, updateCommand2, pollingFunction, ...params) {
    this.targetVariable = targetVariable;
    this.trackers = trackers;
    this.pollingInterval = pollingInterval10;
    this.updateCommand = updateCommand2;
    this.pollingFunction = pollingFunction;
    this.params = params;
    this.poller = new Poller(this.pollingInterval, this.trackers, this.execute);
  }
  poller;
  params;
  /**
   * Executes the bash command specified in the updateCommand property.
   *
   * The result of the command is processed by the pollingFunction and
   * assigned to the targetVariable.
   */
  execute = async () => {
    try {
      const res = await execAsync(`bash -c "${this.updateCommand}"`);
      this.targetVariable.set(await this.pollingFunction(res, ...this.params));
    } catch (error) {
      console.error(`Error executing bash command "${this.updateCommand}":`, error);
    }
  };
  /**
   * Starts the polling process.
   */
  start() {
    this.poller.start();
  }
  /**
   * Stops the polling process.
   */
  stop() {
    this.poller.stop();
  }
  /**
   * Initializes the poller with the specified module.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    this.poller.initialize(moduleName);
  }
};

// src/components/bar/modules/updates/index.tsx
var {
  updateCommand,
  label: label9,
  padZero,
  autoHide,
  pollingInterval: pollingInterval6,
  icon: icon10,
  leftClick: leftClick8,
  rightClick: rightClick16,
  middleClick: middleClick16,
  scrollUp: scrollUp13,
  scrollDown: scrollDown13
} = options_default.bar.customModules.updates;
var pendingUpdates = Variable("0");
var postInputUpdater = Variable(true);
var isVis2 = Variable(!autoHide.get());
var processUpdateCount = (updateCount) => {
  if (!padZero.get()) return updateCount;
  return `${updateCount.padStart(2, "0")}`;
};
var updatesPoller = new BashPoller(
  pendingUpdates,
  [bind(padZero), bind(postInputUpdater)],
  bind(pollingInterval6),
  updateCommand.get(),
  processUpdateCount
);
updatesPoller.initialize("updates");
Variable.derive([bind(autoHide)], (autoHideModule) => {
  isVis2.set(!autoHideModule || autoHideModule && parseFloat(pendingUpdates.get()) > 0);
});
var updatesIcon = Variable.derive(
  [bind(icon10.pending), bind(icon10.updated), bind(pendingUpdates)],
  (pendingIcon, updatedIcon, pUpdates) => {
    isVis2.set(!autoHide.get() || autoHide.get() && parseFloat(pUpdates) > 0);
    return parseFloat(pUpdates) === 0 ? updatedIcon : pendingIcon;
  }
);
var Updates = () => {
  const updatesModule = Module({
    textIcon: updatesIcon(),
    tooltipText: bind(pendingUpdates).as((v) => `${v} updates available`),
    boxClass: "updates",
    isVis: isVis2,
    label: bind(pendingUpdates),
    showLabelBinding: bind(label9),
    props: {
      setup: (self) => {
        inputHandler(
          self,
          {
            onPrimaryClick: {
              cmd: leftClick8
            },
            onSecondaryClick: {
              cmd: rightClick16
            },
            onMiddleClick: {
              cmd: middleClick16
            },
            onScrollUp: {
              cmd: scrollUp13
            },
            onScrollDown: {
              cmd: scrollDown13
            }
          },
          postInputUpdater
        );
      }
    }
  });
  return updatesModule;
};

// src/components/bar/modules/submap/helpers/index.ts
var isSubmapEnabled = (submap, enabled2, disabled) => {
  return submap !== "default" ? enabled2 : disabled;
};
var getInitialSubmap = (submapStatus2) => {
  let submap = hyprlandService.message("submap");
  const newLineCarriage = /\n/g;
  submap = submap.replace(newLineCarriage, "");
  if (submap === "unknown request") {
    submap = "default";
  }
  submapStatus2.set(submap);
};

// src/components/bar/modules/submap/index.tsx
var {
  label: label10,
  showSubmapName,
  enabledIcon,
  disabledIcon,
  enabledText,
  disabledText,
  leftClick: leftClick9,
  rightClick: rightClick17,
  middleClick: middleClick17,
  scrollUp: scrollUp14,
  scrollDown: scrollDown14
} = options_default.bar.customModules.submap;
var submapStatus = Variable("default");
hyprlandService.connect("submap", (_, currentSubmap) => {
  if (currentSubmap.length === 0) {
    submapStatus.set("default");
  } else {
    submapStatus.set(currentSubmap);
  }
});
getInitialSubmap(submapStatus);
var Submap = () => {
  const submapLabel = Variable.derive(
    [bind(submapStatus), bind(enabledText), bind(disabledText), bind(showSubmapName)],
    (status, enabled2, disabled, showSmName) => {
      if (showSmName) {
        return capitalizeFirstLetter(status);
      }
      return isSubmapEnabled(status, enabled2, disabled);
    }
  );
  const submapIcon = Variable.derive(
    [bind(submapStatus), bind(enabledIcon), bind(disabledIcon)],
    (status, enabled2, disabled) => {
      return isSubmapEnabled(status, enabled2, disabled);
    }
  );
  const submapModule = Module({
    textIcon: submapIcon(),
    tooltipText: submapLabel(),
    label: submapLabel(),
    showLabelBinding: bind(label10),
    boxClass: "submap",
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick9
          },
          onSecondaryClick: {
            cmd: rightClick17
          },
          onMiddleClick: {
            cmd: middleClick17
          },
          onScrollUp: {
            cmd: scrollUp14
          },
          onScrollDown: {
            cmd: scrollDown14
          }
        });
      },
      onDestroy: () => {
        submapLabel.drop();
        submapIcon.drop();
      }
    }
  });
  return submapModule;
};

// src/components/bar/modules/weather/index.tsx
var { label: label11, unit: unit2, leftClick: leftClick10, rightClick: rightClick18, middleClick: middleClick18, scrollUp: scrollUp15, scrollDown: scrollDown15 } = options_default.bar.customModules.weather;
var Weather = () => {
  const iconBinding = Variable.derive([bind(globalWeatherVar2)], (wthr) => {
    const weatherStatusIcon = getWeatherStatusTextIcon(wthr);
    return weatherStatusIcon;
  });
  const labelBinding = Variable.derive([bind(globalWeatherVar2), bind(unit2)], (wthr, unt) => {
    if (unt === "imperial") {
      return `${Math.ceil(wthr.current.temp_f)}\xB0 F`;
    } else {
      return `${Math.ceil(wthr.current.temp_c)}\xB0 C`;
    }
  });
  const weatherModule = Module({
    textIcon: iconBinding(),
    tooltipText: bind(globalWeatherVar2).as((v) => `Weather Status: ${v.current.condition.text}`),
    boxClass: "weather-custom",
    label: labelBinding(),
    showLabelBinding: bind(label11),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick10
          },
          onSecondaryClick: {
            cmd: rightClick18
          },
          onMiddleClick: {
            cmd: middleClick18
          },
          onScrollUp: {
            cmd: scrollUp15
          },
          onScrollDown: {
            cmd: scrollDown15
          }
        });
      },
      onDestroy: () => {
        iconBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return weatherModule;
};

// src/components/bar/modules/power/index.tsx
var { icon: icon11, leftClick: leftClick11, rightClick: rightClick19, middleClick: middleClick19, scrollUp: scrollUp16, scrollDown: scrollDown16 } = options_default.bar.customModules.power;
var Power = () => {
  const powerModule = Module({
    tooltipText: "Power Menu",
    textIcon: bind(icon11),
    showLabelBinding: Variable(false),
    boxClass: "powermodule",
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick11
          },
          onSecondaryClick: {
            cmd: rightClick19
          },
          onMiddleClick: {
            cmd: middleClick19
          },
          onScrollUp: {
            cmd: scrollUp16
          },
          onScrollDown: {
            cmd: scrollDown16
          }
        });
      }
    }
  });
  return powerModule;
};

// src/components/bar/modules/hyprsunset/helpers/index.ts
var { temperature } = options_default.bar.customModules.hyprsunset;
var isActiveCommand = `bash -c "pgrep -x 'hyprsunset' > /dev/null && echo 'yes' || echo 'no'"`;
var isActive = Variable(false);
var toggleSunset = (isActive3) => {
  execAsync(isActiveCommand).then((res) => {
    if (res === "no") {
      execAsync(`bash -c "nohup hyprsunset -t ${temperature.get()} > /dev/null 2>&1 &"`).then(() => {
        execAsync(isActiveCommand).then((res2) => {
          isActive3.set(res2 === "yes");
        });
      });
    } else {
      execAsync(`bash -c "pkill hyprsunset "`).then(() => {
        execAsync(isActiveCommand).then((res2) => {
          isActive3.set(res2 === "yes");
        });
      });
    }
  });
};
var checkSunsetStatus = () => {
  execAsync(isActiveCommand).then((res) => {
    isActive.set(res === "yes");
  });
};

// src/components/bar/modules/hyprsunset/index.tsx
var {
  label: label12,
  pollingInterval: pollingInterval7,
  onIcon,
  offIcon,
  onLabel,
  offLabel,
  rightClick: rightClick20,
  middleClick: middleClick20,
  scrollUp: scrollUp17,
  scrollDown: scrollDown17,
  temperature: temperature2
} = options_default.bar.customModules.hyprsunset;
var dummyVar2 = Variable(void 0);
checkSunsetStatus();
var sunsetPoller = new FunctionPoller(dummyVar2, [], bind(pollingInterval7), checkSunsetStatus);
sunsetPoller.initialize("hyprsunset");
var throttledToggleSunset = throttleInput(() => toggleSunset(isActive), 1e3);
var Hyprsunset = () => {
  const iconBinding = Variable.derive([bind(isActive), bind(onIcon), bind(offIcon)], (active3, onIcn, offIcn) => {
    return active3 ? onIcn : offIcn;
  });
  const tooltipBinding = Variable.derive([isActive, temperature2], (active3, temp) => {
    return `Hyprsunset ${active3 ? "enabled" : "disabled"}
Temperature: ${temp}`;
  });
  const labelBinding = Variable.derive([bind(isActive), bind(onLabel), bind(offLabel)], (active3, onLbl, offLbl) => {
    return active3 ? onLbl : offLbl;
  });
  const hyprsunsetModule = Module({
    textIcon: iconBinding(),
    tooltipText: tooltipBinding(),
    boxClass: "hyprsunset",
    label: labelBinding(),
    showLabelBinding: bind(label12),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            fn: () => {
              throttledToggleSunset();
            }
          },
          onSecondaryClick: {
            cmd: rightClick20
          },
          onMiddleClick: {
            cmd: middleClick20
          },
          onScrollUp: {
            cmd: scrollUp17
          },
          onScrollDown: {
            cmd: scrollDown17
          }
        });
      },
      onDestroy: () => {
        iconBinding.drop();
        tooltipBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return hyprsunsetModule;
};

// src/components/bar/modules/hypridle/helpers/index.ts
var isActiveCommand2 = `bash -c "pgrep -x 'hypridle' &>/dev/null && echo 'yes' || echo 'no'"`;
var isActive2 = Variable(false);
var updateIsActive = (isActive3) => {
  execAsync(isActiveCommand2).then((res) => {
    isActive3.set(res === "yes");
  });
};
var toggleIdle = (isActive3) => {
  execAsync(isActiveCommand2).then((res) => {
    const toggleIdleCommand = res === "no" ? `bash -c "nohup hypridle > /dev/null 2>&1 &"` : `bash -c "pkill hypridle"`;
    execAsync(toggleIdleCommand).then(() => updateIsActive(isActive3));
  });
};
var checkIdleStatus = () => {
  execAsync(isActiveCommand2).then((res) => {
    isActive2.set(res === "yes");
  });
};

// src/components/bar/modules/hypridle/index.tsx
var { label: label13, pollingInterval: pollingInterval8, onIcon: onIcon2, offIcon: offIcon2, onLabel: onLabel2, offLabel: offLabel2, rightClick: rightClick21, middleClick: middleClick21, scrollUp: scrollUp18, scrollDown: scrollDown18 } = options_default.bar.customModules.hypridle;
var dummyVar3 = variable_default(void 0);
checkIdleStatus();
var idleStatusPoller = new FunctionPoller(dummyVar3, [], bind(pollingInterval8), checkIdleStatus);
idleStatusPoller.initialize("hypridle");
var throttledToggleIdle = throttleInput(() => toggleIdle(isActive2), 1e3);
var Hypridle = () => {
  const iconBinding = variable_default.derive([bind(isActive2), bind(onIcon2), bind(offIcon2)], (active3, onIcn, offIcn) => {
    return active3 ? onIcn : offIcn;
  });
  const labelBinding = variable_default.derive([bind(isActive2), bind(onLabel2), bind(offLabel2)], (active3, onLbl, offLbl) => {
    return active3 ? onLbl : offLbl;
  });
  const hypridleModule = Module({
    textIcon: iconBinding(),
    tooltipText: bind(isActive2).as((active3) => `Hypridle ${active3 ? "enabled" : "disabled"}`),
    boxClass: "hypridle",
    label: labelBinding(),
    showLabelBinding: bind(label13),
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            fn: () => {
              throttledToggleIdle();
            }
          },
          onSecondaryClick: {
            cmd: rightClick21
          },
          onMiddleClick: {
            cmd: middleClick21
          },
          onScrollUp: {
            cmd: scrollUp18
          },
          onScrollDown: {
            cmd: scrollDown18
          }
        });
      },
      onDestroy: () => {
        iconBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return hypridleModule;
};

// src/components/bar/modules/cava/helpers.ts
var {
  showActiveOnly,
  bars,
  autoSensitivity,
  lowCutoff,
  highCutoff,
  noiseReduction,
  stereo,
  channels,
  framerate,
  samplerate
} = options_default.bar.customModules.cava;
function initVisibilityTracker(isVis4) {
  Variable.derive([bind(showActiveOnly), bind(mprisService, "players")], (showActive, players) => {
    isVis4.set(cavaService !== null && (!showActive || players?.length > 0));
  });
}
function initSettingsTracker() {
  const cava = cavaService;
  if (!cava) {
    return;
  }
  Variable.derive(
    [
      bind(bars),
      bind(channels),
      bind(framerate),
      bind(samplerate),
      bind(autoSensitivity),
      bind(lowCutoff),
      bind(highCutoff),
      bind(noiseReduction),
      bind(stereo)
    ],
    (bars2, channels2, framerate2, samplerate2, autoSens, lCutoff, hCutoff, noiseRed, isStereo) => {
      cava.set_autosens(autoSens);
      cava.set_low_cutoff(lCutoff);
      cava.set_high_cutoff(hCutoff);
      cava.set_noise_reduction(noiseRed);
      cava.set_source("auto");
      cava.set_stereo(isStereo);
      cava.set_bars(bars2);
      cava.set_channels(channels2);
      cava.set_framerate(framerate2);
      cava.set_samplerate(samplerate2);
    }
  );
}

// src/components/bar/modules/cava/index.tsx
var {
  icon: icon12,
  showIcon: label14,
  showActiveOnly: showActiveOnly2,
  barCharacters,
  spaceCharacter,
  leftClick: leftClick12,
  rightClick: rightClick22,
  middleClick: middleClick22,
  scrollUp: scrollUp19,
  scrollDown: scrollDown19
} = options_default.bar.customModules.cava;
var isVis3 = Variable(!showActiveOnly2.get());
initVisibilityTracker(isVis3);
initSettingsTracker();
var Cava = () => {
  let labelBinding = Variable("");
  if (cavaService) {
    labelBinding = Variable.derive(
      [bind(cavaService, "values"), bind(spaceCharacter), bind(barCharacters)],
      (values, spacing2, blockCharacters) => {
        const valueMap = values.map((v) => {
          const index = Math.floor(v * blockCharacters.length);
          return blockCharacters[Math.min(index, blockCharacters.length - 1)];
        }).join(spacing2);
        return valueMap;
      }
    );
  }
  return Module({
    isVis: isVis3,
    label: labelBinding(),
    showIconBinding: bind(label14),
    textIcon: bind(icon12),
    boxClass: "cava",
    props: {
      setup: (self) => {
        inputHandler(self, {
          onPrimaryClick: {
            cmd: leftClick12
          },
          onSecondaryClick: {
            cmd: rightClick22
          },
          onMiddleClick: {
            cmd: middleClick22
          },
          onScrollUp: {
            cmd: scrollUp19
          },
          onScrollDown: {
            cmd: scrollDown19
          }
        });
      },
      onDestroy: () => {
        labelBinding.drop();
      }
    }
  });
};

// src/components/bar/shared/WidgetContainer.tsx
var computeVisible = (child) => {
  if (child.isVis !== void 0) {
    return bind(child.isVis);
  }
  return child.isVisible;
};
var WidgetContainer = (child) => {
  const buttonClassName = bind(options_default.theme.bar.buttons.style).as((style3) => {
    const styleMap2 = {
      default: "style1",
      split: "style2",
      wave: "style3",
      wave2: "style4"
    };
    const boxClassName = Object.hasOwnProperty.call(child, "boxClass") ? child.boxClass : "";
    return `bar_item_box_visible ${styleMap2[style3]} ${boxClassName}`;
  });
  if (child.isBox) {
    return /* @__PURE__ */ jsx2("eventbox", { visible: computeVisible(child), ...child.props, children: /* @__PURE__ */ jsx2("box", { className: buttonClassName, children: child.component }) });
  }
  return /* @__PURE__ */ jsx2("button", { className: buttonClassName, visible: computeVisible(child), ...child.props, children: child.component });
};

// src/components/bar/index.tsx
import Astal11 from "gi://Astal?version=3.0";

// src/components/bar/utils/monitors.ts
var getLayoutForMonitor = (monitor3, layouts3) => {
  const matchingKey = Object.keys(layouts3).find((key2) => key2 === monitor3.toString());
  const wildcard = Object.keys(layouts3).find((key2) => key2 === "*");
  if (matchingKey) {
    return layouts3[matchingKey];
  }
  if (wildcard) {
    return layouts3[wildcard];
  }
  return {
    left: ["dashboard", "workspaces", "windowtitle"],
    middle: ["media"],
    right: ["volume", "network", "bluetooth", "battery", "systray", "clock", "notifications"]
  };
};
var isLayoutEmpty = (layout) => {
  const isLeftSectionEmpty = !Array.isArray(layout.left) || layout.left.length === 0;
  const isRightSectionEmpty = !Array.isArray(layout.right) || layout.right.length === 0;
  const isMiddleSectionEmpty = !Array.isArray(layout.middle) || layout.middle.length === 0;
  return isLeftSectionEmpty && isRightSectionEmpty && isMiddleSectionEmpty;
};
function getGdkMonitors() {
  const display = Gdk.Display.get_default();
  if (display === null) {
    console.error("Failed to get Gdk display.");
    return {};
  }
  const numGdkMonitors = display.get_n_monitors();
  const gdkMonitors = {};
  for (let i = 0; i < numGdkMonitors; i++) {
    const curMonitor2 = display.get_monitor(i);
    if (curMonitor2 === null) {
      console.warn(`Monitor at index ${i} is null.`);
      continue;
    }
    const model = curMonitor2.get_model() || "";
    const geometry = curMonitor2.get_geometry();
    const scaleFactor = curMonitor2.get_scale_factor();
    const key2 = `${model}_${geometry.width}x${geometry.height}_${scaleFactor}`;
    gdkMonitors[i] = { key: key2, model, used: false };
  }
  return gdkMonitors;
}
var gdkMonitorIdToHyprlandId = (monitor3, usedHyprlandMonitors) => {
  const gdkMonitors = getGdkMonitors();
  if (Object.keys(gdkMonitors).length === 0) {
    return monitor3;
  }
  const gdkMonitor = gdkMonitors[monitor3];
  const directMatch = hyprlandService.get_monitors().find((hypMon) => {
    const isVertical = hypMon?.transform !== void 0 ? hypMon.transform % 2 !== 0 : false;
    const width = isVertical ? hypMon.height : hypMon.width;
    const height = isVertical ? hypMon.width : hypMon.height;
    const hyprlandKey = `${hypMon.model}_${width}x${height}_${hypMon.scale}`;
    return gdkMonitor.key.startsWith(hyprlandKey) && !usedHyprlandMonitors.has(hypMon.id) && hypMon.id === monitor3;
  });
  if (directMatch) {
    usedHyprlandMonitors.add(directMatch.id);
    return directMatch.id;
  }
  const hyprlandMonitor = hyprlandService.get_monitors().find((hypMon) => {
    const isVertical = hypMon?.transform !== void 0 ? hypMon.transform % 2 !== 0 : false;
    const width = isVertical ? hypMon.height : hypMon.width;
    const height = isVertical ? hypMon.width : hypMon.height;
    const hyprlandKey = `${hypMon.model}_${width}x${height}_${hypMon.scale}`;
    return gdkMonitor.key.startsWith(hyprlandKey) && !usedHyprlandMonitors.has(hypMon.id);
  });
  if (hyprlandMonitor) {
    usedHyprlandMonitors.add(hyprlandMonitor.id);
    return hyprlandMonitor.id;
  }
  const fallbackMonitor = hyprlandService.get_monitors().find((hypMon) => !usedHyprlandMonitors.has(hypMon.id));
  if (fallbackMonitor) {
    usedHyprlandMonitors.add(fallbackMonitor.id);
    return fallbackMonitor.id;
  }
  for (let i = 0; i < hyprlandService.get_monitors().length; i++) {
    if (!usedHyprlandMonitors.has(i)) {
      usedHyprlandMonitors.add(i);
      return i;
    }
  }
  console.warn(`Returning original monitor index as a last resort: ${monitor3}`);
  return monitor3;
};

// src/components/bar/index.tsx
var { layouts: layouts2 } = options_default.bar;
var { location: location3 } = options_default.theme.bar;
var { location: borderLocation } = options_default.theme.bar.border;
var widget = {
  battery: () => WidgetContainer(BatteryLabel()),
  dashboard: () => WidgetContainer(Menu()),
  workspaces: (monitor3) => WidgetContainer(Workspaces(monitor3)),
  windowtitle: () => WidgetContainer(ClientTitle()),
  media: () => WidgetContainer(Media()),
  notifications: () => WidgetContainer(Notifications()),
  volume: () => WidgetContainer(Volume()),
  network: () => WidgetContainer(Network()),
  bluetooth: () => WidgetContainer(Bluetooth()),
  clock: () => WidgetContainer(Clock()),
  systray: () => WidgetContainer(SysTray()),
  ram: () => WidgetContainer(Ram()),
  cpu: () => WidgetContainer(Cpu()),
  cputemp: () => WidgetContainer(CpuTemp()),
  storage: () => WidgetContainer(Storage()),
  netstat: () => WidgetContainer(Netstat()),
  kbinput: () => WidgetContainer(KbInput()),
  updates: () => WidgetContainer(Updates()),
  submap: () => WidgetContainer(Submap()),
  weather: () => WidgetContainer(Weather()),
  power: () => WidgetContainer(Power()),
  hyprsunset: () => WidgetContainer(Hyprsunset()),
  hypridle: () => WidgetContainer(Hypridle()),
  cava: () => WidgetContainer(Cava())
};
var Bar = /* @__PURE__ */ (() => {
  const usedHyprlandMonitors = /* @__PURE__ */ new Set();
  return (monitor3) => {
    const hyprlandMonitor = gdkMonitorIdToHyprlandId(monitor3, usedHyprlandMonitors);
    const computeVisibility = bind(layouts2).as(() => {
      const foundLayout = getLayoutForMonitor(hyprlandMonitor, layouts2.get());
      return !isLayoutEmpty(foundLayout);
    });
    const computeAnchor = bind(location3).as((loc) => {
      if (loc === "bottom") {
        return Astal11.WindowAnchor.BOTTOM | Astal11.WindowAnchor.LEFT | Astal11.WindowAnchor.RIGHT;
      }
      return Astal11.WindowAnchor.TOP | Astal11.WindowAnchor.LEFT | Astal11.WindowAnchor.RIGHT;
    });
    const computeLayer = Variable.derive([bind(options_default.theme.bar.layer), bind(options_default.tear)], (barLayer, tear2) => {
      if (tear2 && barLayer === "overlay") {
        return Astal11.Layer.TOP;
      }
      const layerMap = {
        overlay: Astal11.Layer.OVERLAY,
        top: Astal11.Layer.TOP,
        bottom: Astal11.Layer.BOTTOM,
        background: Astal11.Layer.BACKGROUND
      };
      return layerMap[barLayer];
    });
    const computeBorderLocation = bind(borderLocation).as(
      (brdrLcn) => brdrLcn !== "none" ? "bar-panel withBorder" : "bar-panel"
    );
    const leftBinding = Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(hyprlandMonitor, currentLayouts);
      return foundLayout.left.filter((mod) => Object.keys(widget).includes(mod)).map((w) => widget[w](hyprlandMonitor));
    });
    const middleBinding = Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(hyprlandMonitor, currentLayouts);
      return foundLayout.middle.filter((mod) => Object.keys(widget).includes(mod)).map((w) => widget[w](hyprlandMonitor));
    });
    const rightBinding = Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(hyprlandMonitor, currentLayouts);
      return foundLayout.right.filter((mod) => Object.keys(widget).includes(mod)).map((w) => widget[w](hyprlandMonitor));
    });
    return /* @__PURE__ */ jsx2(
      "window",
      {
        name: `bar-${hyprlandMonitor}`,
        namespace: `bar-${hyprlandMonitor}`,
        className: "bar",
        application: app_default,
        monitor: monitor3,
        visible: computeVisibility,
        anchor: computeAnchor,
        layer: computeLayer(),
        exclusivity: Astal11.Exclusivity.EXCLUSIVE,
        onDestroy: () => {
          computeLayer.drop();
          leftBinding.drop();
          middleBinding.drop();
          rightBinding.drop();
        },
        children: /* @__PURE__ */ jsx2("box", { className: "bar-panel-container", children: /* @__PURE__ */ jsx2(
          "centerbox",
          {
            css: "padding: 1px;",
            hexpand: true,
            className: computeBorderLocation,
            startWidget: /* @__PURE__ */ jsx2("box", { className: "box-left", hexpand: true, children: leftBinding() }),
            centerWidget: /* @__PURE__ */ jsx2("box", { className: "box-center", halign: Gtk4.Align.CENTER, children: middleBinding() }),
            endWidget: /* @__PURE__ */ jsx2("box", { className: "box-right", halign: Gtk4.Align.END, children: rightBinding() })
          }
        ) })
      }
    );
  };
})();

// src/globals/window.ts
var WINDOW_LAYOUTS = [
  "center",
  "top",
  "top-right",
  "top-center",
  "top-left",
  "bottom-left",
  "bottom-center",
  "bottom-right"
];

// src/components/menus/shared/popup/index.tsx
var Padding = ({ name: name2, opts }) => /* @__PURE__ */ jsx2(
  "eventbox",
  {
    className: opts?.className ?? "",
    hexpand: true,
    vexpand: typeof opts?.vexpand === "boolean" ? opts.vexpand : true,
    canFocus: false,
    setup: (self) => self.connect("button-press-event", () => app_default.toggle_window(name2)),
    children: /* @__PURE__ */ jsx2("box", {})
  }
);
var PopupRevealer = ({ name: name2, child, transition: transition10 }) => /* @__PURE__ */ jsx2("box", { css: "padding: 1px", children: /* @__PURE__ */ jsx2(
  "revealer",
  {
    transitionType: transition10,
    transition_duration: 200,
    setup: (self) => {
      app_default.connect("window-toggled", (app) => {
        self.revealChild = app.get_window(name2)?.is_visible() ?? false;
      });
    },
    children: /* @__PURE__ */ jsx2("box", { className: `window-content ${name2}-window`, children: child })
  }
) });
var Layout = (name2, child, transition10) => ({
  center: () => /* @__PURE__ */ jsxs("centerbox", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("centerbox", { vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  top: () => /* @__PURE__ */ jsxs("centerbox", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "top-right": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] })
  ] }),
  "top-center": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2, opts: { vexpand: false, className: "event-top-padding" } }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "top-left": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-left": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-center": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-right": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] })
  ] })
});
var isValidLayout = (layout) => {
  return WINDOW_LAYOUTS.includes(layout);
};
var popup_default = ({
  name: name2,
  child,
  layout = "center",
  transition: transition10 = "none",
  exclusivity = "ignore",
  ...props
}) => {
  const layoutFn = isValidLayout(layout) ? layout : "center";
  const layoutWidget = Layout(name2, child, transition10)[layoutFn]();
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: name2,
      namespace: name2,
      className: `${name2} popup-window`,
      onKeyPressEvent: (_, event) => {
        const key2 = event.get_keyval()[1];
        if (key2 === Gdk.KEY_Escape) {
          app_default.get_window(name2)?.set_visible(false);
        }
      },
      visible: false,
      keymode: Astal7.Keymode.ON_DEMAND,
      exclusivity,
      application: app_default,
      layer: Astal7.Layer.TOP,
      anchor: Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.RIGHT | Astal7.WindowAnchor.LEFT,
      ...props,
      children: layoutWidget
    }
  );
};

// src/components/menus/power/helpers/actions.ts
var { sleep, reboot, logout, shutdown } = options_default.menus.dashboard.powermenu;
var _title, _cmd;
var PowerMenu = class extends GObject4.Object {
  constructor() {
    super(...arguments);
    __privateAdd(this, _title, "");
    __privateAdd(this, _cmd, "");
    __publicField(this, "shutdown", () => {
      this.action("shutdown");
    });
    __publicField(this, "exec", () => {
      app_default.get_window("verification")?.set_visible(false);
      execAsync(__privateGet(this, _cmd));
    });
  }
  get title() {
    return __privateGet(this, _title);
  }
  get cmd() {
    return __privateGet(this, _cmd);
  }
  action(action) {
    [__privateWrapper(this, _cmd)._, __privateWrapper(this, _title)._] = {
      sleep: [sleep.get(), "Sleep"],
      reboot: [reboot.get(), "Reboot"],
      logout: [logout.get(), "Log Out"],
      shutdown: [shutdown.get(), "Shutdown"]
    }[action];
    this.notify("cmd");
    this.notify("title");
    app_default.get_window("powermenu")?.set_visible(false);
    app_default.get_window("verification")?.set_visible(true);
  }
  customAction(action, cmnd) {
    [__privateWrapper(this, _cmd)._, __privateWrapper(this, _title)._] = [cmnd, action];
    this.notify("cmd");
    this.notify("title");
    app_default.get_window("powermenu")?.set_visible(false);
    app_default.get_window("verification")?.set_visible(true);
  }
};
_title = new WeakMap();
_cmd = new WeakMap();
__decorateClass([
  property(String)
], PowerMenu.prototype, "title", 1);
__decorateClass([
  property(String)
], PowerMenu.prototype, "cmd", 1);
PowerMenu = __decorateClass([
  register({ GTypeName: "PowerMenu" })
], PowerMenu);
var powermenu = new PowerMenu();
Object.assign(globalThis, { powermenu });
var actions_default = powermenu;

// src/lib/constants/options.ts
var StackTransitionMap = {
  none: Gtk4.StackTransitionType.NONE,
  crossfade: Gtk4.StackTransitionType.CROSSFADE,
  slide_right: Gtk4.StackTransitionType.SLIDE_RIGHT,
  slide_left: Gtk4.StackTransitionType.SLIDE_LEFT,
  slide_up: Gtk4.StackTransitionType.SLIDE_UP,
  slide_down: Gtk4.StackTransitionType.SLIDE_DOWN
};
var RevealerTransitionMap = {
  none: Gtk4.RevealerTransitionType.NONE,
  crossfade: Gtk4.RevealerTransitionType.CROSSFADE,
  slide_right: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
  slide_left: Gtk4.RevealerTransitionType.SLIDE_LEFT,
  slide_up: Gtk4.RevealerTransitionType.SLIDE_UP,
  slide_down: Gtk4.RevealerTransitionType.SLIDE_DOWN
};
var dropdownMenuList = [
  "dashboardmenu",
  "audiomenu",
  "mediamenu",
  "networkmenu",
  "bluetoothmenu",
  "notificationsmenu",
  "calendarmenu",
  "energymenu",
  "powerdropdownmenu",
  "settings-dialog"
];
var isDropdownMenu = (name2) => {
  return dropdownMenuList.includes(name2);
};

// src/components/menus/power/index.tsx
var { transition } = options_default.menus;
var SysButton = ({ action, label: label15 }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `widget-button powermenu-button-${action}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          actions_default.action(action);
        }
      },
      children: /* @__PURE__ */ jsxs("box", { className: "system-button widget-box", vertical: true, vexpand: true, valign: Gtk4.Align.FILL, children: [
        /* @__PURE__ */ jsx2("icon", { className: `system-button_icon txt-icon ${action}`, icon: icons_default.powermenu[action], vexpand: true }),
        /* @__PURE__ */ jsx2("label", { className: `system-button_label ${action}`, label: label15, vexpand: true })
      ] })
    }
  );
};
var power_default = () => /* @__PURE__ */ jsx2(popup_default, { name: "powermenu", transition: bind(transition).as((transition10) => RevealerTransitionMap[transition10]), children: /* @__PURE__ */ jsxs("box", { className: "powermenu horizontal", children: [
  /* @__PURE__ */ jsx2(SysButton, { action: "shutdown", label: "SHUTDOWN" }),
  /* @__PURE__ */ jsx2(SysButton, { action: "logout", label: "LOG OUT" }),
  /* @__PURE__ */ jsx2(SysButton, { action: "reboot", label: "REBOOT" }),
  /* @__PURE__ */ jsx2(SysButton, { action: "sleep", label: "SLEEP" })
] }) });

// src/components/menus/power/verification.tsx
var verification_default = () => /* @__PURE__ */ jsx2(popup_default, { name: "verification", transition: "crossfade", layout: "center", children: /* @__PURE__ */ jsx2("box", { className: "verification", expand: false, children: /* @__PURE__ */ jsxs("box", { className: "verification-content", expand: true, vertical: true, children: [
  /* @__PURE__ */ jsxs("box", { className: "text-box", vertical: true, children: [
    /* @__PURE__ */ jsx2("label", { className: "title", label: bind(actions_default, "title").as((t) => t.toUpperCase()) }),
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: "desc",
        label: bind(actions_default, "title").as((p) => `Are you sure you want to ${p.toLowerCase()}?`)
      }
    )
  ] }),
  /* @__PURE__ */ jsxs("box", { className: "buttons horizontal", vexpand: true, valign: Gtk4.Align.END, homogeneous: true, children: [
    /* @__PURE__ */ jsx2("button", { className: "verification-button bar-verification_yes", onClicked: actions_default.exec, children: /* @__PURE__ */ jsx2("label", { label: "Yes" }) }),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "verification-button bar-verification_no",
        onClicked: () => app_default.toggle_window("verification"),
        children: /* @__PURE__ */ jsx2("label", { label: "No" })
      }
    )
  ] })
] }) }) });

// src/components/menus/shared/dropdown/eventBoxes/index.tsx
var EventBoxPadding = ({ className, windowName }) => {
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      className,
      hexpand: true,
      vexpand: false,
      canFocus: false,
      setup: (self) => {
        self.connect("button-press-event", () => app_default.toggle_window(windowName));
      },
      children: /* @__PURE__ */ jsx2("box", {})
    }
  );
};
var BarEventMargins = ({ windowName, location: location6 = "top" }) => {
  if (location6 === "top") {
    return /* @__PURE__ */ jsxs("box", { className: "event-box-container", children: [
      /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-top-padding-static", windowName }),
      /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-top-padding", windowName })
    ] });
  } else {
    return /* @__PURE__ */ jsx2("box", { className: "event-box-container", children: /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-bottom-padding-static", windowName }) });
  }
};

// src/components/menus/shared/dropdown/index.tsx
var { location: location4 } = options_default.theme.bar;
var dropdown_default = ({
  name: name2,
  child,
  transition: transition10,
  exclusivity = Astal7.Exclusivity.IGNORE,
  ...props
}) => {
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: name2,
      namespace: name2,
      className: `${name2} dropdown-menu`,
      onKeyPressEvent: (_, event) => {
        const key2 = event.get_keyval()[1];
        if (key2 === Gdk.KEY_Escape) {
          app_default.get_window(name2)?.set_visible(false);
        }
      },
      visible: false,
      application: app_default,
      keymode: Astal7.Keymode.ON_DEMAND,
      exclusivity,
      layer: Astal7.Layer.TOP,
      anchor: bind(location4).as((ln) => {
        if (locationMap[ln] === Astal7.WindowAnchor.TOP) {
          return Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT;
        }
        if (locationMap[ln] === Astal7.WindowAnchor.BOTTOM) {
          return Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.LEFT;
        }
      }),
      ...props,
      children: /* @__PURE__ */ jsx2(
        "eventbox",
        {
          className: "parent-event",
          onButtonPressEvent: (_, event) => {
            const buttonClicked = event.get_button()[1];
            if (buttonClicked === Gdk.BUTTON_PRIMARY || buttonClicked === Gdk.BUTTON_SECONDARY) {
              app_default.get_window(name2)?.set_visible(false);
            }
          },
          children: /* @__PURE__ */ jsxs("box", { className: "top-eb", vertical: true, children: [
            bind(location4).as((lcn) => {
              if (locationMap[lcn] === Astal7.WindowAnchor.TOP) {
                return /* @__PURE__ */ jsx2(BarEventMargins, { windowName: name2 });
              }
              return /* @__PURE__ */ jsx2("box", {});
            }),
            /* @__PURE__ */ jsx2(
              "eventbox",
              {
                className: "in-eb menu-event-box",
                onButtonPressEvent: (_, event) => {
                  const buttonClicked = event.get_button()[1];
                  if (buttonClicked === Gdk.BUTTON_PRIMARY || buttonClicked === Gdk.BUTTON_SECONDARY) {
                    return true;
                  }
                },
                setup: (self) => {
                  globalEventBoxes.set({
                    ...globalEventBoxes.get(),
                    [name2]: self
                  });
                },
                children: /* @__PURE__ */ jsx2("box", { className: "dropdown-menu-container", css: "padding: 1px; margin: -1px;", children: /* @__PURE__ */ jsx2(
                  "revealer",
                  {
                    revealChild: false,
                    setup: (self) => {
                      app_default.connect("window-toggled", (_, window) => {
                        self.set_reveal_child(window.visible);
                      });
                    },
                    transitionType: transition10,
                    transitionDuration: bind(options_default.menus.transitionTime),
                    children: /* @__PURE__ */ jsx2("box", { className: "dropdown-menu-container", canFocus: true, children: child })
                  }
                ) })
              }
            ),
            bind(location4).as((lcn) => {
              if (locationMap[lcn] === Astal7.WindowAnchor.BOTTOM) {
                return /* @__PURE__ */ jsx2(BarEventMargins, { windowName: name2 });
              }
              return /* @__PURE__ */ jsx2("box", {});
            })
          ] })
        }
      )
    }
  );
};

// src/components/menus/audio/utils.ts
var speakerIcons = {
  101: "audio-volume-overamplified-symbolic",
  66: "audio-volume-high-symbolic",
  34: "audio-volume-medium-symbolic",
  1: "audio-volume-low-symbolic",
  0: "audio-volume-muted-symbolic"
};
var inputIcons = {
  101: "microphone-sensitivity-high-symbolic",
  66: "microphone-sensitivity-high-symbolic",
  34: "microphone-sensitivity-medium-symbolic",
  1: "microphone-sensitivity-low-symbolic",
  0: "microphone-disabled-symbolic"
};
var getIcon2 = (audioVol, isMuted) => {
  const thresholds = [101, 66, 34, 1, 0];
  const icon13 = isMuted ? 0 : thresholds.find((threshold) => threshold <= audioVol * 100) || 0;
  return {
    spkr: speakerIcons[icon13],
    mic: inputIcons[icon13]
  };
};

// src/components/menus/audio/active/sliderItem/SliderIcon.tsx
var SliderIcon = ({ type, device }) => {
  const iconBinding = Variable.derive([bind(device, "volume"), bind(device, "mute")], (volume, isMuted) => {
    const iconType = type === "playback" ? "spkr" : "mic";
    const effectiveVolume = volume > 0 ? volume : 100;
    const mutedState = volume > 0 ? isMuted : true;
    return getIcon2(effectiveVolume, mutedState)[iconType];
  });
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(device, "mute").as((isMuted) => `menu-active-button ${type} ${isMuted ? "muted" : ""}`),
      vexpand: false,
      valign: Gtk4.Align.END,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          device.mute = !device.mute;
        }
      },
      onDestroy: () => {
        iconBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("icon", { className: `menu-active-icon ${type}`, icon: iconBinding() })
    }
  );
};

// src/components/menus/audio/active/sliderItem/Slider.tsx
var { raiseMaximumVolume } = options_default.menus.volume;
var Slider2 = ({ device, type }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: `menu-active ${type}`,
        halign: Gtk4.Align.START,
        truncate: true,
        hexpand: true,
        wrap: true,
        label: bind(device, "description").as(
          (description) => capitalizeFirstLetter(description ?? `Unknown ${type} Device`)
        )
      }
    ),
    /* @__PURE__ */ jsx2(
      "slider",
      {
        value: bind(device, "volume"),
        className: `menu-active-slider menu-slider ${type}`,
        drawValue: false,
        hexpand: true,
        min: 0,
        max: type === "playback" ? bind(raiseMaximumVolume).as((raise) => raise ? 1.5 : 1) : 1,
        onDragged: ({ value, dragging }) => {
          if (dragging) {
            device.volume = value;
            device.mute = false;
          }
        },
        setup: (self) => {
          self.connect("scroll-event", (_, event) => {
            if (isScrollUp(event)) {
              const newVolume = device.volume + 0.05;
              const minVolume = raiseMaximumVolume.get() ? 1.5 : 1;
              device.set_volume(Math.min(newVolume, minVolume));
            }
            if (isScrollDown(event)) {
              const newVolume = device.volume - 0.05;
              device.set_volume(newVolume);
            }
          });
        }
      }
    )
  ] });
};

// src/components/menus/audio/active/sliderItem/SliderPercentage.tsx
var SliderPercentage = ({ type, device }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: `menu-active-percentage ${type}`,
      valign: Gtk4.Align.END,
      label: bind(device, "volume").as((vol) => `${Math.round(vol * 100)}%`)
    }
  );
};

// src/components/menus/audio/active/sliderItem/SliderItem.tsx
var SliderItem = ({ type, device }) => {
  return /* @__PURE__ */ jsx2("box", { className: `menu-active-container ${type}`, vertical: true, children: /* @__PURE__ */ jsxs("box", { className: `menu-slider-container ${type}`, children: [
    /* @__PURE__ */ jsx2(SliderIcon, { type, device }),
    /* @__PURE__ */ jsx2(Slider2, { type, device }),
    /* @__PURE__ */ jsx2(SliderPercentage, { type, device })
  ] }) });
};

// src/components/menus/audio/active/devices/index.tsx
var ActiveDeviceContainer = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section selected", name: "devices" /* Devices */, vertical: true, children });
};
var ActiveDevices = () => {
  return /* @__PURE__ */ jsxs(ActiveDeviceContainer, { children: [
    /* @__PURE__ */ jsx2(SliderItem, { type: "playback", device: audioService.defaultSpeaker }),
    /* @__PURE__ */ jsx2(SliderItem, { type: "input", device: audioService.defaultMicrophone })
  ] });
};

// src/components/menus/audio/active/playbacks/index.tsx
var NoStreams = () => {
  return /* @__PURE__ */ jsx2("label", { className: "no-playbacks dim", label: "No active playbacks found.", expand: true });
};
var ActivePlaybacks = () => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section selected", name: "playbacks" /* Playbacks */, vertical: true, children: /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller active-playbacks-scrollable", children: /* @__PURE__ */ jsx2("box", { vertical: true, children: bind(audioService, "streams").as((streams) => {
    if (!streams || streams.length === 0) {
      return /* @__PURE__ */ jsx2(NoStreams, {});
    }
    const currentStreams = streams;
    return currentStreams.map((stream) => {
      return /* @__PURE__ */ jsx2(SliderItem, { type: "playback", device: stream });
    });
  }) }) }) });
};

// src/components/menus/audio/active/index.tsx
var activeMenu = Variable("devices" /* Devices */);
var Header = () => /* @__PURE__ */ jsxs("box", { className: "menu-label-container volume selected", halign: Gtk4.Align.FILL, children: [
  /* @__PURE__ */ jsx2("label", { className: "menu-label audio volume", halign: Gtk4.Align.START, hexpand: true, label: "Volume" }),
  /* @__PURE__ */ jsx2(
    "button",
    {
      className: "menu-icon-button menu-label slider-toggle volume",
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (activeMenu.get() === "devices" /* Devices */) {
          activeMenu.set("playbacks" /* Playbacks */);
        } else {
          activeMenu.set("devices" /* Devices */);
        }
      },
      halign: Gtk4.Align.END,
      hexpand: true,
      label: bind(activeMenu).as((menu) => menu === "devices" /* Devices */ ? "\uE690" : "\u{F093D}")
    }
  )
] });
var VolumeSliders = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container volume", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header, {}),
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        transitionType: Gtk4.RevealerTransitionType.NONE,
        revealChild: bind(activeMenu).as((curMenu) => curMenu === "devices" /* Devices */),
        children: /* @__PURE__ */ jsx2(ActiveDevices, {})
      }
    ),
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        transitionType: Gtk4.RevealerTransitionType.NONE,
        revealChild: bind(activeMenu).as((curMenu) => curMenu === "playbacks" /* Playbacks */),
        children: /* @__PURE__ */ jsx2(ActivePlaybacks, {})
      }
    )
  ] });
};

// src/components/menus/audio/available/Device.tsx
var DeviceIcon = ({ device, type, icon: icon13 }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: bind(device, "isDefault").as((isDefault) => {
        return `menu-button-icon ${isDefault ? "active" : ""} ${type} txt-icon`;
      }),
      label: icon13
    }
  );
};
var DeviceName = ({ device, type }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      truncate: true,
      wrap: true,
      className: bind(device, "description").as(
        (currentDesc) => device.description === currentDesc ? `menu-button-name active ${type}` : `menu-button-name ${type}`
      ),
      label: device.description
    }
  );
};
var AudioDevice = ({ device, type, icon: icon13 }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `menu-button audio ${type} ${device.id}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          device.set_is_default(true);
        }
      },
      children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, children: [
        /* @__PURE__ */ jsx2(DeviceIcon, { device, type, icon: icon13 }),
        /* @__PURE__ */ jsx2(DeviceName, { device, type })
      ] })
    }
  );
};

// src/components/menus/audio/available/NotFoundButton.tsx
var NotFoundButton = ({ type }) => {
  return /* @__PURE__ */ jsx2("button", { className: `menu-unfound-button ${type}`, sensitive: false, children: /* @__PURE__ */ jsx2("box", { children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2("label", { className: `menu-button-name ${type}`, label: `No ${type} devices found...` }) }) }) });
};

// src/components/menus/audio/available/PlaybackDevices.tsx
var PlaybackDevices = () => {
  const playbackDevices = bind(audioService, "speakers");
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section playback", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-container playback", vertical: true, children: playbackDevices.as((devices) => {
    if (!devices || devices.length === 0) {
      return /* @__PURE__ */ jsx2(NotFoundButton, { type: "playback" });
    }
    return devices.map((device) => {
      return /* @__PURE__ */ jsx2(AudioDevice, { device, type: "playback", icon: "\uE638" });
    });
  }) }) });
};

// src/components/menus/audio/available/InputDevices.tsx
var InputDevices = () => {
  const inputDevices = bind(audioService, "microphones");
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section input", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-container input", vertical: true, children: inputDevices.as((devices) => {
    if (!devices || devices.length === 0) {
      return /* @__PURE__ */ jsx2(NotFoundButton, { type: "input" });
    }
    return devices.map((device) => {
      return /* @__PURE__ */ jsx2(AudioDevice, { device, type: "input", icon: "\uEC1C" });
    });
  }) }) });
};

// src/components/menus/audio/available/Header.tsx
var Header2 = ({ type, label: label15 }) => {
  return /* @__PURE__ */ jsx2("box", { className: `menu-label-container ${type}`, halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: `menu-label audio ${type}`, halign: Gtk4.Align.START, hexpand: true, label: label15 }) });
};

// src/components/menus/audio/available/index.tsx
var AvailableDevices = () => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, className: "menu-section-container playback", children: [
    /* @__PURE__ */ jsx2(Header2, { type: "playback", label: "Playback Device" }),
    /* @__PURE__ */ jsx2(PlaybackDevices, {}),
    /* @__PURE__ */ jsx2(Header2, { type: "input", label: "Input Device" }),
    /* @__PURE__ */ jsx2(InputDevices, {})
  ] });
};

// src/components/menus/audio/index.tsx
var audio_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "audiomenu",
      transition: bind(options_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items audio", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container audio", halign: Gtk4.Align.FILL, vertical: true, hexpand: true, children: [
        /* @__PURE__ */ jsx2(VolumeSliders, {}),
        /* @__PURE__ */ jsx2(AvailableDevices, {})
      ] }) })
    }
  );
};

// src/components/menus/network/ethernet/index.tsx
import AstalNetwork6 from "gi://AstalNetwork?version=0.1";

// src/lib/constants/network.ts
import AstalNetwork4 from "gi://AstalNetwork?version=0.1";
var DEVICE_STATES = {
  [AstalNetwork4.DeviceState.UNKNOWN]: "Unknown",
  [AstalNetwork4.DeviceState.UNMANAGED]: "Unmanaged",
  [AstalNetwork4.DeviceState.UNAVAILABLE]: "Unavailable",
  [AstalNetwork4.DeviceState.DISCONNECTED]: "Disconnected",
  [AstalNetwork4.DeviceState.PREPARE]: "Prepare",
  [AstalNetwork4.DeviceState.CONFIG]: "Config",
  [AstalNetwork4.DeviceState.NEED_AUTH]: "Need Authentication",
  [AstalNetwork4.DeviceState.IP_CONFIG]: "IP Configuration",
  [AstalNetwork4.DeviceState.IP_CHECK]: "IP Check",
  [AstalNetwork4.DeviceState.SECONDARIES]: "Secondaries",
  [AstalNetwork4.DeviceState.ACTIVATED]: "Activated",
  [AstalNetwork4.DeviceState.DEACTIVATING]: "Deactivating",
  [AstalNetwork4.DeviceState.FAILED]: "Failed"
};

// src/components/menus/network/ethernet/helpers.ts
import AstalNetwork5 from "gi://AstalNetwork?version=0.1";
var wiredState = Variable(AstalNetwork5.DeviceState.UNKNOWN);
var wiredInternet = Variable(AstalNetwork5.Internet.DISCONNECTED);
var wiredIcon2 = Variable("");
var wiredSpeed = Variable(0);
var wiredStateBinding;
var wiredInternetBinding;
var wiredIconBinding2;
var wiredSpeedBinding;
var getWiredState = () => {
  wiredStateBinding?.drop();
  wiredStateBinding = void 0;
  if (!networkService.wired) {
    wiredState.set(AstalNetwork5.DeviceState.UNAVAILABLE);
    return;
  }
  wiredStateBinding = Variable.derive([bind(networkService.wired, "state")], (state) => {
    wiredState.set(state);
  });
};
var getWiredInternet = () => {
  wiredInternetBinding?.drop();
  wiredInternetBinding = void 0;
  if (!networkService.wired) {
    return;
  }
  wiredInternetBinding = Variable.derive([bind(networkService.wired, "internet")], (internet) => {
    wiredInternet.set(internet);
  });
};
var getWiredIcon = () => {
  wiredIconBinding2?.drop();
  wiredIconBinding2 = void 0;
  if (!networkService.wired) {
    wiredIcon2.set("network-wired-symbolic");
    return;
  }
  wiredIconBinding2 = Variable.derive([bind(networkService.wired, "iconName")], (icon13) => {
    wiredIcon2.set(icon13);
  });
};
var getWiredSpeed = () => {
  wiredSpeedBinding?.drop();
  wiredSpeedBinding = void 0;
  if (!networkService.wired) {
    return;
  }
  wiredSpeedBinding = Variable.derive([bind(networkService.wired, "speed")], (speed) => {
    wiredSpeed.set(speed);
  });
};
Variable.derive([bind(networkService, "wired")], () => {
  getWiredState();
  getWiredInternet();
  getWiredIcon();
  getWiredSpeed();
});

// src/components/menus/network/ethernet/index.tsx
var Ethernet = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container ethernet", vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Ethernet" }) }),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-content", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "network-element-item", children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, children: [
      /* @__PURE__ */ jsx2(
        "icon",
        {
          className: bind(wiredState).as((state) => {
            return `network-icon ethernet ${state === AstalNetwork6.DeviceState.ACTIVATED ? "active" : ""}`;
          }),
          tooltipText: bind(wiredInternet).as((internet) => {
            return internet.toString();
          }),
          icon: bind(wiredIcon2)
        }
      ),
      /* @__PURE__ */ jsxs("box", { className: "connection-container", vertical: true, children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "active-connection",
            halign: Gtk4.Align.START,
            truncate: true,
            wrap: true,
            label: bind(wiredSpeed).as((speed) => {
              return `Ethernet Connection (${speed} Mbps)`;
            })
          }
        ),
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "connection-status dim",
            halign: Gtk4.Align.START,
            truncate: true,
            wrap: true,
            label: bind(wiredState).as((state) => {
              return DEVICE_STATES[state];
            })
          }
        )
      ] })
    ] }) }) }) })
  ] });
};

// src/components/shared/Spinner.tsx
var Spinner = class extends astalify(Gtk4.Spinner) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Spinner.
   * @param props - The properties for the Spinner component.
   * @memberof Spinner
   */
  constructor(props) {
    super(props);
  }
};
var Spinner_default = Spinner;

// src/components/menus/network/wifi/APStaging/AccessPoint.tsx
var AccessPoint = ({ staging: staging2, connecting: connecting2 }) => {
  const ConnectionIcon = () => /* @__PURE__ */ jsx2("icon", { className: "network-icon wifi", icon: staging2.get()?.iconName });
  const ConnectionSpinner = () => /* @__PURE__ */ jsx2(
    "revealer",
    {
      halign: Gtk4.Align.END,
      revealChild: bind(connecting2).as((conBssid) => staging2.get()?.bssid === conBssid),
      children: /* @__PURE__ */ jsx2(Spinner_default, { className: "spinner wap" })
    }
  );
  const ConnectionName = () => /* @__PURE__ */ jsx2("box", { className: "connection-container", vertical: true, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "active-connection",
      halign: Gtk4.Align.START,
      truncate: true,
      wrap: true,
      label: staging2.get()?.ssid ?? ""
    }
  ) });
  return /* @__PURE__ */ jsx2("box", { className: "network-element-item staging", vertical: true, children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(ConnectionIcon, {}),
    /* @__PURE__ */ jsx2(ConnectionName, {}),
    /* @__PURE__ */ jsx2(ConnectionSpinner, {})
  ] }) });
};

// src/components/menus/network/wifi/APStaging/PasswordInput.tsx
var PasswordInput = ({ connecting: connecting2, staging: staging2 }) => {
  const shouldMaskPassword = true;
  return /* @__PURE__ */ jsxs("box", { className: "network-password-input-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className: "network-password-input",
        hexpand: true,
        halign: Gtk4.Align.START,
        visibility: shouldMaskPassword,
        placeholderText: "Enter Password",
        onKeyPressEvent: (self, event) => {
          const keyPressed = event.get_keyval()[1];
          if (keyPressed === Gdk.KEY_Return) {
            connecting2.set(staging2.get()?.bssid ?? "");
            const connectCommand = `nmcli device wifi connect "${staging2.get()?.ssid}" password "${self.text}"`;
            execAsync(connectCommand).catch((err) => {
              connecting2.set("");
              Notify({
                summary: "Network",
                body: err.message
              });
            }).then(() => {
              connecting2.set("");
              staging2.set({});
            });
            self.text = "";
          }
        }
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "close-network-password-input-button",
        halign: Gtk4.Align.END,
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            connecting2.set("");
            staging2.set({});
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { className: "close-network-password-input-icon", icon: "window-close-symbolic" })
      }
    )
  ] });
};

// src/components/menus/network/wifi/WirelessAPs/helpers.ts
import AstalNetwork7 from "gi://AstalNetwork?version=0.1";
var isWifiEnabled = Variable(false);
var wifiAccessPoints = Variable([]);
var wifiEnabledBinding;
var accessPointBinding;
var staging = Variable(void 0);
var connecting = Variable("");
var wifiEnabled = () => {
  wifiEnabledBinding?.drop();
  wifiEnabledBinding = void 0;
  if (!networkService.wifi) {
    return;
  }
  wifiEnabledBinding = Variable.derive([bind(networkService.wifi, "enabled")], (isEnabled) => {
    isWifiEnabled.set(isEnabled);
  });
};
var accessPoints = () => {
  accessPointBinding?.drop();
  accessPointBinding = void 0;
  if (!networkService.wifi) {
    return;
  }
  Variable.derive([bind(networkService.wifi, "accessPoints")], (axsPoints) => {
    wifiAccessPoints.set(axsPoints);
  });
};
var dedupeWAPs = () => {
  if (!networkService.wifi) {
    return [];
  }
  const WAPs = networkService.wifi.get_access_points();
  const dedupMap = {};
  WAPs.forEach((item) => {
    if (item.ssid !== null && !Object.prototype.hasOwnProperty.call(dedupMap, item.ssid)) {
      dedupMap[item.ssid] = item;
    }
  });
  return Object.keys(dedupMap).map((itm) => dedupMap[itm]);
};
var isInStaging = (wap) => {
  const wapInStaging = staging.get();
  if (wapInStaging === void 0) {
    return false;
  }
  return wap.bssid === wapInStaging.bssid;
};
var getFilteredWirelessAPs = () => {
  const dedupedWAPs = dedupeWAPs();
  const filteredWAPs = dedupedWAPs.filter((ap) => {
    return ap.ssid !== "Unknown" && !isInStaging(ap);
  }).sort((a, b) => {
    if (isApActive(a)) {
      return -1;
    }
    if (isApActive(b)) {
      return 1;
    }
    return b.strength - a.strength;
  });
  return filteredWAPs;
};
var isApEnabled = (state) => {
  if (!state) {
    return false;
  }
  return !(state === AstalNetwork7.DeviceState.DISCONNECTED || state === AstalNetwork7.DeviceState.UNAVAILABLE || state === AstalNetwork7.DeviceState.FAILED);
};
var isApActive = (accessPoint) => {
  return accessPoint.ssid === networkService.wifi?.activeAccessPoint?.ssid;
};
var isDisconnecting = (accessPoint) => {
  if (isApActive(accessPoint)) {
    return networkService.wifi?.state === AstalNetwork7.DeviceState.DEACTIVATING;
  }
  return false;
};
var getIdFromSsid = (ssid, nmcliOutput) => {
  const lines = nmcliOutput.trim().split("\n");
  for (const line of lines) {
    const columns = line.trim().split(/\s{2,}/);
    if (columns[0].includes(ssid)) {
      return columns[1];
    }
  }
};
var getWifiStatus = () => {
  const wifiState = networkService.wifi?.state;
  if (wifiState) {
    return DEVICE_STATES[wifiState];
  }
  return DEVICE_STATES[AstalNetwork7.DeviceState.UNKNOWN];
};
var connectToAP = (accessPoint, event) => {
  if (accessPoint.bssid === connecting.get() || isApActive(accessPoint) || !isPrimaryClick(event)) {
    return;
  }
  connecting.set(accessPoint.bssid || "");
  execAsync(`nmcli device wifi connect ${accessPoint.bssid}`).then(() => {
    connecting.set("");
    staging.set({});
  }).catch((err) => {
    connecting.set("");
    if (err.message?.toLowerCase().includes("secrets were required, but not provided")) {
      staging.set(accessPoint);
    } else {
      Notify({
        summary: "Network",
        body: err.message
      });
    }
  });
};
var disconnectFromAP = (accessPoint, event) => {
  if (!isPrimaryClick(event)) {
    return;
  }
  connecting.set(accessPoint.bssid || "");
  execAsync("nmcli connection show --active").then((res) => {
    const connectionId = getIdFromSsid(accessPoint.ssid || "", res);
    if (connectionId === void 0) {
      console.error(`Error while disconnecting "${accessPoint.ssid}": Connection ID not found`);
      return;
    }
    execAsync(`nmcli connection down ${connectionId} "${accessPoint.ssid}"`).then(() => {
      connecting.set("");
    }).catch((err) => {
      connecting.set("");
      console.error(`Error while disconnecting "${accessPoint.ssid}": ${err}`);
    });
  });
};
var forgetAP = (accessPoint, event) => {
  if (!isPrimaryClick(event)) {
    return;
  }
  connecting.set(accessPoint.bssid || "");
  execAsync("nmcli connection show --active").then((res) => {
    const connectionId = getIdFromSsid(accessPoint.ssid || "", res);
    if (connectionId === void 0) {
      console.error(`Error while forgetting "${accessPoint.ssid}": Connection ID not found`);
      return;
    }
    execAsync(`nmcli connection delete ${connectionId} "${accessPoint.ssid}"`).then(() => {
      connecting.set("");
    }).catch((err) => {
      connecting.set("");
      console.error(`Error while forgetting "${accessPoint.ssid}": ${err}`);
    });
  });
};
Variable.derive([bind(networkService, "wifi")], () => {
  wifiEnabled();
  accessPoints();
});

// src/components/menus/network/wifi/APStaging/index.tsx
var APStaging = () => {
  const stagingBinding = Variable.derive([bind(networkService, "wifi"), bind(staging)], () => {
    if (staging.get()?.ssid === void 0) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsxs("box", { className: "network-element-item staging", vertical: true, children: [
      /* @__PURE__ */ jsx2(AccessPoint, { connecting, staging }),
      /* @__PURE__ */ jsx2(PasswordInput, { connecting, staging })
    ] });
  });
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "wap-staging",
      onDestroy: () => {
        stagingBinding.drop();
      },
      children: stagingBinding()
    }
  );
};

// src/components/menus/network/utils.ts
var getWifiIcon = (iconName) => {
  if (iconName === void 0) {
    return "\u{F092B}";
  }
  const deviceIconMap = [
    ["network-wireless-acquiring", "\u{F0929}"],
    ["network-wireless-connected", "\u{F0928}"],
    ["network-wireless-encrypted", "\u{F092A}"],
    ["network-wireless-hotspot", "\u{F0928}"],
    ["network-wireless-no-route", "\u{F0929}"],
    ["network-wireless-offline", "\u{F092E}"],
    ["network-wireless-signal-excellent", "\u{F0928}"],
    ["network-wireless-signal-good", "\u{F0925}"],
    ["network-wireless-signal-ok", "\u{F0922}"],
    ["network-wireless-signal-weak", "\u{F091F}"],
    ["network-wireless-signal-none", "\u{F092F}"]
  ];
  const foundMatch = deviceIconMap.find((icon13) => RegExp(icon13[0]).test(iconName.toLowerCase()));
  return foundMatch ? foundMatch[1] : "\u{F0928}";
};

// src/components/menus/network/wifi/WirelessAPs/AccessPoint.tsx
var AccessPoint2 = ({ connecting: connecting2, accessPoint }) => {
  const ConnectionIcon = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        valign: Gtk4.Align.START,
        className: `network-icon wifi ${isApActive(accessPoint) ? "active" : ""} txt-icon`,
        label: getWifiIcon(accessPoint.iconName)
      }
    );
  };
  const ConnectionAccessPoint = () => {
    return /* @__PURE__ */ jsxs("box", { className: "connection-container", valign: Gtk4.Align.CENTER, vertical: true, hexpand: true, children: [
      /* @__PURE__ */ jsx2(
        "label",
        {
          className: "active-connection",
          valign: Gtk4.Align.CENTER,
          halign: Gtk4.Align.START,
          truncate: true,
          wrap: true,
          label: accessPoint.ssid ?? ""
        }
      ),
      /* @__PURE__ */ jsx2("revealer", { revealChild: isApActive(accessPoint) && isApEnabled(networkService.wifi?.state), children: /* @__PURE__ */ jsx2("label", { className: "connection-status dim", halign: Gtk4.Align.START, label: getWifiStatus() }) })
    ] });
  };
  const LoadingSpinner = () => {
    return /* @__PURE__ */ jsx2(
      "revealer",
      {
        halign: Gtk4.Align.END,
        valign: Gtk4.Align.CENTER,
        revealChild: accessPoint.bssid === connecting2.get() || isDisconnecting(accessPoint),
        children: /* @__PURE__ */ jsx2(
          Spinner_default,
          {
            className: "spinner wap",
            setup: (self) => {
              self.start();
            },
            halign: Gtk4.Align.CENTER,
            valign: Gtk4.Align.CENTER
          }
        )
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "network-element-item",
      onClick: (_, event) => {
        connectToAP(accessPoint, event);
      },
      children: /* @__PURE__ */ jsxs("box", { hexpand: true, children: [
        /* @__PURE__ */ jsx2(ConnectionIcon, {}),
        /* @__PURE__ */ jsx2(ConnectionAccessPoint, {}),
        /* @__PURE__ */ jsx2(LoadingSpinner, {})
      ] })
    }
  );
};

// src/components/menus/network/wifi/WirelessAPs/Controls.tsx
var Controls = ({ connecting: connecting2, accessPoint }) => {
  const DisconnectButton = () => {
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: "menu-icon-button network disconnect",
        onClick: (_, event) => {
          disconnectFromAP(accessPoint, event);
        },
        children: /* @__PURE__ */ jsx2("label", { className: "menu-icon-button disconnect-network txt-icon", tooltipText: "Disconnect", label: "\u{F1616}" })
      }
    );
  };
  const ForgetButton2 = () => {
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: "menu-icon-button network disconnect",
        tooltipText: "Delete/Forget Network",
        onClick: (_, event) => {
          forgetAP(accessPoint, event);
        },
        children: /* @__PURE__ */ jsx2("label", { className: "txt-icon delete-network", label: "\u{F0683}" })
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      revealChild: accessPoint.bssid !== connecting2.get() && isApActive(accessPoint),
      valign: Gtk4.Align.START,
      children: /* @__PURE__ */ jsxs("box", { className: "network-element-controls-container", children: [
        /* @__PURE__ */ jsx2(DisconnectButton, {}),
        /* @__PURE__ */ jsx2(ForgetButton2, {})
      ] })
    }
  );
};

// src/components/menus/network/wifi/WirelessAPs/index.tsx
var WirelessAPs = () => {
  const wapBinding = Variable.derive(
    [bind(staging), bind(connecting), bind(wifiAccessPoints), bind(isWifiEnabled)],
    () => {
      const filteredWAPs = getFilteredWirelessAPs();
      if (filteredWAPs.length <= 0 && staging.get() === void 0) {
        return /* @__PURE__ */ jsx2(
          "label",
          {
            className: "waps-not-found dim",
            expand: true,
            halign: Gtk4.Align.CENTER,
            valign: Gtk4.Align.CENTER,
            label: "No Wi-Fi Networks Found"
          }
        );
      }
      return /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller wap", children: /* @__PURE__ */ jsx2("box", { className: "available-waps-list", vertical: true, children: filteredWAPs.map((ap) => {
        return /* @__PURE__ */ jsxs("box", { className: "network-element-item", children: [
          /* @__PURE__ */ jsx2(AccessPoint2, { connecting, accessPoint: ap }),
          /* @__PURE__ */ jsx2(Controls, { connecting, accessPoint: ap })
        ] });
      }) }) });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "available-waps",
      vertical: true,
      onDestroy: () => {
        wapBinding.drop();
      },
      children: wapBinding()
    }
  );
};

// src/components/menus/network/wifi/Controls/WifiSwitch.tsx
var WifiSwitch = () => /* @__PURE__ */ jsx2(
  "switch",
  {
    className: "menu-switch network",
    valign: Gtk4.Align.CENTER,
    tooltipText: "Toggle Wifi",
    active: networkService.wifi?.enabled,
    setup: (self) => {
      self.connect("notify::active", () => {
        networkService.wifi?.set_enabled(self.active);
      });
    }
  }
);

// src/components/menus/network/wifi/Controls/helpers.ts
var isScanning = Variable(false);
var scanningBinding;
Variable.derive([bind(networkService, "wifi")], () => {
  scanningBinding?.drop();
  scanningBinding = void 0;
  if (!networkService.wifi) {
    return;
  }
  scanningBinding = Variable.derive([bind(networkService.wifi, "scanning")], (scanning) => {
    isScanning.set(scanning);
  });
});

// src/components/menus/network/wifi/Controls/RefreshButton.tsx
var RefreshButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "menu-icon-button search network",
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.END,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          networkService.wifi?.scan();
        }
      },
      children: /* @__PURE__ */ jsx2(
        "icon",
        {
          className: bind(isScanning).as((scanning) => scanning ? "spinning-icon" : ""),
          icon: "view-refresh-symbolic"
        }
      )
    }
  );
};

// src/components/menus/network/wifi/index.tsx
var Wifi = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container wifi", vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
      /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Wi-Fi" }),
      /* @__PURE__ */ jsx2(WifiSwitch, {}),
      /* @__PURE__ */ jsx2(RefreshButton, {})
    ] }),
    /* @__PURE__ */ jsxs("box", { className: "menu-items-section", vertical: true, children: [
      /* @__PURE__ */ jsx2(APStaging, {}),
      /* @__PURE__ */ jsx2(WirelessAPs, {})
    ] })
  ] });
};

// src/components/menus/network/wifi/WirelessAPs/NoWifi.tsx
var NoWifi = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container wifi", vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
      /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Wi-Fi" }),
      /* @__PURE__ */ jsx2(WifiSwitch, {}),
      /* @__PURE__ */ jsx2(RefreshButton, {})
    ] }),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: true, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "waps-not-found dim",
        expand: true,
        halign: Gtk4.Align.CENTER,
        valign: Gtk4.Align.CENTER,
        label: "Wi-Fi Adapter Not Found"
      }
    ) })
  ] });
};

// src/components/menus/network/index.tsx
var network_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "networkmenu",
      transition: bind(options_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items network", children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container network", vertical: true, hexpand: true, children: [
        /* @__PURE__ */ jsx2(Ethernet, {}),
        bind(networkService, "wifi").as((wifi) => {
          if (wifi === null) {
            return /* @__PURE__ */ jsx2(NoWifi, {});
          }
          return /* @__PURE__ */ jsx2(Wifi, {});
        })
      ] }) })
    }
  );
};

// src/components/menus/bluetooth/devices/helpers.ts
var getAvailableBluetoothDevices = () => {
  const bluetoothDevices = bluetoothService.get_devices() ?? [];
  const availableDevices = bluetoothDevices.filter((btDev) => btDev.name !== null).sort((a, b) => {
    if (a.connected || a.paired) {
      return -1;
    }
    if (b.connected || b.paired) {
      return 1;
    }
    return a.name.localeCompare(b.name);
  });
  return availableDevices;
};
var getConnectedBluetoothDevices = () => {
  const availableDevices = getAvailableBluetoothDevices();
  const connectedDeviceNames = availableDevices.filter((d) => d.connected || d.paired).map((d) => d.address);
  return connectedDeviceNames;
};
var forgetBluetoothDevice = (device) => {
  execAsync(["bash", "-c", `bluetoothctl remove ${device.address}`]).catch((err) => console.error("Bluetooth Remove", err)).then(() => {
    bluetoothService.emit("device-removed", device);
  });
};

// src/components/menus/bluetooth/devices/NoBluetoothDevices.tsx
var NoBluetoothDevices = () => {
  return /* @__PURE__ */ jsxs("box", { className: "bluetooth-items", vertical: true, expand: true, valign: Gtk4.Align.CENTER, halign: Gtk4.Align.CENTER, children: [
    /* @__PURE__ */ jsx2("label", { className: "no-bluetooth-devices dim", hexpand: true, label: "No devices currently found" }),
    /* @__PURE__ */ jsx2("label", { className: "search-bluetooth-label dim", hexpand: true, label: "Press '\u{F0450}' to search" })
  ] });
};

// src/components/menus/bluetooth/devices/BluetoothDisabled.tsx
var BluetoothDisabled = () => {
  return /* @__PURE__ */ jsx2("box", { className: "bluetooth-items", vertical: true, expand: true, valign: Gtk4.Align.CENTER, halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2("label", { className: "bluetooth-disabled dim", hexpand: true, label: "Bluetooth is disabled" }) });
};

// src/components/menus/bluetooth/devices/controls/ActionButton.tsx
var ActionButton = ({ name: name2 = "", tooltipText = "", label: label15 = "", ...props }) => {
  return /* @__PURE__ */ jsx2("button", { className: `menu-icon-button ${name2} bluetooth`, ...props, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: `menu-icon-button-label ${name2} bluetooth txt-icon`,
      tooltipText,
      label: label15
    }
  ) });
};

// src/components/menus/bluetooth/devices/controls/PairButton.tsx
var PairButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton,
    {
      name: "unpair",
      tooltipText: bind(device, "paired").as((paired) => paired ? "Unpair" : "Pair"),
      label: bind(device, "paired").as((paired) => paired ? "\uF0C1" : "\uF127"),
      onClick: (_, self) => {
        if (!isPrimaryClick(self)) {
          return;
        }
        if (device.paired) {
          device.pair();
        } else {
          device.cancel_pairing();
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/ConnectButton.tsx
var ConnectButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton,
    {
      name: "disconnect",
      tooltipText: bind(device, "connected").as((connected) => connected ? "Disconnect" : "Connect"),
      label: bind(device, "connected").as((connected) => connected ? "\u{F1616}" : "\uEAD0"),
      onClick: (_, self) => {
        if (isPrimaryClick(self) && device.connected) {
          device.disconnect_device((res) => {
            console.info(res);
          });
        } else {
          device.connect_device((res) => {
            console.info(res);
          });
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/TrustButton.tsx
var TrustButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton,
    {
      name: "untrust",
      tooltipText: bind(device, "trusted").as((trusted) => trusted ? "Untrust" : "Trust"),
      label: bind(device, "trusted").as((trusted) => trusted ? "\uED9F" : "\u{F15A1}"),
      onClick: (_, self) => {
        if (isPrimaryClick(self)) {
          device.set_trusted(!device.trusted);
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/ForgetButton.tsx
var ForgetButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton,
    {
      name: "delete",
      tooltipText: "Forget",
      label: "\u{F01B4}",
      onClick: (_, self) => {
        if (isPrimaryClick(self)) {
          forgetBluetoothDevice(device);
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/index.tsx
var DeviceControls = ({ device, connectedDevices }) => {
  if (!connectedDevices.includes(device.address)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.START, className: "bluetooth-controls", children: [
    /* @__PURE__ */ jsx2(PairButton, { device }),
    /* @__PURE__ */ jsx2(ConnectButton, { device }),
    /* @__PURE__ */ jsx2(TrustButton, { device }),
    /* @__PURE__ */ jsx2(ForgetButton, { device })
  ] });
};

// src/components/menus/bluetooth/utils.ts
var getBluetoothIcon = (iconName) => {
  const deviceIconMap = [
    ["^audio-card*", "\u{F0384}"],
    ["^audio-headphones*", "\u{F02CB}"],
    ["^audio-headset*", "\u{F02CE}"],
    ["^audio-input*", "\u{F036C}"],
    ["^audio-speakers*", "\u{F04C3}"],
    ["^bluetooth*", "\u{F00AF}"],
    ["^camera*", "\u{F0100}"],
    ["^computer*", "\u{F07C0}"],
    ["^input-gaming*", "\u{F036C}"],
    ["^input-keyboard*", "\u{F030C}"],
    ["^input-mouse*", "\u{F037D}"],
    ["^input-tablet*", "\u{F04F6}"],
    ["^media*", "\u{F16DF}"],
    ["^modem*", "\u{F1087}"],
    ["^network*", "\u{F1087}"],
    ["^phone*", "\u{F011E}"],
    ["^printer*", "\u{F042A}"],
    ["^scanner*", "\u{F06AB}"],
    ["^video-camera*", "\u{F0567}"]
  ];
  const foundMatch = deviceIconMap.find((icon13) => RegExp(icon13[0]).test(iconName.toLowerCase()));
  return foundMatch ? foundMatch[1] : "\u{F00AF}";
};

// src/components/menus/bluetooth/devices/device/DeviceIcon.tsx
var DeviceIcon2 = ({ device, connectedDevices }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      valign: Gtk4.Align.START,
      className: bind(device, "address").as(
        (address) => `menu-button-icon bluetooth ${connectedDevices.includes(address) ? "active" : ""} txt-icon`
      ),
      label: bind(device, "icon").as((icon13) => getBluetoothIcon(`${icon13}-symbolic`))
    }
  );
};

// src/components/menus/bluetooth/devices/device/DeviceName.tsx
var DeviceName2 = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.START,
      className: "menu-button-name bluetooth",
      truncate: true,
      wrap: true,
      label: bind(device, "alias")
    }
  );
};

// src/components/menus/bluetooth/devices/device/DeviceStatus.tsx
var DeviceStatus = ({ device }) => {
  const revealerBinding = Variable.derive(
    [bind(device, "connected"), bind(device, "paired")],
    (connected, paired) => {
      return connected || paired;
    }
  );
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      halign: Gtk4.Align.START,
      revealChild: revealerBinding(),
      onDestroy: () => {
        revealerBinding.drop();
      },
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.START,
          className: "connection-status dim",
          label: bind(device, "connected").as((connected) => connected ? "Connected" : "Paired")
        }
      )
    }
  );
};

// src/components/menus/bluetooth/devices/device/index.tsx
var BluetoothDevice = ({ device, connectedDevices }) => {
  const IsConnectingSpinner = () => {
    return /* @__PURE__ */ jsx2("revealer", { revealChild: bind(device, "connecting"), children: /* @__PURE__ */ jsx2(Spinner_default, { valign: Gtk4.Align.START, className: "spinner bluetooth" }) });
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      className: `bluetooth-element-item ${device}`,
      onClick: (_, event) => {
        if (!connectedDevices.includes(device.address) && isPrimaryClick(event)) {
          device.connect_device((res) => {
            console.info(res);
          });
        }
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsxs("box", { hexpand: true, halign: Gtk4.Align.START, className: "menu-button-container", children: [
          /* @__PURE__ */ jsx2(DeviceIcon2, { device, connectedDevices }),
          /* @__PURE__ */ jsxs("box", { vertical: true, valign: Gtk4.Align.CENTER, children: [
            /* @__PURE__ */ jsx2(DeviceName2, { device }),
            /* @__PURE__ */ jsx2(DeviceStatus, { device })
          ] })
        ] }),
        /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx2(IsConnectingSpinner, {}) })
      ] })
    }
  );
};

// src/components/menus/bluetooth/devices/DeviceListItem.tsx
var DeviceListItem = ({ btDevice, connectedDevices }) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(BluetoothDevice, { device: btDevice, connectedDevices }),
    /* @__PURE__ */ jsx2(DeviceControls, { device: btDevice, connectedDevices })
  ] });
};

// src/components/menus/bluetooth/devices/index.tsx
var BluetoothDevices = () => {
  const deviceListBinding = Variable.derive(
    [bind(bluetoothService, "devices"), bind(bluetoothService, "isPowered")],
    () => {
      const availableDevices = getAvailableBluetoothDevices();
      const connectedDevices = getConnectedBluetoothDevices();
      if (availableDevices.length === 0) {
        return /* @__PURE__ */ jsx2(NoBluetoothDevices, {});
      }
      if (!bluetoothService.adapter?.powered) {
        return /* @__PURE__ */ jsx2(BluetoothDisabled, {});
      }
      return availableDevices.map((btDevice) => {
        return /* @__PURE__ */ jsx2(DeviceListItem, { btDevice, connectedDevices });
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "menu-items-section",
      onDestroy: () => {
        deviceListBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller bluetooth", children: /* @__PURE__ */ jsx2("box", { className: "menu-content", vertical: true, children: deviceListBinding() }) })
    }
  );
};

// src/components/shared/Separator.tsx
var Separator = class extends astalify(Gtk4.Separator) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Separator.
   * @param props - The properties for the Separator component.
   * @memberof Separator
   */
  constructor(props) {
    super(props);
  }
};
var Separator_default = Separator;

// src/components/menus/bluetooth/header/Controls/ToggleSwitch.tsx
var isPowered = Variable(false);
Variable.derive([bind(bluetoothService, "isPowered")], (isOn) => {
  return isPowered.set(isOn);
});
var ToggleSwitch = () => /* @__PURE__ */ jsx2(
  "switch",
  {
    className: "menu-switch bluetooth",
    halign: Gtk4.Align.END,
    hexpand: true,
    active: bluetoothService.isPowered,
    setup: (self) => {
      self.connect("notify::active", () => {
        bluetoothService.adapter?.set_powered(self.active);
      });
    }
  }
);

// src/components/menus/bluetooth/header/Controls/helper.ts
var isDiscovering = Variable(false);
var discoveringBinding;
Variable.derive([bind(bluetoothService, "adapter")], () => {
  discoveringBinding?.drop();
  discoveringBinding = void 0;
  if (!bluetoothService.adapter) {
    return;
  }
  discoveringBinding = Variable.derive([bind(bluetoothService.adapter, "discovering")], (discovering) => {
    isDiscovering.set(discovering);
  });
});

// src/components/menus/bluetooth/header/Controls/DiscoverButton.tsx
var DiscoverButton = () => /* @__PURE__ */ jsx2(
  "button",
  {
    className: "menu-icon-button search bluetooth",
    valign: Gtk4.Align.CENTER,
    onClick: (_, self) => {
      if (!isPrimaryClick(self)) {
        return;
      }
      if (bluetoothService.adapter?.discovering) {
        return bluetoothService.adapter.stop_discovery();
      }
      bluetoothService.adapter?.start_discovery();
      const discoveryTimeout = 12e3;
      timeout(discoveryTimeout, () => {
        if (bluetoothService.adapter?.discovering) {
          bluetoothService.adapter.stop_discovery();
        }
      });
    },
    children: /* @__PURE__ */ jsx2(
      "icon",
      {
        className: bind(isDiscovering).as((isDiscovering2) => isDiscovering2 ? "spinning-icon" : ""),
        icon: "view-refresh-symbolic"
      }
    )
  }
);

// src/components/menus/bluetooth/header/Controls/index.tsx
var Controls2 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "controls-container", valign: Gtk4.Align.START, children: [
    /* @__PURE__ */ jsx2(ToggleSwitch, {}),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator bluetooth" }),
    /* @__PURE__ */ jsx2(DiscoverButton, {})
  ] });
};

// src/components/menus/bluetooth/header/index.tsx
var Header3 = () => {
  const MenuLabel2 = () => {
    return /* @__PURE__ */ jsx2("label", { className: "menu-label", valign: Gtk4.Align.CENTER, halign: Gtk4.Align.START, label: "Bluetooth" });
  };
  return /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, valign: Gtk4.Align.START, children: [
    /* @__PURE__ */ jsx2(MenuLabel2, {}),
    /* @__PURE__ */ jsx2(Controls2, {})
  ] });
};

// src/components/menus/bluetooth/index.tsx
var bluetooth_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "bluetoothmenu",
      transition: bind(options_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items bluetooth", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-items-container bluetooth", halign: Gtk4.Align.FILL, vertical: true, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-section-container bluetooth", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, {}),
        /* @__PURE__ */ jsx2(BluetoothDevices, {})
      ] }) }) })
    }
  );
};

// src/components/menus/media/components/helpers.ts
import AstalMpris3 from "gi://AstalMpris?version=0.1";
var { tint, color } = options_default.theme.bar.menus.menu.media.card;
var curPlayer = Variable("");
var generateAlbumArt = (imageUrl) => {
  const userTint = tint.get();
  const userHexColor = color.get();
  const r = parseInt(userHexColor.slice(1, 3), 16);
  const g = parseInt(userHexColor.slice(3, 5), 16);
  const b = parseInt(userHexColor.slice(5, 7), 16);
  const alpha = userTint / 100;
  const css = `background-image: linear-gradient(
                rgba(${r}, ${g}, ${b}, ${alpha}),
                rgba(${r}, ${g}, ${b}, ${alpha}),
                ${userHexColor} 65em
            ), url("${imageUrl}");`;
  return css;
};
var getBackground = () => {
  return Variable.derive([bind(color), bind(tint), bind(mediaArtUrl)], (_, __, artUrl) => {
    return generateAlbumArt(artUrl);
  })();
};

// src/components/menus/media/components/MediaContainer.tsx
var MediaContainer = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items media", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-items-container media", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-section-container", children: /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: false, children: /* @__PURE__ */ jsx2("box", { className: "menu-content", css: getBackground(), halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children }) }) }) }) });
};

// src/components/menus/media/components/title/SongName.tsx
var SongName = () => {
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-name", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-name-label",
      label: bind(mediaTitle),
      maxWidthChars: 31,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/SongAuthor.tsx
var { hideAuthor } = options_default.menus.media;
var SongAuthor = () => {
  if (hideAuthor.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-author", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-author-label",
      label: bind(mediaArtist),
      maxWidthChars: 35,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/SongAlbum.tsx
var { hideAlbum } = options_default.menus.media;
var SongAlbum = () => {
  if (hideAlbum.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-album", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-album-label",
      label: bind(mediaAlbum),
      maxWidthChars: 40,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/index.tsx
var MediaInfo = () => {
  return /* @__PURE__ */ jsxs("box", { className: "media-indicator-current-media-info", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(SongName, {}),
    /* @__PURE__ */ jsx2(SongAuthor, {}),
    /* @__PURE__ */ jsx2(SongAlbum, {})
  ] });
};

// src/components/menus/media/components/controls/Tracks.tsx
var NextTrack = () => {
  const className = bind(canGoNext).as((skippable) => {
    const nextStatus = skippable ? "enabled" : "disabled";
    return `media-indicator-control-button next ${nextStatus}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_go_next) {
      currentPlayer.next();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control next", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Next Track",
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.next })
    }
  ) });
};
var PreviousTrack = () => {
  const className = bind(canGoPrevious).as((rewindable) => {
    const prevStatus = rewindable ? "enabled" : "disabled";
    return `media-indicator-control-button prev ${prevStatus}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_go_previous) {
      currentPlayer.previous();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Previous Track",
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.prev })
    }
  );
};

// src/components/menus/media/components/controls/helpers.ts
import AstalMpris4 from "gi://AstalMpris?version=0.1";

// src/lib/icons/icons2.ts
var icons2_default = {
  missing: "image-missing-symbolic",
  nix: {
    nix: "nix-snowflake-symbolic"
  },
  app: {
    terminal: "terminal-symbolic"
  },
  fallback: {
    executable: "application-x-executable",
    notification: "dialog-information-symbolic",
    video: "video-x-generic-symbolic",
    audio: "audio-x-generic-symbolic"
  },
  ui: {
    close: "window-close-symbolic",
    colorpicker: "color-select-symbolic",
    info: "info-symbolic",
    link: "external-link-symbolic",
    lock: "system-lock-screen-symbolic",
    menu: "open-menu-symbolic",
    refresh: "view-refresh-symbolic",
    search: "system-search-symbolic",
    settings: "emblem-system-symbolic",
    themes: "preferences-desktop-theme-symbolic",
    tick: "object-select-symbolic",
    time: "hourglass-symbolic",
    toolbars: "toolbars-symbolic",
    warning: "dialog-warning-symbolic",
    arrow: {
      right: "pan-end-symbolic",
      left: "pan-start-symbolic",
      down: "pan-down-symbolic",
      up: "pan-up-symbolic"
    }
  },
  audio: {
    mic: {
      muted: "microphone-disabled-symbolic",
      low: "microphone-sensitivity-low-symbolic",
      medium: "microphone-sensitivity-medium-symbolic",
      high: "microphone-sensitivity-high-symbolic"
    },
    volume: {
      muted: "audio-volume-muted-symbolic",
      low: "audio-volume-low-symbolic",
      medium: "audio-volume-medium-symbolic",
      high: "audio-volume-high-symbolic",
      overamplified: "audio-volume-overamplified-symbolic"
    },
    type: {
      headset: "audio-headphones-symbolic",
      speaker: "audio-speakers-symbolic",
      card: "audio-card-symbolic"
    },
    mixer: "mixer-symbolic"
  },
  powerprofile: {
    balanced: "power-profile-balanced-symbolic",
    "power-saver": "power-profile-power-saver-symbolic",
    performance: "power-profile-performance-symbolic"
  },
  asusctl: {
    profile: {
      Balanced: "power-profile-balanced-symbolic",
      Quiet: "power-profile-power-saver-symbolic",
      Performance: "power-profile-performance-symbolic"
    },
    mode: {
      Integrated: "processor-symbolic",
      Hybrid: "controller-symbolic"
    }
  },
  battery: {
    charging: "battery-flash-symbolic",
    warning: "battery-empty-symbolic"
  },
  bluetooth: {
    enabled: "bluetooth-active-symbolic",
    disabled: "bluetooth-disabled-symbolic"
  },
  brightness: {
    indicator: "display-brightness-symbolic",
    keyboard: "keyboard-brightness-symbolic",
    screen: "display-brightness-symbolic"
  },
  powermenu: {
    sleep: "weather-clear-night-symbolic",
    reboot: "system-reboot-symbolic",
    logout: "system-log-out-symbolic",
    shutdown: "system-shutdown-symbolic"
  },
  recorder: {
    recording: "media-record-symbolic"
  },
  notifications: {
    noisy: "org.gnome.Settings-notifications-symbolic",
    silent: "notifications-disabled-symbolic",
    message: "chat-bubbles-symbolic"
  },
  trash: {
    full: "user-trash-full-symbolic",
    empty: "user-trash-symbolic"
  },
  mpris: {
    shuffle: {
      enabled: "media-playlist-shuffle-symbolic",
      disabled: "media-playlist-consecutive-symbolic"
    },
    loop: {
      none: "media-playlist-repeat-symbolic",
      track: "media-playlist-repeat-song-symbolic",
      playlist: "media-playlist-repeat-symbolic"
    },
    playing: "media-playback-pause-symbolic",
    paused: "media-playback-start-symbolic",
    stopped: "media-playback-start-symbolic",
    prev: "media-skip-backward-symbolic",
    next: "media-skip-forward-symbolic"
  },
  system: {
    cpu: "org.gnome.SystemMonitor-symbolic",
    ram: "drive-harddisk-solidstate-symbolic",
    temp: "temperature-symbolic"
  },
  color: {
    dark: "dark-mode-symbolic",
    light: "light-mode-symbolic"
  },
  weather: {
    warning: "dialog-warning-symbolic",
    sunny: "weather-clear-symbolic",
    clear: "weather-clear-night-symbolic",
    partly_cloudy: "weather-few-clouds-symbolic",
    partly_cloudy_night: "weather-few-clouds-night-symbolic",
    cloudy: "weather-overcast-symbolic",
    overcast: "weather-overcast-symbolic",
    mist: "weather-overcast-symbolic",
    patchy_rain_nearby: "weather-showers-scattered-symbolic",
    patchy_rain_possible: "weather-showers-scattered-symbolic",
    patchy_snow_possible: "weather-snow-symbolic",
    patchy_sleet_possible: "weather-snow-symbolic",
    patchy_freezing_drizzle_possible: "weather-showers-scattered-symbolic",
    thundery_outbreaks_possible: "weather-overcast-symbolic",
    blowing_snow: "weather-snow-symbolic",
    blizzard: "weather-snow-symbolic",
    fog: "weather-fog-symbolic",
    freezing_fog: "weather-fog-symbolic",
    patchy_light_drizzle: "weather-showers-scattered-symbolic",
    light_drizzle: "weather-showers-symbolic",
    freezing_drizzle: "weather-showers-symbolic",
    heavy_freezing_drizzle: "weather-showers-symbolic",
    patchy_light_rain: "weather-showers-scattered-symbolic",
    light_rain: "weather-showers-symbolic",
    moderate_rain_at_times: "weather-showers-symbolic",
    moderate_rain: "weather-showers-symbolic",
    heavy_rain_at_times: "weather-showers-symbolic",
    heavy_rain: "weather-showers-symbolic",
    light_freezing_rain: "weather-showers-symbolic",
    moderate_or_heavy_freezing_rain: "weather-showers-symbolic",
    light_sleet: "weather-snow-symbolic",
    moderate_or_heavy_sleet: "weather-snow-symbolic",
    patchy_light_snow: "weather-snow-symbolic",
    light_snow: "weather-snow-symbolic",
    patchy_moderate_snow: "weather-snow-symbolic",
    moderate_snow: "weather-snow-symbolic",
    patchy_heavy_snow: "weather-snow-symbolic",
    heavy_snow: "weather-snow-symbolic",
    ice_pellets: "weather-showers-symbolic",
    light_rain_shower: "weather-showers-symbolic",
    moderate_or_heavy_rain_shower: "weather-showers-symbolic",
    torrential_rain_shower: "weather-showers-symbolic",
    light_sleet_showers: "weather-showers-symbolic",
    moderate_or_heavy_sleet_showers: "weather-showers-symbolic",
    light_snow_showers: "weather-snow-symbolic",
    moderate_or_heavy_snow_showers: "weather-snow-symbolic",
    light_showers_of_ice_pellets: "weather-showers-symbolic",
    moderate_or_heavy_showers_of_ice_pellets: "weather-showers-symbolic",
    patchy_light_rain_with_thunder: "weather-showers-scattered-symbolic",
    moderate_or_heavy_rain_with_thunder: "weather-showers-symbolic",
    moderate_or_heavy_rain_in_area_with_thunder: "weather-showers-symbolic",
    patchy_light_snow_with_thunder: "weather-snow-symbolic",
    moderate_or_heavy_snow_with_thunder: "weather-snow-symbolic"
  }
};

// src/components/menus/media/components/controls/helpers.ts
var isLoopActive = (status) => {
  return [AstalMpris4.Loop.PLAYLIST, AstalMpris4.Loop.TRACK].includes(status) ? "active" : "";
};
var loopIconMap = {
  [AstalMpris4.Loop.NONE]: "none",
  [AstalMpris4.Loop.UNSUPPORTED]: "none",
  [AstalMpris4.Loop.TRACK]: "track",
  [AstalMpris4.Loop.PLAYLIST]: "playlist"
};
var playbackIconMap = {
  [AstalMpris4.PlaybackStatus.PLAYING]: "playing",
  [AstalMpris4.PlaybackStatus.PAUSED]: "paused",
  [AstalMpris4.PlaybackStatus.STOPPED]: "stopped"
};
var loopTooltipMap = {
  [AstalMpris4.Loop.NONE]: "Not Looping",
  [AstalMpris4.Loop.UNSUPPORTED]: "Unsupported",
  [AstalMpris4.Loop.TRACK]: "Looping Track",
  [AstalMpris4.Loop.PLAYLIST]: "Looping Playlist"
};
var getPlaybackIcon = (playbackStatus2) => {
  const playbackIcon = playbackIconMap[playbackStatus2];
  const mprisIcons = icons2_default.mpris;
  return mprisIcons[playbackIcon];
};
var isShuffleActive = (status) => {
  if (status === AstalMpris4.Shuffle.ON) {
    return "active";
  }
  return "";
};
var getNextPlayer = () => {
  const currentPlayer = activePlayer.get();
  if (currentPlayer === void 0) {
    return;
  }
  const currentPlayerIndex = mprisService.get_players().findIndex((player) => player.busName === currentPlayer.busName);
  const totalPlayers = mprisService.get_players().length;
  if (totalPlayers === 1) {
    return activePlayer.set(mprisService.get_players()[0]);
  }
  return activePlayer.set(mprisService.get_players()[(currentPlayerIndex + 1) % totalPlayers]);
};
var getPreviousPlayer = () => {
  const currentPlayer = activePlayer.get();
  if (currentPlayer === void 0) {
    return;
  }
  const currentPlayerIndex = mprisService.get_players().findIndex((player) => player.busName === currentPlayer.busName);
  const totalPlayers = mprisService.get_players().length;
  if (totalPlayers === 1) {
    return activePlayer.set(mprisService.get_players()[0]);
  }
  return activePlayer.set(mprisService.get_players()[(currentPlayerIndex - 1 + totalPlayers) % totalPlayers]);
};

// src/components/menus/media/components/controls/PlayPause.tsx
import AstalMpris5 from "gi://AstalMpris?version=0.1";
var PlayPause = () => {
  const className = bind(canPlay).as((canPlay2) => {
    return `media-indicator-control-button play ${canPlay2 ? "enabled" : "disabled"}`;
  });
  const icon13 = bind(playbackStatus).as((status) => {
    return getPlaybackIcon(status);
  });
  const tooltipText = bind(playbackStatus).as((playbackStatus2) => {
    return playbackStatus2 === AstalMpris5.PlaybackStatus.PLAYING ? "Pause" : "Play";
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_play) {
      currentPlayer.play_pause();
    }
  };
  return /* @__PURE__ */ jsx2("button", { className, halign: Gtk4.Align.CENTER, hasTooltip: true, tooltipText, onClick, children: /* @__PURE__ */ jsx2("icon", { icon: icon13 }) });
};

// src/components/menus/media/components/controls/Modes.tsx
import AstalMpris6 from "gi://AstalMpris?version=0.1";
var Loop = () => {
  const className = bind(loopStatus).as((status) => {
    const isActive3 = isLoopActive(status);
    const loopingAllowed = status !== null && status !== AstalMpris6.Loop.UNSUPPORTED ? "enabled" : "disabled";
    return `media-indicator-control-button loop ${isActive3} ${loopingAllowed}`;
  });
  const tooltipText = bind(loopStatus).as((status) => {
    if (status === null) {
      return "Unavailable";
    }
    return loopTooltipMap[status];
  });
  const iconBinding = bind(loopStatus).as((status) => {
    if (status === null || status === AstalMpris6.Loop.UNSUPPORTED) {
      return icons_default.mpris.loop.none;
    }
    return icons_default.mpris.loop[loopIconMap[status]];
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.loopStatus !== AstalMpris6.Loop.UNSUPPORTED) {
      currentPlayer.loop();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control loop", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText,
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: iconBinding })
    }
  ) });
};
var Shuffle = () => {
  const className = bind(shuffleStatus).as((status) => {
    const isActive3 = isShuffleActive(status);
    const shuffleAllowed = status !== null && status !== AstalMpris6.Shuffle.UNSUPPORTED ? "enabled" : "disabled";
    return `media-indicator-control-button shuffle ${isActive3} ${shuffleAllowed}`;
  });
  const tooltipText = bind(shuffleStatus).as((status) => {
    if (status === null || status === AstalMpris6.Shuffle.UNSUPPORTED) {
      return "Unavailable";
    }
    const shuffleTooltipMap = {
      [AstalMpris6.Shuffle.ON]: "Shuffling",
      [AstalMpris6.Shuffle.OFF]: "Not Shuffling",
      [AstalMpris6.Shuffle.UNSUPPORTED]: "Unsupported"
    };
    return shuffleTooltipMap[status];
  });
  const onClick = (_, self) => {
    if (!isPrimaryClick(self)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.shuffleStatus !== AstalMpris6.Shuffle.UNSUPPORTED) {
      currentPlayer.shuffle();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control shuffle", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText,
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.shuffle.enabled })
    }
  ) });
};

// src/components/menus/media/components/controls/Players.tsx
var PreviousPlayer = () => {
  const className = bind(mprisService, "players").as((players) => {
    const isDisabled = players.length <= 1 ? "disabled" : "enabled";
    return `media-indicator-control-button ${isDisabled}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const isDisabled = mprisService.get_players().length <= 1;
    if (!isDisabled) {
      getPreviousPlayer();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Previous Player",
      onClick,
      children: /* @__PURE__ */ jsx2("label", { label: "\u{F0141}" })
    }
  );
};
var NextPlayer = () => {
  const className = bind(mprisService, "players").as((players) => {
    const isDisabled = players.length <= 1 ? "disabled" : "enabled";
    return `media-indicator-control-button ${isDisabled}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const isDisabled = mprisService.get_players().length <= 1;
    if (!isDisabled) {
      getNextPlayer();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Next Player",
      onClick,
      children: /* @__PURE__ */ jsx2("label", { label: "\u{F0142}" })
    }
  );
};

// src/components/menus/media/components/controls/index.tsx
var MediaControls = () => {
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-player-controls", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "media-indicator-current-controls", halign: Gtk4.Align.CENTER, children: [
    /* @__PURE__ */ jsx2(PreviousPlayer, {}),
    /* @__PURE__ */ jsx2(Shuffle, {}),
    /* @__PURE__ */ jsx2(PreviousTrack, {}),
    /* @__PURE__ */ jsx2(PlayPause, {}),
    /* @__PURE__ */ jsx2(NextTrack, {}),
    /* @__PURE__ */ jsx2(Loop, {}),
    /* @__PURE__ */ jsx2(NextPlayer, {})
  ] }) });
};

// src/components/menus/media/components/timebar/index.tsx
var { displayTimeTooltip } = options_default.menus.media;
var MediaSlider = () => {
  const sliderValue = Variable.derive([bind(activePlayer), bind(currentPosition)], (player, position2) => {
    if (player === void 0) {
      return 0;
    }
    if (player.length > 0) {
      return position2 / player.length;
    }
    return 0;
  });
  const dragHandler = ({ value }) => {
    const currentPlayer = activePlayer.get();
    if (currentPlayer !== void 0) {
      currentPlayer.set_position(value * currentPlayer.length);
    }
  };
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "media-indicator-current-progress-bar",
      hexpand: true,
      onDestroy: () => {
        sliderValue.drop();
      },
      children: /* @__PURE__ */ jsx2(
        "slider",
        {
          className: "menu-slider media progress",
          hasTooltip: bind(displayTimeTooltip),
          tooltipText: bind(timeStamp),
          value: sliderValue(),
          onDragged: dragHandler,
          drawValue: false,
          hexpand: true
        }
      )
    }
  );
};

// src/components/menus/media/components/timelabel/index.tsx
var { displayTime } = options_default.menus.media;
var MediaTimeStamp = () => {
  if (!displayTime.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-time-label", hexpand: true, children: /* @__PURE__ */ jsx2("label", { className: "time-label", label: bind(timeStamp), hexpand: true }) });
};

// src/components/menus/media/index.tsx
var { transition: transition2 } = options_default.menus;
var media_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "mediamenu",
      transition: bind(transition2).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsxs(MediaContainer, { children: [
        /* @__PURE__ */ jsx2(MediaInfo, {}),
        /* @__PURE__ */ jsx2(MediaControls, {}),
        /* @__PURE__ */ jsx2(MediaSlider, {}),
        /* @__PURE__ */ jsx2(MediaTimeStamp, {})
      ] })
    }
  );
};

// src/components/menus/notifications/controls/MenuLabel.tsx
var MenuLabel = () => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-label-container notifications", halign: Gtk4.Align.START, valign: Gtk4.Align.CENTER, expand: true, children: /* @__PURE__ */ jsx2("label", { className: "menu-label notifications", label: "Notifications" }) });
};

// src/components/menus/notifications/controls/DndSwitch.tsx
var DndSwitch = () => {
  return /* @__PURE__ */ jsx2(
    "switch",
    {
      className: "menu-switch notifications",
      valign: Gtk4.Align.CENTER,
      active: bind(notifdService, "dontDisturb").as((dontDisturb) => !dontDisturb),
      setup: (self) => {
        self.connect("notify::active", () => {
          notifdService.set_dont_disturb(!self.active);
        });
      }
    }
  );
};

// src/globals/notification.ts
var { clearDelay } = options_default.notifications;
var removingNotifications2 = Variable(false);
var getNotificationIcon = (app_name, app_icon, app_entry) => {
  let icon13 = icons2_default.fallback.notification;
  if (lookUpIcon(app_name) || lookUpIcon(app_name.toLowerCase() || "")) {
    icon13 = lookUpIcon(app_name) ? app_name : lookUpIcon(app_name.toLowerCase()) ? app_name.toLowerCase() : "";
  }
  if (lookUpIcon(app_icon) && icon13 === "") {
    icon13 = app_icon;
  }
  if (lookUpIcon(app_entry || "") && icon13 === "") {
    icon13 = app_entry || "";
  }
  return icon13;
};
var clearNotifications = async (notifications, delay) => {
  removingNotifications2.set(true);
  for (const notification of notifications) {
    notification.dismiss();
    await new Promise((resolve) => setTimeout(resolve, delay));
  }
  removingNotifications2.set(false);
};
var clearAllNotifications2 = async () => {
  try {
    clearNotifications(notifdService.get_notifications(), clearDelay.get());
  } catch (error) {
    errorHandler(error);
  }
};
globalThis["removingNotifications"] = removingNotifications2;
globalThis["clearAllNotifications"] = clearAllNotifications2;

// src/components/menus/notifications/controls/ClearNotificationsButton.tsx
var { clearDelay: clearDelay2 } = options_default.notifications;
var ClearNotificationsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "clear-notifications-button",
      tooltipText: "Clear Notifications",
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (removingNotifications.get()) {
          return;
        }
        clearNotifications(notifdService.get_notifications(), clearDelay2.get());
      },
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: bind(removingNotifications).as((removing) => {
            return removing ? "clear-notifications-label txt-icon removing" : "clear-notifications-label txt-icon";
          }),
          label: "\uF2D3"
        }
      )
    }
  );
};

// src/components/menus/notifications/controls/index.tsx
var Controls3 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "notification-menu-controls", expand: false, vertical: false, children: [
    /* @__PURE__ */ jsx2(MenuLabel, {}),
    /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.END, valign: Gtk4.Align.CENTER, expand: false, children: [
      /* @__PURE__ */ jsx2(DndSwitch, {}),
      /* @__PURE__ */ jsx2(
        Separator_default,
        {
          halign: Gtk4.Align.CENTER,
          vexpand: true,
          className: "menu-separator notification-controls"
        }
      ),
      /* @__PURE__ */ jsx2(ClearNotificationsButton, {})
    ] })
  ] });
};

// src/components/notifications/Actions.tsx
var ActionButton2 = ({ notification, action }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "notification-action-buttons",
      hexpand: true,
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (action.id.includes("scriptAction:-")) {
          execAsync(`${action.id.replace("scriptAction:-", "")}`).catch((err) => console.error(err));
          notification.dismiss();
        } else {
          notification.invoke(action.id);
          notification.dismiss();
        }
      },
      children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, hexpand: true, children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "notification-action-buttons-label",
          label: action.label,
          hexpand: true,
          max_width_chars: 15,
          truncate: true,
          wrap: true
        }
      ) })
    }
  );
};
var Actions = ({ notification, showActions }) => {
  return /* @__PURE__ */ jsx2("revealer", { transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN, revealChild: showActions ? false : true, children: /* @__PURE__ */ jsx2("eventbox", { children: /* @__PURE__ */ jsx2("box", { className: "notification-card-actions", hexpand: true, valign: Gtk4.Align.END, children: notification.get_actions().map((action) => {
    return /* @__PURE__ */ jsx2(ActionButton2, { notification, action });
  }) }) }) });
};

// src/components/notifications/helpers.ts
var { ignore: ignore3, timeout: popupTimeout, autoDismiss } = options_default.notifications;
var notifHasImg = (notification) => {
  return notification.image && notification.image.length || notification.appIcon ? true : false;
};
var trackActiveMonitor = (curMonitor2) => {
  Variable.derive([bind(hyprlandService, "focusedMonitor")], (monitor3) => {
    curMonitor2.set(monitor3.id);
  });
};
var trackPopupNotifications = (popupNotifications2) => {
  notifdService.connect("notified", (_, id) => {
    const notification = notifdService.get_notification(id);
    const doNotDisturb = notifdService.dontDisturb;
    if (isNotificationIgnored(notification, ignore3.get())) {
      notification.dismiss();
      return;
    }
    if (doNotDisturb) {
      return;
    }
    popupNotifications2.set([...popupNotifications2.get(), notification]);
    timeout(popupTimeout.get(), () => {
      dropNotificationPopup(notification, popupNotifications2);
    });
  });
  notifdService.connect("resolved", (_, id) => {
    const filteredPopups = popupNotifications2.get().filter((popupNotif) => popupNotif.id !== id);
    popupNotifications2.set(filteredPopups);
  });
};
var dropNotificationPopup = (notificationToDismiss, popupNotifications2) => {
  const currentPopups = popupNotifications2.get();
  const undismissedNotifications = currentPopups.filter((popupNotif) => popupNotif.id !== notificationToDismiss.id);
  popupNotifications2.set(undismissedNotifications);
};
var trackAutoTimeout = () => {
  autoDismiss.subscribe((shouldAutoDismiss) => {
    notifdService.set_ignore_timeout(!shouldAutoDismiss);
  });
};

// src/components/notifications/Body.tsx
var Body = ({ notification }) => {
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-body", valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "notification-card-body-label",
      halign: Gtk4.Align.START,
      label: notification.body,
      maxWidthChars: !notifHasImg(notification) ? 35 : 28,
      lines: 2,
      truncate: true,
      wrap: true,
      justify: Gtk4.Justification.LEFT,
      hexpand: true,
      useMarkup: true,
      onRealize: (self) => self.set_markup(notification.body)
    }
  ) });
};

// src/components/notifications/CloseButton.tsx
var CloseButton = ({ notification }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "close-notification-button",
      onClick: () => {
        notification.dismiss();
      },
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon notification-close", label: "\u{F015C}", halign: Gtk4.Align.CENTER })
    }
  );
};

// src/components/notifications/Header.tsx
var { military } = options_default.menus.clock.time;
var NotificationIcon = ({ notification }) => {
  const { appName, appIcon, desktopEntry } = notification;
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-header", halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2("box", { css: "min-width: 2rem; min-height: 2rem; ", children: /* @__PURE__ */ jsx2("icon", { className: "notification-icon", icon: getNotificationIcon(appName, appIcon, desktopEntry) }) }) });
};
var SummaryLabel = ({ notification }) => {
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-header", halign: Gtk4.Align.START, valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "notification-card-header-label",
      halign: Gtk4.Align.START,
      onRealize: (self) => self.set_markup(notification.summary),
      label: notification.summary,
      maxWidthChars: !notifHasImg(notification) ? 30 : 19,
      hexpand: true,
      vexpand: true,
      truncate: true,
      wrap: true
    }
  ) });
};
var TimeLabel = ({ notification }) => {
  const time2 = (time3, format3 = "%I:%M %p") => {
    return default2.DateTime.new_from_unix_local(time3).format(military.get() ? "%H:%M" : format3) || "--";
  };
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-header menu", halign: Gtk4.Align.END, valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2("label", { className: "notification-time", label: time2(notification.time), vexpand: true }) });
};
var Header4 = ({ notification }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: false, hexpand: true, children: [
    /* @__PURE__ */ jsx2(NotificationIcon, { notification }),
    /* @__PURE__ */ jsx2(SummaryLabel, { notification }),
    /* @__PURE__ */ jsx2(TimeLabel, { notification })
  ] });
};

// src/components/notifications/Image.tsx
var ImageItem = ({ notification }) => {
  if (notification.appIcon && !isAnImage(notification.appIcon)) {
    return /* @__PURE__ */ jsx2(
      "icon",
      {
        className: "notification-card-image icon",
        halign: Gtk4.Align.CENTER,
        vexpand: false,
        icon: notification.appIcon
      }
    );
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-card-image",
      halign: Gtk4.Align.CENTER,
      vexpand: false,
      css: `
                background-image: url('${notification.image || notification.appIcon}');
            `
    }
  );
};
var Image = ({ notification }) => {
  if (!notifHasImg(notification)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-card-image-container",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      vexpand: false,
      children: /* @__PURE__ */ jsx2(ImageItem, { notification })
    }
  );
};

// src/components/notifications/Notification.tsx
var NotificationContent = ({ actionBox, notification }) => {
  return /* @__PURE__ */ jsxs("box", { className: `notification-card-content ${!notifHasImg(notification) ? "noimg" : ""}`, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(Header4, { notification }),
    /* @__PURE__ */ jsx2(Body, { notification }),
    actionBox
  ] });
};
var NotificationCard = ({ notification, showActions, ...props }) => {
  const actionBox = notification.get_actions().length ? /* @__PURE__ */ jsx2(Actions, { notification, showActions }) : null;
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      onClick: (_, event) => {
        if (isSecondaryClick(event)) {
          notification.dismiss();
        }
      },
      onHover: () => {
        if (actionBox !== null && showActions === true) {
          actionBox.revealChild = true;
        }
      },
      onHoverLost: () => {
        if (actionBox !== null && showActions === true) {
          actionBox.revealChild = false;
        }
      },
      children: /* @__PURE__ */ jsxs("box", { className: "notification-card", ...props, hexpand: true, valign: Gtk4.Align.START, children: [
        /* @__PURE__ */ jsx2(Image, { notification }),
        /* @__PURE__ */ jsx2(NotificationContent, { notification, actionBox }),
        /* @__PURE__ */ jsx2(CloseButton, { notification })
      ] })
    }
  );
};

// src/components/menus/notifications/notification/Placeholder.tsx
var Placeholder = () => {
  return /* @__PURE__ */ jsx2("box", { className: "notification-label-container", halign: Gtk4.Align.CENTER, valign: Gtk4.Align.FILL, expand: true, children: /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.CENTER, vertical: true, expand: true, children: [
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: "placeholder-label dim bell txt-icon",
        label: bind(notifdService, "dontDisturb").as((dnd) => dnd ? "\u{F009B}" : "\u{F009A}"),
        valign: Gtk4.Align.CENTER
      }
    ),
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: "placeholder-label dim message",
        label: "You're all caught up :)",
        valign: Gtk4.Align.START
      }
    )
  ] }) });
};

// src/components/menus/notifications/notification/index.tsx
var { displayedTotal, ignore: ignore4, showActionsOnHover } = options_default.notifications;
var NotificationsContainer = ({ curPage }) => {
  return /* @__PURE__ */ jsx2("scrollable", { vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsx2("box", { className: "menu-content-container notifications", halign: Gtk4.Align.FILL, spacing: 0, vexpand: true, children: Variable.derive(
    [
      bind(notifdService, "notifications"),
      bind(curPage),
      bind(displayedTotal),
      bind(ignore4),
      bind(showActionsOnHover)
    ],
    (notifications, currentPage, totalDisplayed, ignored3, hoverActions) => {
      const filteredNotifications = filterNotifications(notifications, ignored3).sort(
        (a, b) => b.time - a.time
      );
      if (filteredNotifications.length <= 0) {
        return /* @__PURE__ */ jsx2(Placeholder, {});
      }
      const pageStart = (currentPage - 1) * totalDisplayed;
      const pageEnd = currentPage * totalDisplayed;
      return /* @__PURE__ */ jsx2(
        "box",
        {
          className: "notification-card-content-container",
          valign: Gtk4.Align.START,
          vexpand: false,
          vertical: true,
          children: filteredNotifications.slice(pageStart, pageEnd).map((notification) => {
            return /* @__PURE__ */ jsx2(
              NotificationCard,
              {
                className: "notification-card menu",
                notification,
                showActions: hoverActions
              }
            );
          })
        }
      );
    }
  )() }) });
};

// src/components/menus/notifications/pager/Buttons.tsx
var FirstPageButton = ({ curPage, currentPage }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.START,
      className: `pager-button left ${currentPage <= 1 ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          curPage.set(1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF100" })
    }
  );
};
var PreviousPageButton = ({ curPage, currentPage }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.START,
      className: `pager-button left ${currentPage <= 1 ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          curPage.set(currentPage <= 1 ? 1 : currentPage - 1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF104" })
    }
  );
};
var NextPageButton = ({
  curPage,
  currentPage,
  notifications,
  displayedTotal: displayedTotal5,
  dispTotal
}) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.END,
      className: `pager-button right ${currentPage >= Math.ceil(notifications.length / dispTotal) ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          const maxPage = Math.ceil(notifications.length / displayedTotal5.get());
          curPage.set(currentPage >= maxPage ? maxPage : currentPage + 1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF105" })
    }
  );
};
var LastPageButton = ({
  curPage,
  currentPage,
  notifications,
  displayedTotal: displayedTotal5,
  dispTotal
}) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.END,
      className: `pager-button right ${currentPage >= Math.ceil(notifications.length / dispTotal) ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          const maxPage = Math.ceil(notifications.length / displayedTotal5.get());
          curPage.set(maxPage);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\u{F013E}" })
    }
  );
};

// src/components/menus/notifications/pager/index.tsx
var { displayedTotal: displayedTotal2 } = options_default.notifications;
var { show: showPager } = options_default.theme.bar.menus.menu.notifications.pager;
var PageDisplay = ({ notifications, currentPage, dispTotal }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      hexpand: true,
      halign: Gtk4.Align.CENTER,
      className: "pager-label",
      label: `${currentPage} / ${Math.ceil(notifications.length / dispTotal) || 1}`
    }
  );
};
var NotificationPager = ({ curPage }) => {
  const pagerBinding = Variable.derive(
    [bind(curPage), bind(displayedTotal2), bind(notifdService, "notifications"), bind(showPager)],
    (currentPage, dispTotal, notifications, showPgr) => {
      if (showPgr === false || currentPage === 1 && notifications.length <= dispTotal) {
        return /* @__PURE__ */ jsx2("box", {});
      }
      return /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2(FirstPageButton, { curPage, currentPage }),
        /* @__PURE__ */ jsx2(PreviousPageButton, { curPage, currentPage }),
        /* @__PURE__ */ jsx2(PageDisplay, { notifications, currentPage, dispTotal }),
        /* @__PURE__ */ jsx2(
          NextPageButton,
          {
            curPage,
            currentPage,
            notifications,
            displayedTotal: displayedTotal2,
            dispTotal
          }
        ),
        /* @__PURE__ */ jsx2(
          LastPageButton,
          {
            curPage,
            currentPage,
            notifications,
            displayedTotal: displayedTotal2,
            dispTotal
          }
        )
      ] });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-menu-pager",
      hexpand: true,
      vexpand: false,
      onDestroy: () => {
        pagerBinding.drop();
      },
      children: pagerBinding()
    }
  );
};

// src/components/menus/notifications/helpers.ts
var { displayedTotal: displayedTotal3 } = options.notifications;
var handlePageBoundaries = (curPage) => {
  Variable.derive(
    [bind(curPage), bind(displayedTotal3), bind(notifdService, "notifications")],
    (currentPage, dispTotal, notifications) => {
      const isPageEmpty = notifications.length <= (currentPage - 1) * dispTotal;
      if (isPageEmpty) {
        const previousPage = currentPage <= 1 ? 1 : currentPage - 1;
        curPage.set(previousPage);
      }
    }
  );
};

// src/components/menus/notifications/index.tsx
var { transition: transition3 } = options_default.menus;
var notifications_default = () => {
  const curPage = Variable(1);
  handlePageBoundaries(curPage);
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "notificationsmenu",
      transition: bind(transition3).as((transition10) => RevealerTransitionMap[transition10]),
      onDestroy: () => {
        curPage.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { className: "notification-menu-content", css: "padding: 1px; margin: -1px;", hexpand: true, vexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "notification-card-container menu", hexpand: true, vexpand: true, vertical: true, children: [
        /* @__PURE__ */ jsx2(Controls3, {}),
        /* @__PURE__ */ jsx2(NotificationsContainer, { curPage }),
        /* @__PURE__ */ jsx2(NotificationPager, { curPage })
      ] }) })
    }
  );
};

// src/components/menus/calendar/time/MilitaryTime.tsx
var { military: military2, hideSeconds } = options_default.menus.clock.time;
var MilitaryTime = () => {
  const timeBinding = Variable.derive([bind(military2), bind(hideSeconds)], (is24hr, hideSeconds3) => {
    if (!is24hr) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "clock-content-time",
        label: bind(systemTime).as((time2) => {
          return time2?.format(hideSeconds3 ? "%H:%M" : "%H:%M:%S") || "";
        })
      }
    ) });
  });
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        timeBinding.drop();
      },
      children: timeBinding()
    }
  );
};

// src/components/menus/calendar/time/StandardTime.tsx
var { military: military3, hideSeconds: hideSeconds2 } = options_default.menus.clock.time;
var period = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format("%p") || "");
var StandardTime = () => {
  const CurrentTime = ({ hideSeconds: hideSeconds3 }) => {
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "clock-content-time",
        label: bind(systemTime).as((time2) => {
          return time2?.format(hideSeconds3 ? "%I:%M" : "%I:%M:%S") || "";
        })
      }
    ) });
  };
  const CurrentPeriod = () => {
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2("label", { className: "clock-content-period", valign: Gtk4.Align.END, label: bind(period) }) });
  };
  const timeBinding = Variable.derive([bind(military3), bind(hideSeconds2)], (is24hr, hideSeconds3) => {
    if (is24hr) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsxs("box", { children: [
      /* @__PURE__ */ jsx2(CurrentTime, { hideSeconds: hideSeconds3 }),
      /* @__PURE__ */ jsx2(CurrentPeriod, {})
    ] });
  });
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        timeBinding.drop();
      },
      children: timeBinding()
    }
  );
};

// src/components/menus/calendar/time/index.tsx
var TimeWidget = () => {
  return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-item-container clock", valign: Gtk4.Align.CENTER, halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "clock-content-items", valign: Gtk4.Align.CENTER, halign: Gtk4.Align.CENTER, hexpand: true, children: [
    /* @__PURE__ */ jsx2(StandardTime, {}),
    /* @__PURE__ */ jsx2(MilitaryTime, {})
  ] }) });
};

// src/components/shared/Calendar.tsx
var Calendar = class extends astalify(Gtk4.Calendar) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Calendar.
   * @param props - The properties for the Calendar component.
   * @memberof Calendar
   */
  constructor(props) {
    super(props);
  }
};
var Calendar_default = Calendar;

// src/components/menus/calendar/CalendarWidget.tsx
var CalendarWidget = () => {
  return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-item-container calendar", halign: Gtk4.Align.FILL, valign: Gtk4.Align.FILL, expand: true, children: /* @__PURE__ */ jsx2("box", { className: "calendar-container-box", children: /* @__PURE__ */ jsx2(
    Calendar_default,
    {
      className: "calendar-menu-widget",
      halign: Gtk4.Align.FILL,
      valign: Gtk4.Align.FILL,
      showDetails: false,
      expand: true,
      showDayNames: true,
      showHeading: true
    }
  ) }) });
};

// src/components/menus/calendar/weather/icon/index.tsx
var TodayIcon = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-weather today icon container",
      halign: Gtk4.Align.START,
      valign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "calendar-menu-weather today icon txt-icon",
          label: bind(globalWeatherVar).as(getWeatherStatusTextIcon)
        }
      )
    }
  );
};

// src/components/menus/calendar/weather/stats/index.tsx
var { unit: unit3 } = options_default.menus.clock.weather;
var TodayStats = () => {
  const temperatureBinding = Variable.derive([bind(globalWeatherVar2), bind(unit3)], getTemperature);
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "calendar-menu-weather today stats container",
      halign: Gtk4.Align.END,
      valign: Gtk4.Align.CENTER,
      vertical: true,
      onDestroy: () => {
        temperatureBinding.drop();
      },
      children: [
        /* @__PURE__ */ jsxs("box", { className: "weather wind", children: [
          /* @__PURE__ */ jsx2("label", { className: "weather wind icon txt-icon", label: "\uE27E" }),
          /* @__PURE__ */ jsx2("label", { className: "weather wind label", label: temperatureBinding() })
        ] }),
        /* @__PURE__ */ jsxs("box", { className: "weather precip", children: [
          /* @__PURE__ */ jsx2("label", { className: "weather precip icon txt-icon", label: "\uE371" }),
          /* @__PURE__ */ jsx2("label", { className: "weather precip label", label: bind(globalWeatherVar2).as(getRainChance) })
        ] })
      ]
    }
  );
};

// src/components/menus/calendar/weather/temperature/index.tsx
var { unit: unit4 } = options_default.menus.clock.weather;
var WeatherStatus = () => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: bind(globalWeatherVar2).as(
        (weather) => `calendar-menu-weather today condition label ${getWeatherIcon(Math.ceil(weather.current.temp_f)).color}`
      ),
      label: bind(globalWeatherVar2).as((weather) => weather.current.condition.text),
      truncate: true,
      tooltipText: bind(globalWeatherVar2).as((weather) => weather.current.condition.text)
    }
  ) });
};
var Temperature = () => {
  const labelBinding = Variable.derive([bind(globalWeatherVar2), bind(unit4)], getTemperature);
  const TemperatureLabel = () => {
    return /* @__PURE__ */ jsx2("label", { className: "calendar-menu-weather today temp label", label: labelBinding() });
  };
  const ThermometerIcon = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: bind(globalWeatherVar2).as(
          (weather) => `calendar-menu-weather today temp label icon txt-icon ${getWeatherIcon(Math.ceil(weather.current.temp_f)).color}`
        ),
        label: bind(globalWeatherVar2).as((weather) => getWeatherIcon(Math.ceil(weather.current.temp_f)).icon)
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-weather today temp container",
      valign: Gtk4.Align.CENTER,
      vertical: false,
      onDestroy: () => {
        labelBinding.drop();
      },
      hexpand: true,
      children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.CENTER, hexpand: true, children: [
        /* @__PURE__ */ jsx2(TemperatureLabel, {}),
        /* @__PURE__ */ jsx2(ThermometerIcon, {})
      ] })
    }
  );
};
var TodayTemperature = () => {
  return /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.CENTER, valign: Gtk4.Align.CENTER, vertical: true, children: [
    /* @__PURE__ */ jsx2(Temperature, {}),
    /* @__PURE__ */ jsx2(WeatherStatus, {})
  ] });
};

// src/components/menus/calendar/weather/hourly/helpers.ts
var getNextEpoch = (wthr, hoursFromNow) => {
  const currentEpoch = wthr.location.localtime_epoch;
  const epochAtHourStart = currentEpoch - currentEpoch % 3600;
  let nextEpoch = 3600 * hoursFromNow + epochAtHourStart;
  const curHour = new Date(currentEpoch * 1e3).getHours();
  if (curHour > 19) {
    const hoursToRewind = curHour - 19;
    nextEpoch = 3600 * hoursFromNow + epochAtHourStart - hoursToRewind * 3600;
  }
  return nextEpoch;
};
var getIconQuery = (weather, hoursFromNow) => {
  const nextEpoch = getNextEpoch(weather, hoursFromNow);
  const weatherAtEpoch = weather.forecast.forecastday[0].hour.find((h) => h.time_epoch === nextEpoch);
  if (weatherAtEpoch === void 0) {
    return "warning";
  }
  let iconQuery = weatherAtEpoch.condition.text.trim().toLowerCase().replaceAll(" ", "_");
  if (!weatherAtEpoch?.is_day && iconQuery === "partly_cloudy") {
    iconQuery = "partly_cloudy_night";
  }
  if (isValidWeatherIconTitle(iconQuery)) {
    return iconQuery;
  } else {
    return "warning";
  }
};

// src/components/menus/calendar/weather/hourly/icon/index.tsx
var HourlyIcon = ({ hoursFromNow }) => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-icon txt-icon",
      label: bind(globalWeatherVar2).as((weather) => {
        const iconQuery = getIconQuery(weather, hoursFromNow);
        const weatherIcn = weatherIcons[iconQuery] || weatherIcons["warning"];
        return weatherIcn;
      }),
      halign: Gtk4.Align.CENTER
    }
  ) });
};

// src/components/menus/calendar/weather/hourly/temperature/index.tsx
var { unit: unit5 } = options_default.menus.clock.weather;
var HourlyTemp = ({ hoursFromNow }) => {
  const weatherBinding = Variable.derive([bind(globalWeatherVar2), bind(unit5)], (weather, unitType) => {
    if (!Object.keys(weather).length) {
      return "-";
    }
    const nextEpoch = getNextEpoch(weather, hoursFromNow);
    const weatherAtEpoch = weather.forecast.forecastday[0].hour.find((h) => h.time_epoch === nextEpoch);
    if (unitType === "imperial") {
      return `${weatherAtEpoch ? Math.ceil(weatherAtEpoch.temp_f) : "-"}\xB0 F`;
    }
    return `${weatherAtEpoch ? Math.ceil(weatherAtEpoch.temp_c) : "-"}\xB0 C`;
  });
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-temp",
      label: weatherBinding(),
      onDestroy: () => {
        weatherBinding.drop();
      }
    }
  );
};

// src/components/menus/calendar/weather/hourly/time/index.tsx
var HourlyTime = ({ hoursFromNow }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-time",
      label: bind(globalWeatherVar2).as((weather) => {
        if (!Object.keys(weather).length) {
          return "-";
        }
        const nextEpoch = getNextEpoch(weather, hoursFromNow);
        const dateAtEpoch = new Date(nextEpoch * 1e3);
        let hours = dateAtEpoch.getHours();
        const ampm = hours >= 12 ? "PM" : "AM";
        hours = hours % 12 || 12;
        return `${hours}${ampm}`;
      })
    }
  );
};

// src/components/menus/calendar/weather/hourly/index.tsx
var HourlyTemperature = () => {
  return /* @__PURE__ */ jsx2("box", { className: "hourly-weather-container", halign: Gtk4.Align.FILL, vertical: false, hexpand: true, children: [1, 2, 3, 4].map((hoursFromNow) => /* @__PURE__ */ jsxs("box", { className: "hourly-weather-item", hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(HourlyTime, { hoursFromNow }),
    /* @__PURE__ */ jsx2(HourlyIcon, { hoursFromNow }),
    /* @__PURE__ */ jsx2(HourlyTemp, { hoursFromNow })
  ] })) });
};

// src/components/menus/calendar/weather/index.tsx
var WeatherWidget = ({ isEnabled }) => {
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-item-container weather", children: /* @__PURE__ */ jsx2("box", { className: "weather-container-box", children: /* @__PURE__ */ jsxs("box", { vertical: true, hexpand: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "calendar-menu-weather today", hexpand: true, children: [
      /* @__PURE__ */ jsx2(TodayIcon, {}),
      /* @__PURE__ */ jsx2(TodayTemperature, {}),
      /* @__PURE__ */ jsx2(TodayStats, {})
    ] }),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator weather" }),
    /* @__PURE__ */ jsx2(HourlyTemperature, {})
  ] }) }) });
};

// src/components/menus/calendar/index.tsx
var { transition: transition4 } = options_default.menus;
var { enabled: weatherEnabled } = options_default.menus.clock.weather;
var calendar_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "calendarmenu",
      transition: bind(transition4).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { css: "padding: 1px; margin: -1px;", children: bind(weatherEnabled).as((isWeatherEnabled) => {
        return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-content", vexpand: false, children: /* @__PURE__ */ jsx2("box", { className: "calendar-content-container", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "calendar-content-items", vertical: true, children: [
          /* @__PURE__ */ jsx2(TimeWidget, {}),
          /* @__PURE__ */ jsx2(CalendarWidget, {}),
          /* @__PURE__ */ jsx2(WeatherWidget, { isEnabled: isWeatherEnabled })
        ] }) }) });
      }) })
    }
  );
};

// src/components/menus/energy/profiles/helpers.ts
var renderUptime = (curUptime) => {
  const days = Math.floor(curUptime / (60 * 24));
  const hours = Math.floor(curUptime % (60 * 24) / 60);
  const minutes = Math.floor(curUptime % 60);
  return `\uF252 : ${days}d ${hours}h ${minutes}m`;
};

// src/components/menus/energy/profiles/Header.tsx
var PowerProfileHeader = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
    /* @__PURE__ */ jsx2("label", { className: "menu-label", label: "Power Profile", halign: Gtk4.Align.START, hexpand: true }),
    /* @__PURE__ */ jsx2("label", { className: "menu-label uptime", label: bind(uptime).as(renderUptime), tooltipText: "Uptime" })
  ] });
};

// src/components/menus/energy/profiles/Profile.tsx
var PowerProfiles = () => {
  const powerProfiles = powerProfilesService.get_profiles();
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section", valign: Gtk4.Align.FILL, vexpand: true, vertical: true, children: powerProfiles.map((powerProfile) => {
    const profileType = powerProfile.profile;
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: bind(powerProfilesService, "activeProfile").as(
          (active3) => `power-profile-item ${active3 === powerProfile.profile ? "active" : ""}`
        ),
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            powerProfilesService.activeProfile = powerProfile.profile;
          }
        },
        children: /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(
            "icon",
            {
              className: "power-profile-icon",
              icon: icons_default.powerprofile[profileType] || icons_default.powerprofile.balanced
            }
          ),
          /* @__PURE__ */ jsx2("label", { className: "power-profile-label", label: profileType })
        ] })
      }
    );
  }) });
};

// src/components/menus/energy/profiles/index.tsx
var EnergyProfiles = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container energy", vertical: true, children: [
    /* @__PURE__ */ jsx2(PowerProfileHeader, {}),
    /* @__PURE__ */ jsx2(PowerProfiles, {})
  ] });
};

// src/components/menus/energy/brightness/Header.tsx
var BrightnessHeader = () => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, label: "Brightness", hexpand: true }) });
};

// src/components/menus/energy/brightness/Icon.tsx
var BrightnessIcon = () => {
  return /* @__PURE__ */ jsx2("icon", { className: "brightness-slider-icon", valign: Gtk4.Align.CENTER, icon: icons_default.brightness.screen, vexpand: true });
};

// src/components/menus/energy/brightness/Slider.tsx
var BrightnessSlider = () => {
  return /* @__PURE__ */ jsx2(
    "slider",
    {
      className: "menu-active-slider menu-slider brightness",
      value: bind(brightnessService, "screen"),
      onDragged: ({ value, dragging }) => {
        if (dragging) {
          brightnessService.screen = value;
        }
      },
      valign: Gtk4.Align.CENTER,
      drawValue: false,
      expand: true,
      min: 0,
      max: 1
    }
  );
};

// src/components/menus/energy/brightness/Percentage.tsx
var BrightnessPercentage = () => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "brightness-slider-label",
      label: bind(brightnessService, "screen").as((screenBrightness) => {
        return `${Math.round(screenBrightness * 100)}%`;
      }),
      valign: Gtk4.Align.CENTER,
      vexpand: true
    }
  );
};

// src/components/menus/energy/brightness/index.tsx
var Brightness2 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container brightness", vertical: true, children: [
    /* @__PURE__ */ jsx2(BrightnessHeader, {}),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", valign: Gtk4.Align.FILL, vexpand: true, vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "brightness-container", children: [
      /* @__PURE__ */ jsx2(BrightnessIcon, {}),
      /* @__PURE__ */ jsx2(BrightnessSlider, {}),
      /* @__PURE__ */ jsx2(BrightnessPercentage, {})
    ] }) })
  ] });
};

// src/components/menus/energy/index.tsx
var { transition: transition5 } = options_default.menus;
var energy_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "energymenu",
      transition: bind(transition5).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items energy", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container energy", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
        /* @__PURE__ */ jsx2(Brightness2, {}),
        /* @__PURE__ */ jsx2(EnergyProfiles, {})
      ] }) })
    }
  );
};

// src/components/menus/dashboard/profile/Profile.tsx
var { image: image2, name } = options_default.menus.dashboard.powermenu.avatar;
var ProfilePicture = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "profile-picture",
      halign: Gtk4.Align.CENTER,
      css: bind(image2).as((img) => {
        if (isAnImage(img)) {
          return `background-image: url("${normalizePath(img)}")`;
        }
        return `background-image: url("${SRC_DIR}/assets/hyprpanel.png")`;
      })
    }
  );
};
var ProfileName = () => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "profile-name",
      halign: Gtk4.Align.CENTER,
      label: bind(name).as((profileName) => {
        if (profileName === "system") {
          const username = default2.get_user_name();
          return username;
        }
        return profileName;
      })
    }
  );
};
var UserProfile = () => {
  return /* @__PURE__ */ jsxs("box", { className: "profile-picture-container dashboard-card", hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(ProfilePicture, {}),
    /* @__PURE__ */ jsx2(ProfileName, {})
  ] });
};

// src/components/menus/dashboard/profile/helpers.ts
var { confirmation, shutdown: shutdown2, logout: logout2, sleep: sleep2, reboot: reboot2 } = options.menus.dashboard.powermenu;
var handleClick = (action) => {
  const actions = {
    shutdown: shutdown2.get(),
    reboot: reboot2.get(),
    logout: logout2.get(),
    sleep: sleep2.get()
  };
  app_default.get_window("dashboardmenu")?.set_visible(false);
  if (!confirmation.get()) {
    execAsync(actions[action]).catch((err) => console.error(`Failed to execute ${action} command. Error: ${err}`));
  } else {
    actions_default.action(action);
  }
};

// src/components/menus/dashboard/profile/PowerButtons.tsx
var PowerActionButton = (icon13, tooltip, action) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `dashboard-button ${action}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          handleClick(action);
        }
      },
      tooltip_text: tooltip,
      vexpand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: icon13 })
    }
  );
};
var ShutDown = () => {
  return PowerActionButton("\u{F0425}", "Shut Down", "shutdown");
};
var Reboot = () => {
  return PowerActionButton("\u{F0709}", "Reboot", "reboot");
};
var LogOut = () => {
  return PowerActionButton("\u{F0FC5}", "Log Out", "logout");
};
var Sleep = () => {
  return PowerActionButton("\u{F0904}", "Sleep", "sleep");
};

// src/components/menus/dashboard/profile/PowerMenu.tsx
var PowerMenu2 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "power-menu-container dashboard-card", vertical: true, vexpand: true, children: [
    /* @__PURE__ */ jsx2(ShutDown, {}),
    /* @__PURE__ */ jsx2(Reboot, {}),
    /* @__PURE__ */ jsx2(LogOut, {}),
    /* @__PURE__ */ jsx2(Sleep, {})
  ] });
};

// src/components/menus/dashboard/profile/index.tsx
var Profile = () => {
  return /* @__PURE__ */ jsxs("box", { className: "profiles-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(UserProfile, {}),
    /* @__PURE__ */ jsx2(PowerMenu2, {})
  ] });
};

// src/components/menus/dashboard/shortcuts/helpers.ts
var { left } = options_default.menus.dashboard.shortcuts;
var handleRecorder = (commandOutput) => {
  if (commandOutput === "recording") {
    return true;
  }
  return false;
};
var handleClick2 = (action, tOut = 0) => {
  app_default.get_window("dashboardmenu")?.set_visible(false);
  timeout(tOut, () => {
    execAsync(`bash -c "${action}"`).then((res) => {
      return res;
    }).catch((err) => console.error(err));
  });
};
var hasCommand = (shortCut) => {
  return shortCut.command.get().length > 0;
};
var leftCardHidden = Variable(
  !(hasCommand(left.shortcut1) || hasCommand(left.shortcut2) || hasCommand(left.shortcut3) || hasCommand(left.shortcut4))
);
var pollingInterval9 = Variable(1e3);
var isRecording = Variable(false);
var recordingPoller = new BashPoller(
  isRecording,
  [],
  bind(pollingInterval9),
  `${SRC_DIR}/scripts/screen_record.sh status`,
  handleRecorder
);

// src/components/menus/dashboard/shortcuts/buttons/ShortcutButtons.tsx
var { left: left2, right } = options_default.menus.dashboard.shortcuts;
var ShortcutButton = ({ shortcut, ...props }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      vexpand: true,
      tooltipText: shortcut.tooltip.get(),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          handleClick2(shortcut.command.get());
        }
      },
      ...props,
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: shortcut.icon.get() })
    }
  );
};
var LeftShortcut1 = () => {
  if (!hasCommand(left2.shortcut1)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    ShortcutButton,
    {
      shortcut: left2.shortcut1,
      className: `dashboard-button top-button ${hasCommand(left2.shortcut2) ? "paired" : ""}`
    }
  );
};
var LeftShortcut2 = () => {
  if (!hasCommand(left2.shortcut2)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: left2.shortcut2, className: `dashboard-button` });
};
var LeftShortcut3 = () => {
  if (!hasCommand(left2.shortcut3)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    ShortcutButton,
    {
      shortcut: left2.shortcut3,
      className: `dashboard-button top-button ${hasCommand(left2.shortcut4) ? "paired" : ""}`
    }
  );
};
var LeftShortcut4 = () => {
  if (!hasCommand(left2.shortcut4)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: left2.shortcut4, className: `dashboard-button ` });
};
var RightShortcut1 = () => {
  if (!hasCommand(right.shortcut1)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: right.shortcut1, className: `dashboard-button top-button paired` });
};
var RightShortcut3 = () => {
  if (!hasCommand(right.shortcut3)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: right.shortcut3, className: `dashboard-button top-button paired` });
};

// src/components/menus/dashboard/shortcuts/sections/Column.tsx
var LeftColumn = ({ isVisible, children }) => {
  return /* @__PURE__ */ jsx2("box", { className: `card-button-section-container ${isVisible ? "visible" : ""}`, children: isVisible ? /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, vexpand: true, children }) : /* @__PURE__ */ jsx2("box", {}) });
};
var RightColumn = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: `card-button-section-container`, children: /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, vexpand: true, children }) });
};

// src/components/menus/dashboard/shortcuts/buttons/SettingsButton.tsx
var SettingsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "dashboard-button",
      tooltipText: "HyprPanel Configuration",
      vexpand: true,
      onButtonPressEvent: (_, event) => {
        const buttonClicked = event.get_button()[1];
        if (buttonClicked !== Gdk.BUTTON_PRIMARY) {
          return;
        }
        app_default.get_window("dashboardmenu")?.set_visible(false);
        app_default.toggle_window("settings-dialog");
      },
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: "\u{F0493}" })
    }
  );
};

// src/components/shared/Menu.tsx
var Menu2 = class extends astalify(Gtk4.Menu) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Menu.
   * @param props - The properties for the Menu component.
   * @memberof Menu
   */
  constructor(props) {
    super(props);
  }
};
var Menu_default = Menu2;

// src/components/shared/MenuItem.tsx
var MenuItem = class extends astalify(Gtk4.MenuItem) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of MenuItem.
   * @param props - The properties for the MenuItem component.
   * @memberof MenuItem
   */
  constructor(props) {
    super(props);
  }
};
var MenuItem_default = MenuItem;

// src/components/menus/dashboard/shortcuts/buttons/RecordingButton.tsx
var MonitorListDropdown = () => {
  const monitorList = Variable([]);
  const monitorBinding = Variable.derive(
    [bind(hyprlandService, "monitors")],
    () => monitorList.set(hyprlandService.get_monitors())
  );
  return /* @__PURE__ */ jsx2(Menu_default, { className: "dropdown recording", halign: Gtk4.Align.FILL, onDestroy: () => monitorBinding.drop(), hexpand: true, children: bind(monitorList).as((monitors) => {
    return monitors.map((monitor3) => /* @__PURE__ */ jsx2(
      MenuItem_default,
      {
        label: `Display ${monitor3.name}`,
        onButtonPressEvent: (_, event) => {
          const buttonClicked = event.get_button()[1];
          if (buttonClicked !== Gdk.BUTTON_PRIMARY) {
            return;
          }
          app_default.get_window("dashboardmenu")?.set_visible(false);
          execAsync(`${SRC_DIR}/scripts/screen_record.sh start ${monitor3.name}`).catch(
            (err) => console.error(err)
          );
        }
      }
    ));
  }) });
};
var RecordingButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `dashboard-button record ${isRecording.get() ? "active" : ""}`,
      tooltipText: "Record Screen",
      vexpand: true,
      onButtonPressEvent: (_, event) => {
        const buttonClicked = event.get_button()[1];
        if (buttonClicked !== Gdk.BUTTON_PRIMARY) {
          return;
        }
        if (isRecording.get() === true) {
          app_default.get_window("dashboardmenu")?.set_visible(false);
          return execAsync(`${SRC_DIR}/scripts/screen_record.sh stop`).catch((err) => console.error(err));
        } else {
          const monitorDropdownList = MonitorListDropdown();
          monitorDropdownList.popup_at_pointer(event);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: "\u{F044A}" })
    }
  );
};

// src/components/menus/dashboard/shortcuts/sections/Section.tsx
var { left: left3, right: right2 } = options_default.menus.dashboard.shortcuts;
var leftBindings = [
  bind(left3.shortcut1.command),
  bind(left3.shortcut1.tooltip),
  bind(left3.shortcut1.icon),
  bind(left3.shortcut2.command),
  bind(left3.shortcut2.tooltip),
  bind(left3.shortcut2.icon),
  bind(left3.shortcut3.command),
  bind(left3.shortcut3.tooltip),
  bind(left3.shortcut3.icon),
  bind(left3.shortcut4.command),
  bind(left3.shortcut4.tooltip),
  bind(left3.shortcut4.icon)
];
var rightBindings = [
  bind(right2.shortcut1.command),
  bind(right2.shortcut1.tooltip),
  bind(right2.shortcut1.icon),
  bind(right2.shortcut3.command),
  bind(right2.shortcut3.tooltip),
  bind(right2.shortcut3.icon),
  bind(leftCardHidden),
  bind(isRecording)
];
var LeftShortcuts = () => {
  return /* @__PURE__ */ jsx2("box", { children: Variable.derive(leftBindings, () => {
    const isVisibleLeft = hasCommand(left3.shortcut1) || hasCommand(left3.shortcut2);
    const isVisibleRight = hasCommand(left3.shortcut3) || hasCommand(left3.shortcut4);
    if (!isVisibleLeft && !isVisibleRight) {
      leftCardHidden.set(true);
      return /* @__PURE__ */ jsx2("box", {});
    }
    leftCardHidden.set(false);
    return /* @__PURE__ */ jsxs("box", { className: "container most-used dashboard-card", children: [
      /* @__PURE__ */ jsxs(LeftColumn, { isVisible: isVisibleRight && isVisibleLeft, children: [
        /* @__PURE__ */ jsx2(LeftShortcut1, {}),
        /* @__PURE__ */ jsx2(LeftShortcut2, {})
      ] }),
      /* @__PURE__ */ jsxs(RightColumn, { children: [
        /* @__PURE__ */ jsx2(LeftShortcut3, {}),
        /* @__PURE__ */ jsx2(LeftShortcut4, {})
      ] })
    ] });
  })() });
};
var RightShortcuts = () => {
  return /* @__PURE__ */ jsx2("box", { children: Variable.derive(rightBindings, () => {
    return /* @__PURE__ */ jsxs("box", { className: `container utilities dashboard-card ${!leftCardHidden.get() ? "paired" : ""}`, children: [
      /* @__PURE__ */ jsxs(LeftColumn, { isVisible: true, children: [
        /* @__PURE__ */ jsx2(RightShortcut1, {}),
        /* @__PURE__ */ jsx2(SettingsButton, {})
      ] }),
      /* @__PURE__ */ jsxs(RightColumn, { children: [
        /* @__PURE__ */ jsx2(RightShortcut3, {}),
        /* @__PURE__ */ jsx2(RecordingButton, {})
      ] })
    ] });
  })() });
};

// src/components/menus/dashboard/shortcuts/index.tsx
var Shortcuts = ({ isEnabled }) => {
  recordingPoller.initialize();
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs("box", { className: "shortcuts-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(LeftShortcuts, {}),
    /* @__PURE__ */ jsx2(RightShortcuts, {})
  ] });
};

// src/components/menus/dashboard/controls/helpers.ts
var isWifiEnabled2 = Variable(false);
var wifiEnabledBinding2;
Variable.derive([bind(networkService, "wifi")], () => {
  wifiEnabledBinding2?.drop();
  wifiEnabledBinding2 = void 0;
  if (!networkService.wifi) {
    return;
  }
  wifiEnabledBinding2 = Variable.derive([bind(networkService.wifi, "enabled")], (isEnabled) => {
    isWifiEnabled2.set(isEnabled);
  });
});

// src/components/menus/dashboard/controls/ControlButtons.tsx
var WifiButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(isWifiEnabled2).as((isEnabled) => `dashboard-button wifi ${!isEnabled ? "disabled" : ""}`),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          networkService.wifi?.set_enabled(!networkService.wifi.enabled);
        }
      },
      tooltipText: "Toggle Wifi",
      expand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: bind(isWifiEnabled2).as((isEnabled) => isEnabled ? "\u{F0928}" : "\u{F092D}") })
    }
  );
};
var BluetoothButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(bluetoothService, "isPowered").as(
        (isEnabled) => `dashboard-button bluetooth ${!isEnabled ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          bluetoothService.toggle();
        }
      },
      tooltipText: "Toggle Bluetooth",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(bluetoothService, "isPowered").as((isEnabled) => isEnabled ? "\u{F00AF}" : "\u{F00B2}")
        }
      )
    }
  );
};
var NotificationsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(notifdService, "dontDisturb").as(
        (dnd) => `dashboard-button notifications ${dnd ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          notifdService.set_dont_disturb(!notifdService.dontDisturb);
        }
      },
      tooltipText: "Toggle Notifications",
      expand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: bind(notifdService, "dontDisturb").as((dnd) => dnd ? "\u{F009B}" : "\u{F009A}") })
    }
  );
};
var PlaybackButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(audioService.defaultSpeaker, "mute").as(
        (isMuted) => `dashboard-button playback ${isMuted ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          audioService.defaultSpeaker.set_mute(!audioService.defaultSpeaker.mute);
        }
      },
      tooltipText: "Toggle Mute (Playback)",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(audioService.defaultSpeaker, "mute").as((isMuted) => isMuted ? "\u{F0581}" : "\u{F057E}")
        }
      )
    }
  );
};
var MicrophoneButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(audioService.defaultMicrophone, "mute").as(
        (isMuted) => `dashboard-button input ${isMuted ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          audioService.defaultMicrophone.set_mute(!audioService.defaultMicrophone.mute);
        }
      },
      tooltipText: "Toggle Mute (Microphone)",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(audioService.defaultMicrophone, "mute").as((isMuted) => isMuted ? "\u{F036D}" : "\u{F036C}")
        }
      )
    }
  );
};

// src/components/menus/dashboard/controls/index.tsx
var Controls4 = ({ isEnabled }) => {
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs("box", { className: "dashboard-card controls-container", halign: Gtk4.Align.FILL, valign: Gtk4.Align.FILL, expand: true, children: [
    /* @__PURE__ */ jsx2(WifiButton, {}),
    /* @__PURE__ */ jsx2(BluetoothButton, {}),
    /* @__PURE__ */ jsx2(NotificationsButton, {}),
    /* @__PURE__ */ jsx2(PlaybackButton, {}),
    /* @__PURE__ */ jsx2(MicrophoneButton, {})
  ] });
};

// src/components/menus/dashboard/stats/helpers.ts
var { terminal } = options_default;
var { interval: interval2, enabled, enable_gpu } = options_default.menus.dashboard.stats;
var handleClick3 = () => {
  app_default.get_window("dashboardmenu")?.set_visible(false);
  execAsync(`bash -c "${terminal} -e btop"`).catch((err) => `Failed to open btop: ${err}`);
};
var monitorInterval = (cpuService2, ramService2, storageService2) => {
  interval2.subscribe(() => {
    ramService2.updateTimer(interval2.get());
    cpuService2.updateTimer(interval2.get());
    storageService2.updateTimer(interval2.get());
  });
};
var monitorStatsEnabled = (cpuService2, ramService2, gpuService2, storageService2) => {
  enabled.subscribe(() => {
    if (!enabled.get()) {
      ramService2.stopPoller();
      cpuService2.stopPoller();
      gpuService2.stopPoller();
      storageService2.stopPoller();
      return;
    }
    if (enable_gpu.get()) {
      gpuService2.startPoller();
    }
    ramService2.startPoller();
    cpuService2.startPoller();
    storageService2.startPoller();
  });
};
var monitorGpuTrackingEnabled = (gpuService2) => {
  enable_gpu.subscribe((gpuEnabled) => {
    if (gpuEnabled) {
      return gpuService2.startPoller();
    }
    gpuService2.stopPoller();
  });
};
var initializePollers = (cpuService2, ramService2, gpuService2, storageService2) => {
  ramService2.setShouldRound(true);
  storageService2.setShouldRound(true);
  if (enabled.get()) {
    ramService2.startPoller();
    cpuService2.startPoller();
    storageService2.startPoller();
  }
  if (enabled.get() && enable_gpu.get()) {
    gpuService2.startPoller();
  } else {
    gpuService2.stopPoller();
  }
  monitorInterval(cpuService2, ramService2, storageService2);
  monitorStatsEnabled(cpuService2, ramService2, gpuService2, storageService2);
  monitorGpuTrackingEnabled(gpuService2);
};

// src/components/menus/dashboard/stats/StatBars.tsx
var { enable_gpu: enable_gpu2 } = options_default.menus.dashboard.stats;
var StatBar = ({ icon: icon13, value, label: label15, stat }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: `stat ${stat}`, valign: Gtk4.Align.CENTER, hexpand: true, children: [
      /* @__PURE__ */ jsx2("button", { children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: icon13 }) }),
      /* @__PURE__ */ jsx2(
        "button",
        {
          onClick: (_, self) => {
            if (isPrimaryClick(self)) {
              handleClick3();
            }
          },
          children: /* @__PURE__ */ jsx2("levelbar", { className: "stats-bar", value, valign: Gtk4.Align.CENTER, hexpand: true })
        }
      )
    ] }),
    /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx2("label", { className: `stat-value ${stat}`, label: label15 }) })
  ] });
};
var GpuStat = () => {
  return /* @__PURE__ */ jsx2("box", { children: bind(enable_gpu2).as((enabled2) => {
    if (!enabled2) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsx2(
      StatBar,
      {
        icon: "\u{F08AE}",
        stat: "gpu",
        value: bind(gpuService.gpuUsage),
        label: bind(gpuService.gpuUsage).as((gpuUsage) => `${Math.floor(gpuUsage * 100)}%`)
      }
    );
  }) });
};
var CpuStat = () => {
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\uF4BC",
      stat: "cpu",
      value: bind(cpuService.cpu).as((cpuUsage2) => Math.round(cpuUsage2) / 100),
      label: bind(cpuService.cpu).as((cpuUsage2) => `${Math.round(cpuUsage2)}%`)
    }
  );
};
var RamStat = () => {
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\uEFC5",
      stat: "ram",
      value: bind(ramService.ram).as((ramUsage2) => ramUsage2.percentage / 100),
      label: bind(ramService.ram).as((ramUsage2) => `${renderResourceLabel("used/total", ramUsage2, true)}`)
    }
  );
};
var StorageStat = () => {
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\u{F02CA}",
      stat: "storage",
      value: bind(storageService.storage).as((storageUsage2) => storageUsage2.percentage / 100),
      label: bind(storageService.storage).as(
        (storageUsage2) => renderResourceLabel("used/total", storageUsage2, true)
      )
    }
  );
};

// src/services/Gpu.ts
var Gpu = class {
  updateFrequency = Variable(2e3);
  gpuPoller;
  gpuUsage = Variable(0);
  constructor() {
    this.calculateUsage = this.calculateUsage.bind(this);
    this.gpuPoller = new FunctionPoller(
      this.gpuUsage,
      [],
      bind(this.updateFrequency),
      this.calculateUsage
    );
    this.gpuPoller.initialize();
  }
  calculateUsage() {
    try {
      const gpuStats = exec("gpustat --json");
      if (typeof gpuStats !== "string") {
        return 0;
      }
      const data = JSON.parse(gpuStats);
      const totalGpu = 100;
      const usedGpu = data.gpus.reduce((acc, gpu) => {
        return acc + gpu["utilization.gpu"];
      }, 0) / data.gpus.length;
      return this.divide([totalGpu, usedGpu]);
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error getting GPU stats:", error.message);
      } else {
        console.error("Unknown error getting GPU stats");
      }
      return 0;
    }
  }
  divide([total, free]) {
    return free / total;
  }
  updateTimer(timerInMs) {
    this.updateFrequency.set(timerInMs);
  }
  stopPoller() {
    this.gpuPoller.stop();
  }
  startPoller() {
    this.gpuPoller.start();
  }
};
var Gpu_default = Gpu;

// src/services/Ram.ts
var Ram2 = class {
  updateFrequency = Variable(2e3);
  shouldRound = false;
  ramPoller;
  ram = Variable({ total: 0, used: 0, percentage: 0, free: 0 });
  constructor() {
    this.calculateUsage = this.calculateUsage.bind(this);
    this.ramPoller = new FunctionPoller(
      this.ram,
      [],
      bind(this.updateFrequency),
      this.calculateUsage
    );
    this.ramPoller.initialize("ram");
  }
  calculateUsage() {
    try {
      const [success, meminfoBytes] = default2.file_get_contents("/proc/meminfo");
      if (!success || !meminfoBytes) {
        throw new Error("Failed to read /proc/meminfo or file content is null.");
      }
      const meminfo = new TextDecoder("utf-8").decode(meminfoBytes);
      const totalMatch = meminfo.match(/MemTotal:\s+(\d+)/);
      const availableMatch = meminfo.match(/MemAvailable:\s+(\d+)/);
      if (!totalMatch || !availableMatch) {
        throw new Error("Failed to parse /proc/meminfo for memory values.");
      }
      const totalRamInBytes = parseInt(totalMatch[1], 10) * 1024;
      const availableRamInBytes = parseInt(availableMatch[1], 10) * 1024;
      let usedRam = totalRamInBytes - availableRamInBytes;
      usedRam = isNaN(usedRam) || usedRam < 0 ? 0 : usedRam;
      return {
        percentage: this.divide([totalRamInBytes, usedRam]),
        total: totalRamInBytes,
        used: usedRam,
        free: availableRamInBytes
      };
    } catch (error) {
      console.error("Error calculating RAM usage:", error);
      return { total: 0, used: 0, percentage: 0, free: 0 };
    }
  }
  setShouldRound(round6) {
    this.shouldRound = round6;
  }
  divide([total, used]) {
    const percentageTotal = used / total * 100;
    if (this.shouldRound) {
      return total > 0 ? Math.round(percentageTotal) : 0;
    }
    return total > 0 ? parseFloat(percentageTotal.toFixed(2)) : 0;
  }
  updateTimer(timerInMs) {
    this.updateFrequency.set(timerInMs);
  }
  stopPoller() {
    this.ramPoller.stop();
  }
  startPoller() {
    this.ramPoller.start();
  }
};
var Ram_default = Ram2;

// src/services/Cpu.ts
import GTop3 from "gi://GTop";
var Cpu2 = class {
  updateFrequency = Variable(2e3);
  previousCpuData = new GTop3.glibtop_cpu();
  cpuPoller;
  cpu = Variable(0);
  constructor() {
    GTop3.glibtop_get_cpu(this.previousCpuData);
    this.calculateUsage = this.calculateUsage.bind(this);
    this.cpuPoller = new FunctionPoller(this.cpu, [], bind(this.updateFrequency), this.calculateUsage);
    this.cpuPoller.initialize();
  }
  calculateUsage() {
    const currentCpuData = new GTop3.glibtop_cpu();
    GTop3.glibtop_get_cpu(currentCpuData);
    const totalDiff = currentCpuData.total - this.previousCpuData.total;
    const idleDiff = currentCpuData.idle - this.previousCpuData.idle;
    const cpuUsagePercentage = totalDiff > 0 ? (totalDiff - idleDiff) / totalDiff * 100 : 0;
    this.previousCpuData = currentCpuData;
    return cpuUsagePercentage;
  }
  updateTimer(timerInMs) {
    this.updateFrequency.set(timerInMs);
  }
  stopPoller() {
    this.cpuPoller.stop();
  }
  startPoller() {
    this.cpuPoller.start();
  }
};
var Cpu_default = Cpu2;

// src/services/Storage.ts
import GTop4 from "gi://GTop";
var Storage2 = class {
  updateFrequency = Variable(2e3);
  shouldRound = false;
  storagePoller;
  storage = Variable({ total: 0, used: 0, percentage: 0, free: 0 });
  constructor() {
    this.calculateUsage = this.calculateUsage.bind(this);
    this.storagePoller = new FunctionPoller(
      this.storage,
      [],
      bind(this.updateFrequency),
      this.calculateUsage
    );
    this.storagePoller.initialize();
  }
  calculateUsage() {
    try {
      const currentFsUsage = new GTop4.glibtop_fsusage();
      GTop4.glibtop_get_fsusage(currentFsUsage, "/");
      const total = currentFsUsage.blocks * currentFsUsage.block_size;
      const available2 = currentFsUsage.bavail * currentFsUsage.block_size;
      const used = total - available2;
      return {
        total,
        used,
        free: available2,
        percentage: this.divide([total, used])
      };
    } catch (error) {
      console.error("Error calculating Storage usage:", error);
      return { total: 0, used: 0, percentage: 0, free: 0 };
    }
  }
  setShouldRound(round6) {
    this.shouldRound = round6;
  }
  divide([total, used]) {
    const percentageTotal = used / total * 100;
    if (this.shouldRound) {
      return total > 0 ? Math.round(percentageTotal) : 0;
    }
    return total > 0 ? parseFloat(percentageTotal.toFixed(2)) : 0;
  }
  updateTimer(timerInMs) {
    this.updateFrequency.set(timerInMs);
  }
  stopPoller() {
    this.storagePoller.stop();
  }
  startPoller() {
    this.storagePoller.start();
  }
};
var Storage_default = Storage2;

// src/components/menus/dashboard/stats/index.tsx
var ramService = new Ram_default();
var cpuService = new Cpu_default();
var storageService = new Storage_default();
var gpuService = new Gpu_default();
initializePollers(cpuService, ramService, gpuService, storageService);
var Stats = ({ isEnabled }) => {
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "dashboard-card stats-container",
      valign: Gtk4.Align.FILL,
      halign: Gtk4.Align.FILL,
      expand: true,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx2(CpuStat, {}),
        /* @__PURE__ */ jsx2(RamStat, {}),
        /* @__PURE__ */ jsx2(GpuStat, {}),
        /* @__PURE__ */ jsx2(StorageStat, {})
      ]
    }
  );
};

// src/components/menus/dashboard/directories/Sections.tsx
var LeftSection = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "section left", vertical: true, expand: true, children });
};
var RightSection = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "section right", vertical: true, expand: true, children });
};

// src/components/menus/dashboard/directories/DirectoryLinks.tsx
var { left: left4, right: right3 } = options_default.menus.dashboard.directories;
var DirectoryLink = ({ directoryItem, ...props }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      ...props,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          app_default.get_window("dashboardmenu")?.set_visible(false);
          execAsync(directoryItem.command.get());
        }
      },
      children: /* @__PURE__ */ jsx2("label", { label: bind(directoryItem.label), halign: Gtk4.Align.START })
    }
  );
};
var LeftLink1 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left top", directoryItem: left4.directory1 });
};
var LeftLink2 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left middle", directoryItem: left4.directory2 });
};
var LeftLink3 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left bottom", directoryItem: left4.directory3 });
};
var RightLink1 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right top", directoryItem: right3.directory1 });
};
var RightLink2 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right middle", directoryItem: right3.directory2 });
};
var RightLink3 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right bottom", directoryItem: right3.directory3 });
};

// src/components/menus/dashboard/directories/index.tsx
var Directories = ({ isEnabled }) => {
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs("box", { className: "dashboard-card directories-container", valign: Gtk4.Align.FILL, halign: Gtk4.Align.FILL, expand: true, children: [
    /* @__PURE__ */ jsxs(LeftSection, { children: [
      /* @__PURE__ */ jsx2(LeftLink1, {}),
      /* @__PURE__ */ jsx2(LeftLink2, {}),
      /* @__PURE__ */ jsx2(LeftLink3, {})
    ] }),
    /* @__PURE__ */ jsxs(RightSection, { children: [
      /* @__PURE__ */ jsx2(RightLink1, {}),
      /* @__PURE__ */ jsx2(RightLink2, {}),
      /* @__PURE__ */ jsx2(RightLink3, {})
    ] })
  ] });
};

// src/components/menus/dashboard/index.tsx
var { controls, shortcuts, stats, directories } = options_default.menus.dashboard;
var { transition: transition6 } = options_default.menus;
var dashboard_default = () => {
  const dashboardBinding = Variable.derive(
    [bind(controls.enabled), bind(shortcuts.enabled), bind(stats.enabled), bind(directories.enabled)],
    (isControlsEnabled, isShortcutsEnabled, isStatsEnabled, isDirectoriesEnabled) => {
      return [
        /* @__PURE__ */ jsx2("box", { className: "dashboard-content-container", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "dashboard-content-items", vertical: true, children: [
          /* @__PURE__ */ jsx2(Profile, {}),
          /* @__PURE__ */ jsx2(Shortcuts, { isEnabled: isShortcutsEnabled }),
          /* @__PURE__ */ jsx2(Controls4, { isEnabled: isControlsEnabled }),
          /* @__PURE__ */ jsx2(Directories, { isEnabled: isDirectoriesEnabled }),
          /* @__PURE__ */ jsx2(Stats, { isEnabled: isStatsEnabled })
        ] }) })
      ];
    }
  );
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "dashboardmenu",
      transition: bind(transition6).as((transition10) => RevealerTransitionMap[transition10]),
      onDestroy: () => {
        dashboardBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { className: "dashboard-menu-content", css: "padding: 1px; margin: -1px;", vexpand: false, children: dashboardBinding() })
    }
  );
};

// src/components/menus/powerDropdown/button.tsx
var { confirmation: confirmation2, shutdown: shutdown3, logout: logout3, sleep: sleep3, reboot: reboot3, showLabel } = options_default.menus.power;
var PowerButton = (action) => {
  const handleClick4 = (action2) => {
    const actions = {
      shutdown: shutdown3.get(),
      reboot: reboot3.get(),
      logout: logout3.get(),
      sleep: sleep3.get()
    };
    app_default.get_window("powerdropdownmenu")?.set_visible(false);
    if (!confirmation2.get()) {
      execAsync(actions[action2]).catch(
        (err) => console.error(`Failed to execute ${action2} command. Error: ${err}`)
      );
    } else {
      actions_default.customAction(action2, actions[action2]);
    }
  };
  const powerIconMap = {
    shutdown: "\u{F0425}",
    reboot: "\u{F0709}",
    logout: "\u{F0FC5}",
    sleep: "\u{F0904}"
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(showLabel).as((showLbl) => `power-menu-button ${action} ${!showLbl ? "no-label" : ""}`),
      onClicked: () => handleClick4(action),
      children: /* @__PURE__ */ jsx2("box", { vertical: false, children: bind(showLabel).as((showLbl) => {
        if (showLbl) {
          return [
            /* @__PURE__ */ jsx2(
              "label",
              {
                className: `power-button-icon ${action}-icon txt-icon`,
                label: powerIconMap[action]
              }
            ),
            /* @__PURE__ */ jsx2(
              "label",
              {
                halign: Gtk4.Align.CENTER,
                hexpand: true,
                className: `power-button-label ${action}-label show-label`,
                label: capitalizeFirstLetter(action)
              }
            )
          ];
        }
        return [
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: `power-button-icon ${action}-icon no-label txt-icon`,
              label: powerIconMap[action]
            }
          )
        ];
      }) })
    }
  );
};

// src/components/menus/powerDropdown/index.tsx
var powerDropdown_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "powerdropdownmenu",
      transition: bind(options_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items power-dropdown", children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container power-dropdown", vertical: true, hexpand: true, children: [
        PowerButton("shutdown"),
        PowerButton("reboot"),
        PowerButton("logout"),
        PowerButton("sleep")
      ] }) })
    }
  );
};

// src/components/menus/exports.ts
var DropdownMenus = [
  audio_default,
  network_default,
  bluetooth_default,
  media_default,
  notifications_default,
  calendar_default,
  energy_default,
  dashboard_default,
  powerDropdown_default
];
var StandardWindows = [power_default, verification_default];

// src/components/notifications/index.tsx
var { position, monitor, active_monitor, showActionsOnHover: showActionsOnHover2, displayedTotal: displayedTotal4 } = options_default.notifications;
var { tear } = options_default;
var curMonitor = Variable(monitor.get());
var popupNotifications = Variable([]);
trackActiveMonitor(curMonitor);
trackPopupNotifications(popupNotifications);
trackAutoTimeout();
var notifications_default2 = () => {
  const windowLayer = bind(tear).as((tear2) => tear2 ? Astal7.Layer.TOP : Astal7.Layer.OVERLAY);
  const windowAnchor = bind(position).as(getPosition);
  const windowMonitor = Variable.derive(
    [bind(hyprlandService, "focusedMonitor"), bind(monitor), bind(active_monitor)],
    (focusedMonitor, monitor3, activeMonitor) => {
      if (activeMonitor === true) {
        return focusedMonitor.id;
      }
      return monitor3;
    }
  );
  const notificationsBinding = Variable.derive(
    [bind(popupNotifications), bind(showActionsOnHover2)],
    (notifications, showActions) => {
      const maxDisplayed = notifications.slice(0, displayedTotal4.get());
      return maxDisplayed.map((notification) => {
        return /* @__PURE__ */ jsx2(NotificationCard, { notification, showActions });
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: "notifications-window",
      namespace: "notifications-window",
      className: "notifications-window",
      layer: windowLayer,
      anchor: windowAnchor,
      exclusivity: Astal7.Exclusivity.NORMAL,
      monitor: windowMonitor(),
      onDestroy: () => {
        windowMonitor.drop();
        notificationsBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, className: "notification-card-container", children: notificationsBinding() })
    }
  );
};

// src/components/shared/RegularWindow.tsx
var RegularWindow = class extends astalify(Gtk4.Window) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Window.
   * @param props - The properties for the Window component.
   * @memberof Window
   */
  constructor(props) {
    super(props);
  }
};
var RegularWindow_default = RegularWindow;

// src/components/settings/side_effects/index.ts
var { show_numbered: show_numbered2, show_icons: show_icons2, showWsIcons: showWsIcons3, showApplicationIcons: showApplicationIcons2 } = options_default.bar.workspaces;
var { monochrome: monoBar } = options_default.theme.bar.buttons;
var { monochrome: monoMenu } = options_default.theme.bar.menus;
var { matugen: matugen4 } = options_default.theme;
var turnOffOptionVars = (sourceValue, optionsToDisable, ignoreVars) => {
  const toggleOffVars = (varsToToggle) => {
    const varsToNotToggle = ignoreVars?.map((curVar) => curVar.id) || [];
    varsToToggle.forEach((curVar) => {
      if (sourceValue.id !== curVar.id && !varsToNotToggle.includes(curVar.id)) {
        curVar.set(false);
      }
    });
  };
  if (sourceValue.get()) {
    const varsToToggleOff = optionsToDisable;
    toggleOffVars(varsToToggleOff);
  }
};
var workspaceOptsToDisable = [show_numbered2, show_icons2, showWsIcons3, showApplicationIcons2];
show_numbered2.subscribe(() => {
  turnOffOptionVars(show_numbered2, workspaceOptsToDisable);
});
show_icons2.subscribe(() => {
  turnOffOptionVars(show_icons2, workspaceOptsToDisable);
});
showWsIcons3.subscribe(() => {
  turnOffOptionVars(showWsIcons3, workspaceOptsToDisable, [showApplicationIcons2]);
});
showApplicationIcons2.subscribe(() => {
  turnOffOptionVars(showApplicationIcons2, workspaceOptsToDisable, [showWsIcons3]);
  if (showApplicationIcons2.get()) {
    showWsIcons3.set(true);
  }
});
matugen4.subscribe(() => {
  if (matugen4.get() === true) {
    monoBar.set(false);
    monoMenu.set(false);
  }
});

// src/components/settings/Header.tsx
var Header5 = () => {
  return /* @__PURE__ */ jsxs("centerbox", { className: "header", children: [
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "reset",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            options.reset();
          }
        },
        tooltipText: "Reset All Settings",
        halign: Gtk4.Align.START,
        valign: Gtk4.Align.START,
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.refresh })
      }
    ),
    /* @__PURE__ */ jsx2("box", {}),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "close",
        halign: Gtk4.Align.END,
        valign: Gtk4.Align.START,
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            app_default.get_window("settings-dialog")?.set_visible(false);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.close })
      }
    )
  ] });
};

// src/components/settings/shared/Label.tsx
var Label2 = ({ title: name2, subtitle: sub = "", subtitleLink = "" }) => {
  const Subtitle = () => {
    if (subtitleLink.length) {
      return /* @__PURE__ */ jsx2(
        "button",
        {
          className: "options-sublabel-link",
          onClick: () => execAsync(`bash -c 'xdg-open ${subtitleLink}'`),
          halign: Gtk4.Align.START,
          valign: Gtk4.Align.CENTER,
          children: /* @__PURE__ */ jsx2("label", { label: sub })
        }
      );
    }
    return /* @__PURE__ */ jsx2("label", { className: "options-sublabel", label: sub, halign: Gtk4.Align.START, valign: Gtk4.Align.CENTER });
  };
  return /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, vertical: true, children: [
    /* @__PURE__ */ jsx2("label", { className: "options-label", label: name2, halign: Gtk4.Align.START, valign: Gtk4.Align.CENTER }),
    /* @__PURE__ */ jsx2(Subtitle, {})
  ] });
};

// src/components/settings/shared/Option/PropertyLabel.tsx
var PropertyLabel = ({ title, subtitle, subtitleLink }) => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, valign: Gtk4.Align.CENTER, hexpand: true, children: /* @__PURE__ */ jsx2(Label2, { title, subtitle, subtitleLink }) });
};

// src/components/settings/shared/Option/ResetButton.tsx
var ResetButton = ({ ...props }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "reset-options",
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          props.opt.reset();
        }
      },
      sensitive: bind(props.opt).as((v) => v !== props.opt.initial),
      valign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.refresh })
    }
  );
};

// src/components/shared/SpinButton.tsx
var SpinButton = class extends astalify(Gtk4.SpinButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of SpinButton.
   * @param props - The properties for the SpinButton component.
   * @memberof SpinButton
   */
  constructor(props) {
    super(props);
  }
};
var SpinButton_default = SpinButton;

// src/components/settings/shared/inputs/number.tsx
var NumberInputter = ({
  opt: opt2,
  min,
  max,
  increment = 1,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", halign: Gtk4.Align.START, children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      SpinButton_default,
      {
        setup: (self) => {
          self.set_range(min, max);
          self.set_increments(1 * increment, 5 * increment);
          self.connect("value-changed", () => {
            opt2.set(self.value);
          });
          useHook(self, opt2, () => {
            self.set_value(opt2.get());
            isUnsaved.set(Number(self.get_text()) !== opt2.get());
          });
          self.connect("key-release-event", () => {
            isUnsaved.set(Number(self.get_text()) !== opt2.get());
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/object.tsx
var ObjectInputter = ({
  opt: opt2,
  isUnsaved,
  className
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className,
        onChanged: (self) => {
          const currentText = self.text;
          const serializedOpt = JSON.stringify(opt2.get());
          isUnsaved.set(currentText !== serializedOpt);
        },
        onActivate: (self) => {
          try {
            const parsedValue = JSON.parse(self.text || "{}");
            opt2.set(parsedValue);
            isUnsaved.set(false);
          } catch (error) {
            console.error("Invalid JSON input:", error);
          }
        },
        setup: (self) => {
          self.text = JSON.stringify(opt2.get());
          isUnsaved.set(self.text !== JSON.stringify(opt2.get()));
          self.hook(opt2, () => {
            self.text = JSON.stringify(opt2.get());
            isUnsaved.set(self.text !== JSON.stringify(opt2.get()));
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/string.tsx
var StringInputter = ({
  opt: opt2,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className: bind(isUnsaved).as((unsaved) => unsaved ? "unsaved" : ""),
        onChanged: (self) => {
          const currentText = self.text;
          const optValue = opt2.get();
          isUnsaved.set(currentText !== optValue);
        },
        onActivate: (self) => {
          opt2.set(self.text);
        },
        setup: (self) => {
          self.text = opt2.get();
          isUnsaved.set(self.text !== opt2.get());
          self.hook(opt2, () => {
            isUnsaved.set(self.text !== opt2.get());
            self.text = opt2.get();
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/boolean.tsx
var BooleanInputter = ({
  opt: opt2,
  disabledBinding,
  dependencies: dependencies2
}) => /* @__PURE__ */ jsx2(
  "switch",
  {
    sensitive: disabledBinding !== void 0 ? bind(disabledBinding).as((disabled) => !disabled) : true,
    active: bind(opt2),
    setup: (self) => {
      self.connect("notify::active", () => {
        if (disabledBinding !== void 0 && disabledBinding.get()) {
          return;
        }
        if (self.active && dependencies2 !== void 0 && !dependencies2.every((dep) => dependencies(dep))) {
          self.active = false;
          return;
        }
        opt2.set(self.active);
      });
    }
  }
);

// src/components/shared/FileChooserButton.tsx
var FileChooserButton = class extends astalify(Gtk4.FileChooserButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of FileChooserButton.
   * @param props - The properties for the FileChooserButton component.
   * @memberof FileChooserButton
   */
  constructor(props) {
    super(props);
  }
};
var FileChooserButton_default = FileChooserButton;

// src/components/settings/shared/inputs/image.tsx
var handleFileSet = (opt2) => (self) => {
  const uri = self.get_uri();
  if (!uri) {
    return;
  }
  try {
    const decodedPath = decodeURIComponent(uri.replace("file://", ""));
    opt2.set(decodedPath);
  } catch (error) {
    console.error("Failed to decode URI:", error);
  }
};
var ImageInputter = ({
  opt: opt2
}) => {
  return /* @__PURE__ */ jsx2(
    FileChooserButton_default,
    {
      on_file_set: (self) => {
        return handleFileSet(opt2)(self);
      }
    }
  );
};

// src/components/settings/shared/inputs/import.tsx
var ImportInputter = ({ exportData }) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "options-import",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            importFiles(exportData?.themeOnly);
          }
        },
        children: /* @__PURE__ */ jsx2("label", { label: "import" })
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "options-export",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            saveFileDialog(exportData?.filePath, exportData?.themeOnly);
          }
        },
        children: /* @__PURE__ */ jsx2("label", { label: "export" })
      }
    )
  ] });
};

// src/components/settings/shared/inputs/wallpaper.tsx
var WallpaperInputter = ({
  opt: opt2
}) => {
  if (typeof opt2.get() === "string") {
    return /* @__PURE__ */ jsx2(
      FileChooserButton_default,
      {
        onFileSet: (self) => {
          const newValue = self.get_uri().replace("file://", "");
          opt2.set(newValue);
          if (options.wallpaper.enable.get()) {
            Wallpaper_default.setWallpaper(newValue);
          }
        }
      }
    );
  }
  return /* @__PURE__ */ jsx2("box", {});
};

// src/components/shared/ColorButton.tsx
var ColorButton = class extends astalify(Gtk4.ColorButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of ColorButton.
   * @param props - The properties for the ColorButton component.
   * @memberof ColorButton
   */
  constructor(props) {
    super(props);
  }
};
var ColorButton_default = ColorButton;

// src/components/settings/shared/inputs/color.tsx
var ColorInputter = ({
  opt: opt2
}) => {
  return /* @__PURE__ */ jsx2(
    ColorButton_default,
    {
      setup: (self) => {
        useHook(self, opt2, () => {
          const rgba = new Gdk.RGBA();
          rgba.parse(opt2.get());
          self.rgba = rgba;
        });
        self.connect("color-set", ({ rgba: { red, green, blue } }) => {
          const hex = (n) => {
            const c = Math.floor(255 * n).toString(16);
            return c.length === 1 ? `0${c}` : c;
          };
          opt2.set(`#${hex(red)}${hex(green)}${hex(blue)}`);
        });
      }
    }
  );
};

// src/components/settings/shared/inputs/enum.tsx
var EnumInputter = ({
  opt: opt2,
  values
}) => {
  const step = (dir) => {
    const indexOfCurrentValue = values.findIndex((index) => index === opt2.get());
    opt2.set(
      dir > 0 ? indexOfCurrentValue + dir > values.length - 1 ? values[0] : values[indexOfCurrentValue + dir] : indexOfCurrentValue + dir < 0 ? values[values.length - 1] : values[indexOfCurrentValue + dir]
    );
  };
  return /* @__PURE__ */ jsxs("box", { className: "enum-setter", children: [
    /* @__PURE__ */ jsx2("label", { label: bind(opt2).as((option) => `${option}`) }),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            step(-1);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.arrow.left })
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            step(1);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.arrow.right })
      }
    )
  ] });
};

// src/components/shared/FontButton.tsx
var FontButton = class extends astalify(Gtk4.FontButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of FontButton.
   * @param props - The properties for the FontButton component.
   * @memberof FontButton
   */
  constructor(props) {
    super(props);
  }
};
var FontButton_default = FontButton;

// src/components/settings/shared/inputs/font/utils.ts
import Pango from "gi://Pango?version=1.0";
var DEFAULT_FONT_STYLE = "normal";
var styleMap = {
  [Pango.Style.NORMAL]: "normal",
  [Pango.Style.ITALIC]: "italic",
  [Pango.Style.OBLIQUE]: "oblique"
};
var variantMap = {
  [Pango.Variant.NORMAL]: "normal",
  [Pango.Variant.SMALL_CAPS]: "small-caps"
};
var weightMap = {
  [Pango.Weight.THIN]: "thin",
  [Pango.Weight.ULTRALIGHT]: "ultralight",
  [Pango.Weight.LIGHT]: "light",
  [Pango.Weight.SEMILIGHT]: "semilight",
  [Pango.Weight.BOOK]: "book",
  [Pango.Weight.NORMAL]: "normal",
  [Pango.Weight.MEDIUM]: "medium",
  [Pango.Weight.SEMIBOLD]: "semibold",
  [Pango.Weight.BOLD]: "bold",
  [Pango.Weight.ULTRABOLD]: "ultrabold",
  [Pango.Weight.HEAVY]: "heavy"
};
function styleToString(styleEnum) {
  return styleMap[styleEnum] ?? DEFAULT_FONT_STYLE;
}

// src/components/settings/shared/inputs/font/index.tsx
var FontInputter = ({
  fontFamily,
  fontStyle,
  fontLabel
}) => /* @__PURE__ */ jsx2(
  FontButton_default,
  {
    showSize: false,
    useSize: false,
    setup: (self) => {
      self.font = fontLabel?.get() ?? fontFamily.get();
      if (fontLabel) {
        self.hook(fontLabel, () => {
          self.font = fontLabel.get();
        });
      } else {
        self.hook(fontFamily, () => {
          self.font = fontFamily.get();
        });
      }
      self.connect("font-set", ({ fontDesc, font }) => {
        const selectedFontFamily = fontDesc.get_family();
        const selectedFontStyle = styleToString(fontDesc.get_style());
        fontFamily.set(selectedFontFamily);
        fontStyle?.set(selectedFontStyle);
        fontLabel?.set(font.split(" ").slice(0, -1).join(" "));
      });
    }
  }
);

// src/components/settings/shared/Inputter.tsx
var InputField = ({
  opt: opt2,
  fontStyle,
  fontLabel,
  type = typeof opt2.get(),
  enums = [],
  disabledBinding,
  dependencies: dependencies2,
  exportData,
  min = 0,
  max = 1e6,
  increment = 1,
  className = "",
  isUnsaved
}) => {
  switch (type) {
    case "number":
      return /* @__PURE__ */ jsx2(NumberInputter, { opt: opt2, min, max, increment, isUnsaved });
    case "float":
    case "object":
      return /* @__PURE__ */ jsx2(ObjectInputter, { opt: opt2, isUnsaved, className });
    case "string":
      return /* @__PURE__ */ jsx2(StringInputter, { opt: opt2, isUnsaved });
    case "enum":
      return /* @__PURE__ */ jsx2(EnumInputter, { opt: opt2, values: enums });
    case "boolean":
      return /* @__PURE__ */ jsx2(BooleanInputter, { opt: opt2, disabledBinding, dependencies: dependencies2 });
    case "img":
      return /* @__PURE__ */ jsx2(ImageInputter, { opt: opt2 });
    case "config_import":
      return /* @__PURE__ */ jsx2(ImportInputter, { exportData });
    case "wallpaper":
      return /* @__PURE__ */ jsx2(WallpaperInputter, { opt: opt2 });
    case "font":
      return /* @__PURE__ */ jsx2(FontInputter, { fontFamily: opt2, fontLabel, fontStyle });
    case "color":
      return /* @__PURE__ */ jsx2(ColorInputter, { opt: opt2 });
    default:
      return /* @__PURE__ */ jsx2("label", { label: `No setter with type ${type}` });
  }
};
var Inputter = ({
  opt: opt2,
  fontStyle,
  fontLabel,
  type = typeof opt2.get(),
  enums,
  disabledBinding,
  dependencies: dependencies2,
  exportData,
  min,
  max,
  increment,
  className,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsx2("box", { className: /export|import/.test(type || "") ? "" : "inputter-container", valign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    InputField,
    {
      type,
      opt: opt2,
      fontStyle,
      fontLabel,
      enums,
      disabledBinding,
      dependencies: dependencies2,
      exportData,
      min,
      max,
      increment,
      className,
      isUnsaved
    }
  ) });
};

// src/components/settings/shared/Option/SettingInput.tsx
var SettingInput = ({
  className,
  isUnsaved,
  ...props
}) => {
  return /* @__PURE__ */ jsx2(
    Inputter,
    {
      opt: props.opt,
      fontStyle: props.fontStyle,
      fontLabel: props.fontLabel,
      type: props.type,
      enums: props.enums,
      disabledBinding: props.disabledBinding,
      dependencies: props.dependencies,
      exportData: props.exportData,
      min: props.min,
      max: props.max,
      increment: props.increment,
      className,
      isUnsaved
    }
  );
};

// src/components/settings/shared/Option/index.tsx
var Option = ({
  className,
  ...props
}) => {
  const isUnsaved = Variable(false);
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "option-item",
      hexpand: true,
      onDestroy: () => {
        isUnsaved.drop();
      },
      children: [
        /* @__PURE__ */ jsx2(PropertyLabel, { title: props.title, subtitle: props.subtitle, subtitleLink: props.subtitleLink }),
        /* @__PURE__ */ jsx2(SettingInput, { isUnsaved, className, ...props }),
        /* @__PURE__ */ jsx2(ResetButton, { ...props })
      ]
    }
  );
};

// src/components/settings/shared/Header.tsx
var Header6 = ({ title }) => {
  return /* @__PURE__ */ jsxs("box", { className: "options-header", children: [
    /* @__PURE__ */ jsx2("label", { className: "label-name", label: title }),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator", valign: Gtk4.Align.CENTER, hexpand: true })
  ] });
};

// src/components/settings/pages/theme/menus/index.tsx
var MenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "General Settings",
      className: "menu-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "General" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.dummy,
            title: "Theme",
            subtitle: "WARNING: Importing a theme will replace your current theme color settings.",
            type: "config_import",
            exportData: { filePath: CONFIG, themeOnly: true }
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.monochrome,
            title: "Use Global Colors",
            type: "boolean",
            disabledBinding: options_default.theme.matugen
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.wallpaper.pywal,
            title: "Generate Pywal Colors",
            subtitle: "Whether to also generate pywal colors with chosen wallpaper",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.wallpaper.enable,
            title: "Apply Wallpapers",
            subtitle: "Whether to apply the wallpaper or to only use it for Matugen color generation.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.wallpaper.image,
            title: "Wallpaper",
            subtitle: bind(options_default.wallpaper.image).as((wallpaper) => wallpaper || "No Wallpaper Selected"),
            type: "wallpaper"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.background, title: "Background Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.opacity,
            title: "Menu Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.cards, title: "Cards", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.card_radius, title: "Card Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.text, title: "Primary Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.dimtext, title: "Dim Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.feinttext, title: "Feint Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.label, title: "Label Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.border.size, title: "Border Width", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.border.radius, title: "Border Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.border.color, title: "Border Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Popover" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.popover.radius, title: "Popover Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.popover.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.popover.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.listitems.active,
            title: "Active",
            subtitle: "Items of a list (network name, bluetooth device name, playback device, etc.) when active or hovered.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.icons.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Switch" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.switch.enabled, title: "Enabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.switch.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.switch.radius, title: "Switch Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.switch.slider_radius, title: "Switch Puck Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Check/Radio Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.check_radio_button.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.check_radio_button.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.buttons.radius, title: "Button Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.buttons.default, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.buttons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.buttons.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.buttons.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.iconbuttons.passive, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.iconbuttons.active, title: "Active/Hovered", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Progress Bar" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.progressbar.radius, title: "Progress Bar Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.progressbar.foreground, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.progressbar.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.slider.primary, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.slider.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.slider.backgroundhover, title: "Background (Hover)", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.slider.slider_radius, title: "Slider Puck Radius", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.slider.progress_radius,
            title: "Slider/Progress Bar Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.slider.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.scroller.radius, title: "Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.scroller.width, title: "Width", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Dropdown Menu" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.dropdownmenu.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.dropdownmenu.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.dropdownmenu.divider, title: "Divider", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Tooltips" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.tooltip.radius, title: "Tooltip Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.tooltip.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.tooltip.text, title: "Text", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/matugen.tsx
var Matugen = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Matugen Settings",
      className: "menu-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Matugen Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.matugen,
            title: "Enable Matugen",
            type: "boolean",
            dependencies: ["matugen", "swww"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.matugen_settings.mode,
            title: "Matugen Theme",
            type: "enum",
            enums: ["light", "dark"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.matugen_settings.scheme_type,
            title: "Matugen Scheme",
            type: "enum",
            enums: [
              "content",
              "expressive",
              "fidelity",
              "fruit-salad",
              "monochrome",
              "neutral",
              "rainbow",
              "tonal-spot"
            ]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.matugen_settings.variation,
            title: "Matugen Variation",
            type: "enum",
            enums: [
              "standard_1",
              "standard_2",
              "standard_3",
              "monochrome_1",
              "monochrome_2",
              "monochrome_3",
              "vivid_1",
              "vivid_2",
              "vivid_3"
            ]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.matugen_settings.contrast,
            title: "Contrast",
            subtitle: "Range: -1 to 1 (Default: 0)",
            type: "float"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/bar/index.tsx
var BarTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bar",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: false,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "General" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.transparent, title: "Transparent", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.background, title: "Background Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.style,
            title: "Button Style",
            type: "enum",
            enums: ["default", "split", "wave", "wave2"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.opacity,
            title: "Background Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.border.color, title: "Bar Border Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.opacity,
            title: "Button Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.background_opacity,
            title: "Button Background Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.background_hover_opacity,
            title: "Button Background Hover Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.monochrome,
            title: "Use Global Colors",
            type: "boolean",
            disabledBinding: options_default.theme.matugen
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.background, title: "Button Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.borderColor, title: "Button Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.text, title: "Button Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.icon, title: "Button Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Dashboard Button" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.dashboard.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.dashboard.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.dashboard.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Workspaces" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.workspaces.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.workspaces.hover, title: "Workspace Hover Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.available,
            title: "Workspace Available Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.occupied,
            title: "Workspace Occupied Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.workspaces.active, title: "Workspace Active Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.numbered_active_highlighted_text_color,
            title: "Highlighted Workspace Text Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.numbered_active_underline_color,
            title: "Workspace Underline Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.workspaces.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Window Title" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.windowtitle.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.windowtitle.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.windowtitle.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.windowtitle.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.windowtitle.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Media" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.media.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.media.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.media.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.media.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.media.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Volume" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.volume.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.volume.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.volume.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.volume.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.volume.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Network" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.network.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.network.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.network.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.network.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.network.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Bluetooth" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.bluetooth.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.bluetooth.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.bluetooth.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.bluetooth.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.bluetooth.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "System Tray" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.systray.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.systray.customIcon, title: "Custom Icons", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.systray.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Battery" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.battery.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.battery.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.battery.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.battery.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.battery.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Clock" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.clock.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.clock.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.clock.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.clock.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.clock.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Notifications" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.notifications.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.notifications.total, title: "Notification Count", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.notifications.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.notifications.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.notifications.border, title: "Border", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/notifications/index.tsx
var NotificationsTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Notifications",
      className: "notifications-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Notifications Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.background, title: "Notification Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.notification.opacity,
            title: "Notification Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.notification.actions.background,
            title: "Action Button Background",
            subtitle: "Buttons that perform actions within a notification",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.actions.text, title: "Action Button Text Color", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.label, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.time, title: "Time Stamp", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.text, title: "Body Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.notification.labelicon,
            title: "Label Icon",
            subtitle: "Icon that accompanies the label. Doesn't apply if icon is an app icon.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.close_button.background, title: "Dismiss Button", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.close_button.label, title: "Dismiss Button Text", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/osd/index.tsx
var OsdTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "OSD",
      className: "osd-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "On Screen Display Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.osd.opacity,
            title: "OSD Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.bar_color, title: "Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.osd.bar_overflow_color,
            title: "Bar Overflow",
            subtitle: "Overflow color is for when the volume goes over a 100",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.bar_empty_color, title: "Bar Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.bar_container, title: "Bar Container", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.icon_container, title: "Icon Container", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.label, title: "Value Text", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/battery.tsx
var BatteryMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Battery Menu",
      className: "menu-theme-page battery paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Battery Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "List Items" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.listitems.active, title: "Active/Hover", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.icons.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.slider.primary, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.slider.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.battery.slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.battery.slider.puck, title: "Puck", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/bluetooth.tsx
var BluetoothMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bluetooth Menu",
      className: "menu-theme-page bluetooth paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Bluetooth Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Status" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.status, title: "Connection Status", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.bluetooth.listitems.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.icons.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.iconbutton.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.iconbutton.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.scroller.color, title: "Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Switch" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.switch.enabled, title: "Enabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.switch.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.bluetooth.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Switch Divider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.bluetooth.switch_divider,
            title: "Switch Divider",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/clock.tsx
var ClockMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Clock Menu",
      className: "menu-theme-page clock paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Clock Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Time" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.time.time, title: "Time", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.time.timeperiod,
            title: "Period",
            subtitle: "AM/PM",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Calendar" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.calendar.yearmonth, title: "Year/Month", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.calendar.weekdays, title: "Weekdays", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.calendar.paginator,
            title: "Navigation Arrows (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.calendar.currentday, title: "Current Day", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.calendar.days, title: "Days", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.calendar.contextdays,
            title: "Trailing/Leading Days",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Weather" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.icon,
            title: "Current Weather Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.temperature,
            title: "Current Temperature",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.weather.status, title: "Current Status", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.clock.weather.stats, title: "Current Stats", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.thermometer.extremelyhot,
            title: "Thermometer - Extremely Hot",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.thermometer.hot,
            title: "Thermometer - Hot",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.thermometer.moderate,
            title: "Thermometer - Moderate",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.thermometer.cold,
            title: "Thermometer - Cold",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.thermometer.extremelycold,
            title: "Thermometer - Extremely Cold",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.hourly.time,
            title: "Hourly Weather Time",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.hourly.icon,
            title: "Hourly Weather Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.clock.weather.hourly.temperature,
            title: "Hourly Weather Temperature",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/dashboard.tsx
var DashboardMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Dashboard Menu",
      className: "menu-theme-page dashboard paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Profile" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.profile.name, title: "Profile Name", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.powermenu.shutdown, title: "Shutdown", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.powermenu.restart, title: "Restart", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.powermenu.logout, title: "Log Out", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.powermenu.sleep, title: "Sleep", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.card,
            title: "Confirmation Dialog Card",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.background,
            title: "Confirmation Dialog Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.border,
            title: "Confirmation Dialog Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.label,
            title: "Confirmation Dialog Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.body,
            title: "Confirmation Dialog Description",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.confirm,
            title: "Confirmation Dialog Confirm Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.deny,
            title: "Confirmation Dialog Cancel Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.button_text,
            title: "Confirmation Dialog Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Shortcuts" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.shortcuts.background,
            title: "Primary",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.shortcuts.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.shortcuts.recording,
            title: "Recording",
            subtitle: "Color of the Record button when recording is in progress",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Controls" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.disabled,
            title: "Module Off",
            subtitle: "Button color when element is disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.wifi.background,
            title: "Wifi Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.wifi.text,
            title: "Wifi Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.bluetooth.background,
            title: "Bluetooth Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.bluetooth.text,
            title: "Bluetooth Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.notifications.background,
            title: "Notifications Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.notifications.text,
            title: "Notifications Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.volume.background,
            title: "Volume Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.volume.text,
            title: "Volume Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.input.background,
            title: "Input Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.controls.input.text,
            title: "Input Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Directories" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.left.top.color,
            title: "Directory: Left - Top",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.left.middle.color,
            title: "Directory: Left - Middle",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.left.bottom.color,
            title: "Directory: Left - Bottom",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.right.top.color,
            title: "Directory: Right - Top",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.right.middle.color,
            title: "Directory: Right - Middle",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.directories.right.bottom.color,
            title: "Directory: Right - Bottom",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "System Stats" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.bar_background,
            title: "Bar Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.cpu.icon, title: "CPU Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.cpu.bar, title: "CPU Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.cpu.label,
            title: "CPU Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.ram.icon, title: "RAM Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.ram.bar, title: "RAM Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.ram.label,
            title: "RAM Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.gpu.icon, title: "GPU Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.gpu.bar, title: "GPU Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.gpu.label,
            title: "GPU Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.disk.icon,
            title: "Disk Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.dashboard.monitors.disk.bar, title: "Disk Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.monitors.disk.label,
            title: "Disk Label",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/media.tsx
var MediaMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Media Menu",
      className: "menu-theme-page media paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Media Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.song, title: "Song", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.artist, title: "Artist", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.album, title: "Album", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.timestamp, title: "Time Stamp", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card/Album Art" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.card.color, title: "Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.media.card.tint,
            title: "Tint",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Buttons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.media.buttons.inactive,
            title: "Unavailable",
            subtitle: "Disabled button when media control isn't available.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.media.buttons.enabled,
            title: "Enabled",
            subtitle: "Ex: Button color when shuffle/loop is enabled.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.buttons.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.buttons.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.slider.primary, title: "Primary Color", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.slider.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.media.slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.media.slider.puck, title: "Puck", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/network.tsx
var NetworkMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Network Menu",
      className: "menu-theme-page network paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Network Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Status" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.network.status.color,
            title: "Connection Status",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Switch" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.switch.enabled, title: "Enabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.switch.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "List Items" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.listitems.active, title: "Active/Hover", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.icons.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.scroller.color, title: "Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.iconbuttons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.network.iconbuttons.passive, title: "Passive", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/notifications.tsx
var NotificationsMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Notifications Menu",
      className: "menu-theme-page notifications paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Notifications Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.label, title: "Menu Label", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.card, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.no_notifications_label,
            title: "Empty Notifications Backdrop",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.switch_divider,
            title: "Switch Divider",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.clear,
            title: "Clear Notifications Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Switch" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.switch.enabled, title: "Enabled", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.switch.disabled,
            title: "Disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.notifications.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Scrollbar" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.scrollbar.color,
            title: "Scrollbar Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Pagination" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.pager.background,
            title: "Pager Footer Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.pager.button,
            title: "Pager Button Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.notifications.pager.label,
            title: "Pager Label Color",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/systray.tsx
var SystrayMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "System Tray",
      className: "menu-theme-page systray paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Dropdown Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.systray.dropdownmenu.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.systray.dropdownmenu.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.systray.dropdownmenu.divider,
            title: "Section Divider",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/volume.tsx
var VolumeMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Volume Menu",
      className: "menu-theme-page volume paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Volume Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "List Items" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.listitems.active, title: "Active/Hover", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Icon Button" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.iconbutton.active, title: "Active/Hover", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.iconbutton.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Audio Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.audio_slider.primary, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.volume.audio_slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.volume.audio_slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.audio_slider.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Input Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.input_slider.primary, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.volume.input_slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.volume.input_slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.volume.input_slider.puck, title: "Puck", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/power.tsx
var PowerMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Power Menu",
      className: "menu-theme-page power paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Background" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.background.color, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Shutdown Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.shutdown.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.shutdown.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.shutdown.text,
            title: "Label Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.shutdown.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Reboot Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.restart.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.restart.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.restart.text, title: "Label Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.restart.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Logout Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.logout.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.logout.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.logout.text, title: "Label Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.logout.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Sleep Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.sleep.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.power.buttons.sleep.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.sleep.text, title: "Label Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.menus.menu.power.buttons.sleep.icon, title: "Icon", type: "color" })
      ] })
    }
  );
};

// src/components/bar/settings/theme.tsx
var CustomModuleTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Custom Modules",
      className: "menu-theme-page customModules paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: false,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "RAM" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.background, title: "Label Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.ram.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "CPU" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.background, title: "Label Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cpu.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "CPU Temperature" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpuTemp.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpuTemp.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cpuTemp.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cpuTemp.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpuTemp.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Storage" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.storage.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.storage.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.storage.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.storage.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.storage.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Netstat" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.netstat.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.netstat.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.netstat.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.netstat.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.netstat.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Keyboard Layout" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.kbLayout.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.kbLayout.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.kbLayout.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.kbLayout.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.kbLayout.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Updates" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.updates.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.updates.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.updates.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.updates.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.updates.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Submap" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.submap.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.submap.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.submap.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.submap.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.submap.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Weather" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.weather.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.weather.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.weather.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.weather.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.weather.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Hyprsunset" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hyprsunset.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hyprsunset.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hyprsunset.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hyprsunset.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hyprsunset.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Hypridle" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hypridle.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hypridle.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hypridle.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hypridle.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hypridle.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Cava" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cava.text, title: "Bars", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cava.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cava.background, title: "Label Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cava.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cava.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Power" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.power.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.power.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.power.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.power.border, title: "Border", type: "color" })
      ] })
    }
  );
};

// src/components/settings/helpers.ts
var settingsPages = ["Configuration", "Theming"];
var themePages = [
  "General Settings",
  "Matugen Settings",
  "Bar",
  "Notifications",
  "OSD",
  "Battery Menu",
  "Bluetooth Menu",
  "Clock Menu",
  "Dashboard Menu",
  "Media Menu",
  "Network Menu",
  "Notifications Menu",
  "System Tray",
  "Volume Menu",
  "Power Menu",
  "Custom Modules"
];
var configPages = [
  "General",
  "Bar",
  "Media Menu",
  "Notifications",
  "OSD",
  "Volume",
  "Clock Menu",
  "Dashboard Menu",
  "Custom Modules",
  "Power Menu"
];

// src/components/settings/pages/theme/index.tsx
var { transition: transition7, transitionTime } = options_default.menus;
var CurrentPage = Variable("General Settings");
var ThemesMenu = () => {
  return /* @__PURE__ */ jsxs("box", { name: "Theming", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [0, 1, 2].map((section) => {
      return /* @__PURE__ */ jsx2("box", { children: themePages.map((page, index) => {
        if (index >= section * 6 && index < section * 6 + 6) {
          return /* @__PURE__ */ jsx2(
            "button",
            {
              className: bind(CurrentPage).as(
                (pg) => `pager-button ${pg === page ? "active" : ""}`
              ),
              label: page,
              onClick: (_, event) => {
                if (isPrimaryClick(event)) {
                  CurrentPage.set(page);
                }
              },
              halign: Gtk4.Align.CENTER
            }
          );
        }
        return /* @__PURE__ */ jsx2("box", {});
      }) });
    }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition7).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime),
        shown: bind(CurrentPage),
        vexpand: false,
        children: [
          /* @__PURE__ */ jsx2(MenuTheme, {}),
          /* @__PURE__ */ jsx2(Matugen, {}),
          /* @__PURE__ */ jsx2(BarTheme, {}),
          /* @__PURE__ */ jsx2(NotificationsTheme, {}),
          /* @__PURE__ */ jsx2(OsdTheme, {}),
          /* @__PURE__ */ jsx2(BatteryMenuTheme, {}),
          /* @__PURE__ */ jsx2(BluetoothMenuTheme, {}),
          /* @__PURE__ */ jsx2(ClockMenuTheme, {}),
          /* @__PURE__ */ jsx2(DashboardMenuTheme, {}),
          /* @__PURE__ */ jsx2(MediaMenuTheme, {}),
          /* @__PURE__ */ jsx2(NetworkMenuTheme, {}),
          /* @__PURE__ */ jsx2(NotificationsMenuTheme, {}),
          /* @__PURE__ */ jsx2(SystrayMenuTheme, {}),
          /* @__PURE__ */ jsx2(VolumeMenuTheme, {}),
          /* @__PURE__ */ jsx2(PowerMenuTheme, {}),
          /* @__PURE__ */ jsx2(CustomModuleTheme, {})
        ]
      }
    )
  ] });
};

// src/components/settings/pages/config/general/index.tsx
var BarGeneral = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "General", className: "bar-theme-page paged-container", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "General Settings" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.font.name,
        fontLabel: options_default.theme.font.label,
        fontStyle: options_default.theme.font.style,
        title: "Font",
        type: "font"
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.font.size, title: "Font Size", type: "string" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.font.weight,
        title: "Font Weight",
        subtitle: "100, 200, 300, etc.",
        type: "number",
        increment: 100,
        min: 100,
        max: 900
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.dummy,
        title: "Config",
        subtitle: "WARNING: Importing a configuration will replace your current configuration settings.",
        type: "config_import",
        exportData: { filePath: CONFIG, themeOnly: false }
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.hyprpanel.restartAgs,
        title: "Restart Hyprpanel On Wake Or Monitor Connection",
        subtitle: "WARNING: Disabling this may cause bar issues on sleep/monitor connect.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.hyprpanel.restartCommand,
        title: "Restart Command",
        subtitle: "Command executed when restarting. Use '-b busName' flag if needed.",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.terminal, title: "Terminal", subtitle: "For tools like 'btop'", type: "string" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.tear,
        title: "Tearing Compatible",
        subtitle: "Switches overlays to 'top' layer for tearing compatibility.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.transition,
        title: "Menu Transition",
        type: "enum",
        enums: ["none", "crossfade"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.transitionTime,
        title: "Menu Transition Duration",
        type: "number",
        min: 0,
        max: 1e4,
        increment: 25
      }
    ),
    /* @__PURE__ */ jsx2(Header6, { title: "Scaling" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.scalingPriority,
        title: "Scaling Priority",
        type: "enum",
        enums: ["both", "gdk", "hyprland"]
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.scaling, title: "Bar", type: "number", min: 1, max: 100, increment: 5 }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.notification.scaling,
        title: "Notifications",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.scaling, title: "OSD", type: "number", min: 1, max: 100, increment: 5 }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.dashboard.scaling,
        title: "Dashboard Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.dashboard.confirmation_scaling,
        title: "Confirmation Dialog",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.media.scaling,
        title: "Media Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.volume.scaling,
        title: "Volume Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.network.scaling,
        title: "Network Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.bluetooth.scaling,
        title: "Bluetooth Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.battery.scaling,
        title: "Battery Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.clock.scaling,
        title: "Clock Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.notifications.scaling,
        title: "Notifications Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.power.scaling,
        title: "Power Menu",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.tooltip.scaling,
        title: "Tooltips",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.popover.scaling,
        title: "Popovers",
        subtitle: "e.g., Right click menu of system tray items.",
        type: "number",
        min: 1,
        max: 100,
        increment: 5
      }
    )
  ] }) });
};

// src/components/settings/pages/config/bar/index.tsx
var BarSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bar",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      className: "menu-theme-page paged-container",
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Layouts" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.layouts,
            title: "Bar Layouts for Monitors",
            subtitle: "Wiki Link: https://hyprpanel.com/configuration/panel.html#layouts",
            type: "object",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#layouts",
            className: "bar-layout-input"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.floating, title: "Floating Bar", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.location, title: "Location", type: "enum", enums: ["top", "bottom"] }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.autoHide,
            title: "Auto Hide",
            type: "enum",
            enums: ["never", "fullscreen", "single-window"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.enableBorders,
            title: "Enable Button Borders",
            subtitle: "Enables button borders for all buttons in the bar.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.borderSize,
            title: "Button Border Size",
            subtitle: "Button border for the individual modules must be enabled first",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "General" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.border.location,
            title: "Bar Border Location",
            type: "enum",
            enums: ["none", "full", "top", "right", "bottom", "left", "horizontal", "vertical"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.border.width, title: "Bar Border Width", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.border_radius,
            title: "Border Radius",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.outer_spacing,
            title: "Outer Spacing",
            subtitle: "Spacing on the outer left and right edges of the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.y_margins,
            title: "Vertical Margins",
            subtitle: "Spacing above/below the buttons in the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.spacing,
            title: "Button Spacing",
            subtitle: "Spacing between the buttons in the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.padding_x, title: "Button Horizontal Padding", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.padding_y, title: "Button Vertical Padding", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.radius, title: "Button Radius", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.innerRadiusMultiplier,
            title: "Inner Button Radius Multiplier",
            subtitle: "Change this to fine-tune the padding and prevent any overflow or gaps.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.layer,
            title: "Layer",
            type: "enum",
            subtitle: "Layer determines the Z index of your bar.",
            enums: ["top", "bottom", "overlay", "background"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.dropdownGap,
            title: "Dropdown Gap",
            subtitle: "The gap between the dropdown and the bar",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.margin_top,
            title: "Margin Top",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.margin_bottom,
            title: "Margin Bottom",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.margin_sides,
            title: "Margin Sides",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Actions" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.scrollSpeed,
            title: "Scrolling Speed",
            subtitle: "The speed at which the commands assigned to the scroll event will trigger",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Dashboard" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.icon, title: "Dashboard Menu Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.autoDetectIcon, title: "Auto Detect Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.dashboard.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.launcher.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Workspaces" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.workspaces.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.monitorSpecific,
            title: "Monitor Specific",
            subtitle: "Only workspaces of the monitor are shown.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.show_icons, title: "Show Workspace Icons", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.show_numbered, title: "Show Workspace Numbers", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.workspaceMask,
            title: "Zero-Based Workspace Numbers",
            subtitle: "Start all workspace numbers from 0 on each monitor.\nRequires 'Show Workspace Numbers' to be enabled.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.showWsIcons,
            title: "Map Workspaces to Icons",
            subtitle: "https://hyprpanel.com/configuration/panel.html#show-workspace-icons",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.showApplicationIcons,
            title: "Map Workspaces to Application Icons",
            subtitle: "Requires 'Map Workspace to Icons' enabled. See docs.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.applicationIconOncePerWorkspace,
            title: "Hide Duplicate App Icons",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.showAllActive,
            title: "Mark Active Workspace On All Monitors",
            subtitle: "Marks the currently active workspace on each monitor.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.numbered_active_indicator,
            title: "Numbered Workspace Identifier",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "enum",
            enums: ["underline", "highlight", "color"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.smartHighlight,
            title: "Smart Highlight",
            subtitle: "Automatically determines highlight color for mapped icons.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.numbered_active_highlight_border,
            title: "Highlight Radius",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.numbered_active_highlight_padding,
            title: "Highlight Padding",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.pill.radius,
            title: "Pill Radius",
            subtitle: "Adjust the radius for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.pill.height,
            title: "Pill Height",
            subtitle: "Adjust the height for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.pill.width,
            title: "Pill Width",
            subtitle: "Adjust the width for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.pill.active_width,
            title: "Active Pill Width",
            subtitle: "Adjust the width for the active default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.workspaces.fontSize,
            title: "Indicator Size",
            subtitle: "Only applicable to numbered workspaces and mapped icons. Adjust carefully.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.icons.available, title: "Workspace Available", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.icons.active, title: "Workspace Active", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.icons.occupied, title: "Workspace Occupied", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.applicationIconMap,
            title: "App Icon Mappings",
            subtitle: "Use class/title from 'hyprctl clients'",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.applicationIconFallback,
            title: "Fallback App Icon",
            subtitle: "Fallback icon if no specific icon defined",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.applicationIconEmptyWorkspace,
            title: "App Icon for empty workspace",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.workspaceIconMap,
            title: "Workspace Icon & Color Mappings",
            subtitle: "https://hyprpanel.com/configuration/panel.html#show-workspace-icons",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.spacing,
            title: "Spacing",
            subtitle: "Spacing between workspace icons",
            type: "float"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.workspaces,
            title: "Persistent Workspaces",
            subtitle: "Requires workspace rules to be defined if 'Monitor Specific' is selected.",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.reverse_scroll,
            title: "Invert Scroll",
            subtitle: "Scrolling up goes to previous workspace",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.workspaces.scroll_speed, title: "Scrolling Speed", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.workspaces.ignored,
            title: "Ignored Workspaces",
            subtitle: "A regex defining ignored workspaces",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Window Titles" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.windowtitle.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.custom_title, title: "Use Custom Title", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.windowtitle.title_map,
            title: "Window Title Mappings",
            subtitle: "Requires Custom Title.\\nWiki: https://hyprpanel.com/configuration/panel.html#window-title-mappings",
            type: "object",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#window-title-mappings"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.windowtitle.class_name,
            title: "Use Class Name",
            subtitle: "If custom title is disabled, shows class name instead.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.label, title: "Show Window Title Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.icon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.windowtitle.truncation,
            title: "Truncate Window Title",
            subtitle: "Truncates the window title to a specified size.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.truncation_size, title: "Truncation Size", type: "number", min: 10 }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.windowtitle.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.windowtitle.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Volume" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.volume.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.volume.label, title: "Show Volume Percentage", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.volume.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.volume.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.volume.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.volume.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.volume.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Network" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.network.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.label, title: "Show Network Name", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.showWifiInfo, title: "Show Wifi Info On Hover", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.network.truncation,
            title: "Truncate Network Name",
            subtitle: "Truncates network name to specified size.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.truncation_size, title: "Truncation Size", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.network.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.network.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Bluetooth" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.bluetooth.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.bluetooth.label, title: "Show Bluetooth Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.bluetooth.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.bluetooth.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.bluetooth.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.bluetooth.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.bluetooth.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Battery" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.battery.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.battery.label, title: "Show Battery Percentage", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.battery.hideLabelWhenFull,
            title: "Hide Battery Percentage When Full",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.battery.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.battery.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.battery.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.battery.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.battery.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "System Tray" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.systray.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.systray.ignore,
            title: "Ignore List",
            subtitle: "Apps to ignore\\nWiki: https://hyprpanel.com/configuration/panel.html#system-tray",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#system-tray",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.systray.customIcons,
            title: "Custom Systray Icons",
            subtitle: "Define custom icons for systray.\\nWiki: https://hyprpanel.com/configuration/panel.html#custom-systray-icons",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#custom-systray-icons",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Clock" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.clock.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.format, title: "Clock Format", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.icon, title: "Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.showIcon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.showTime, title: "Show Time", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.clock.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.clock.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Media" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.media.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.media.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.media.format,
            title: "Label Format",
            subtitle: "Placeholders: {title}, {artists}, {artist}, {album}, {name}, {identity}",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.media.show_label, title: "Toggle Media Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.media.truncation,
            title: "Truncate Media Label",
            subtitle: "Requires Toggle Media Label.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.media.truncation_size,
            title: "Truncation Size",
            subtitle: "Requires Toggle Media Label.",
            type: "number",
            min: 10
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.media.show_active_only,
            title: "Auto Hide",
            subtitle: "Hide if no media detected.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.media.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.media.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.media.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.media.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Notifications" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.notifications.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.notifications.show_total,
            title: "Show Total # of notifications",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.notifications.hideCountWhenZero,
            title: "Auto Hide Label",
            subtitle: "Hide label when zero notifications",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.notifications.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.notifications.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.notifications.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.notifications.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.notifications.scrollDown, title: "Scroll Down", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/menus/media.tsx
var MediaMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Media Menu", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "Media" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.media.hideAuthor, title: "Hide Author", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.media.hideAlbum, title: "Hide Album", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.media.displayTime, title: "Display Time Info", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.media.displayTimeTooltip,
        title: "Display Time Tooltip",
        subtitle: "Show media time info on hover",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.media.noMediaText,
        title: "No Media Placeholder",
        subtitle: "Text when no media is playing",
        type: "string"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/notifications/index.tsx
var NotificationSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Notifications", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "Notification Settings" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.ignore,
        title: "Ignored Applications",
        subtitle: "Wiki: https://hyprpanel.com/configuration/notifications.html#ignored-applications",
        subtitleLink: "https://hyprpanel.com/configuration/notifications.html#ignored-applications",
        type: "object"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.position,
        title: "Notification Location",
        type: "enum",
        enums: ["top left", "top", "top right", "right", "bottom right", "bottom", "bottom left", "left"]
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.notification.border_radius, title: "Border Radius", type: "string" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.monitor,
        title: "Monitor",
        subtitle: "ID of the monitor to display notifications",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.showActionsOnHover,
        title: "Show Actions only on Hover",
        subtitle: "Actions appear on hover",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.active_monitor,
        title: "Follow Cursor",
        subtitle: "Notifications follow the monitor of your cursor",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.clearDelay,
        title: "Clear Delay",
        subtitle: "Delay in ms before clearing a notification",
        type: "number",
        increment: 20
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.timeout,
        title: "Popup Timeout",
        subtitle: "Duration in ms the notification popup stays visible",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.autoDismiss,
        title: "Automatically Dismiss",
        subtitle: "Notifications with a timeout will dismiss automatically.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.cache_actions,
        title: "Preserve Actions",
        subtitle: "Persist action buttons after reboot.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(Header6, { title: "Notification Menu Settings" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.notifications.height,
        title: "Notification Menu Height",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.notifications.displayedTotal,
        title: "Displayed Total",
        subtitle: "Number of notifications to show at once.",
        type: "number",
        min: 1
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.notifications.pager.show,
        title: "Show Pager",
        subtitle: "Shows pagination footer.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.notifications.scrollbar.width,
        title: "Scrollbar Width",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.bar.menus.menu.notifications.scrollbar.radius,
        title: "Scrollbar Radius",
        type: "string"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/osd/index.tsx
var OSDSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "OSD", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "On Screen Display" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.enable, title: "Enabled", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.duration,
        title: "Duration",
        type: "number",
        min: 100,
        max: 1e4,
        increment: 500
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.orientation,
        title: "Orientation",
        type: "enum",
        enums: ["horizontal", "vertical"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.location,
        title: "Position",
        subtitle: "Position of OSD",
        type: "enum",
        enums: ["top left", "top", "top right", "right", "bottom right", "bottom", "bottom left", "left"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.monitor,
        title: "Monitor",
        subtitle: "Monitor ID for OSD display",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.active_monitor,
        title: "Follow Cursor",
        subtitle: "OSD follows monitor of cursor",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.margins,
        title: "Margins",
        subtitle: "Format: top right bottom left",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.border.size, title: "Border Size", type: "string" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.osd.radius, title: "Radius", subtitle: "Radius of the OSD", type: "string" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.theme.osd.muted_zero,
        title: "Mute Volume as Zero",
        subtitle: "Display volume as 0 when muting",
        type: "boolean"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/volume.tsx
var VolumeMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Volume", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "Volume" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.volume.raiseMaximumVolume,
        title: "Allow Raising Volume Above 100%",
        subtitle: "Allows up to 150% volume",
        type: "boolean"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/clock.tsx
var ClockMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Clock Menu", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header6, { title: "Time" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.clock.time.military, title: "Use 24hr time", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.clock.time.hideSeconds, title: "Hide seconds", type: "boolean" }),
    /* @__PURE__ */ jsx2(Header6, { title: "Weather" }),
    /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.clock.weather.enabled, title: "Enabled", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.clock.weather.location,
        title: "Location",
        subtitle: "Zip Code, Postal Code, City, etc.",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.clock.weather.key,
        title: "Weather API Key",
        subtitle: "API Key or path to JSON file containing 'weather_api_key'",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.clock.weather.unit,
        title: "Units",
        type: "enum",
        enums: ["imperial", "metric"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: options_default.menus.clock.weather.interval,
        title: "Weather Fetching Interval (ms)",
        subtitle: "May require AGS restart.",
        type: "number"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/dashboard.tsx
var DashboardMenuSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Dashboard Menu",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      overlayScrolling: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.powermenu.avatar.image,
            title: "Profile Image",
            type: "img",
            subtitle: "By default uses '~/.face.icon'"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.powermenu.avatar.name,
            title: "Profile Name",
            subtitle: "Use 'system' for auto system name",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.profile.size,
            title: "Profile Image Size",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.menus.menu.dashboard.profile.radius,
            title: "Profile Image Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.powermenu.confirmation,
            title: "Show Confirmation Dialogue",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.powermenu.shutdown, title: "Shutdown Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.powermenu.reboot, title: "Reboot Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.powermenu.logout, title: "Logout Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.powermenu.sleep, title: "Sleep Command", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Controls" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.controls.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Resource Usage Metrics" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.stats.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.stats.enable_gpu,
            title: "Track GPU",
            subtitle: "Only for NVidia + python-gpustat",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.stats.interval,
            title: "Update Interval",
            subtitle: "Frequency of system metrics polling.",
            type: "number",
            min: 100,
            increment: 500
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Shortcuts" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.shortcuts.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut1.icon,
            title: "Left - Shortcut 1 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut1.command,
            title: "Left - Shortcut 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut1.tooltip,
            title: "Left - Shortcut 1 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut2.icon,
            title: "Left - Shortcut 2 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut2.command,
            title: "Left - Shortcut 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut2.tooltip,
            title: "Left - Shortcut 2 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut3.icon,
            title: "Left - Shortcut 3 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut3.command,
            title: "Left - Shortcut 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut3.tooltip,
            title: "Left - Shortcut 3 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut4.icon,
            title: "Left - Shortcut 4 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut4.command,
            title: "Left - Shortcut 4 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.left.shortcut4.tooltip,
            title: "Left - Shortcut 4 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut1.icon,
            title: "Right - Shortcut 1 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut1.command,
            title: "Right - Shortcut 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut1.tooltip,
            title: "Right - Shortcut 1 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut3.icon,
            title: "Right - Shortcut 3 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut3.command,
            title: "Right - Shortcut 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.shortcuts.right.shortcut3.tooltip,
            title: "Right - Shortcut 3 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header6, { title: "Directories" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.dashboard.directories.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory1.label,
            title: "Left - Directory 1 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory1.command,
            title: "Left - Directory 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory2.label,
            title: "Left - Directory 2 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory2.command,
            title: "Left - Directory 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory3.label,
            title: "Left - Directory 3 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.left.directory3.command,
            title: "Left - Directory 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory1.label,
            title: "Right - Directory 1 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory1.command,
            title: "Right - Directory 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory2.label,
            title: "Right - Directory 2 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory2.command,
            title: "Right - Directory 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory3.label,
            title: "Right - Directory 3 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.dashboard.directories.right.directory3.command,
            title: "Right - Directory 3 (Command)",
            type: "string"
          }
        )
      ] })
    }
  );
};

// src/components/bar/settings/config.tsx
var CustomModuleSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Custom Modules",
      className: "menu-theme-page customModules paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      children: /* @__PURE__ */ jsxs("box", { className: "menu-theme-page paged-container", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "General" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.scrollSpeed, title: "Scrolling Speed", type: "number" }),
        /* @__PURE__ */ jsx2(Header6, { title: "RAM" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.icon, title: "Ram Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.ram.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.ram.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["used/total", "used", "free", "percentage"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.ram.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.ram.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "CPU" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.enableBorder, title: "Button Border", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.icon, title: "Cpu Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpu.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cpu.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpu.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "CPU Temperature" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cpuTemp.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cpuTemp.sensor,
            title: "CPU Temperature Sensor",
            subtitle: "Wiki: https://hyprpanel.com/configuration/panel.html#custom-modules",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#custom-modules",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cpuTemp.unit,
            title: "CPU Temperature Unit",
            type: "enum",
            enums: ["imperial", "metric"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.showUnit, title: "Show Unit", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.icon, title: "Cpu Temperature Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cpuTemp.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cpuTemp.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cpuTemp.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Storage" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.storage.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.icon, title: "Storage Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.storage.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.storage.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["used/total", "used", "free", "percentage"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.storage.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.storage.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Netstat" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.netstat.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.networkInterface,
            title: "Network Interface",
            subtitle: "Name of the network interface to poll.\nHINT: Get a list of interfaces with 'cat /proc/net/dev",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.dynamicIcon,
            title: "Use Network Icon",
            subtitle: "If enabled, shows current network icon indicators instead of static icon",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.icon, title: "Netstat Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.networkInLabel, title: "Network In Label", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.networkOutLabel,
            title: "Network Out Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.rateUnit,
            title: "Rate Unit",
            type: "enum",
            enums: ["GiB", "MiB", "KiB", "auto"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.netstat.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["full", "in", "out"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.netstat.pollingInterval,
            title: "Polling Interval (ms)",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.netstat.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Keyboard Layout" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.kbLayout.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.icon, title: "Keyboard Layout Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.kbLayout.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["layout", "code"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.kbLayout.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.kbLayout.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Updates" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.updates.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.updates.updateCommand,
            title: "Check Updates Command",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.updates.icon.pending,
            title: "Updates Available Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.icon.updated, title: "No Updates Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.updates.autoHide,
            title: "Auto Hide",
            subtitle: "Hides module when no updates are available.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.padZero, title: "Pad with 0", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.updates.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.updates.pollingInterval,
            title: "Polling Interval",
            subtitle: "WARNING: Be careful of your package manager's rate limit.",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.updates.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Submap" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.submap.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.submap.showSubmapName,
            title: "Show Submap Name",
            subtitle: "Displays current submap name instead of Enabled/Disabled text.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.enabledIcon, title: "Enabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.disabledIcon, title: "Disabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.enabledText, title: "Enabled Text", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.disabledText, title: "Disabled Text", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.submap.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.submap.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Weather" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.weather.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.weather.unit,
            title: "Units",
            type: "enum",
            enums: ["imperial", "metric"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.weather.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.weather.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Hyprsunset" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.hyprsunset.temperature,
            title: "Temperature",
            subtitle: "Ex: 1000k, 2000k, 5000k, etc.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hyprsunset.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.onIcon, title: "Enabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.offIcon, title: "Disabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.onLabel, title: "Enabled Label", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.offLabel, title: "Disabled Label", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hyprsunset.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.hyprsunset.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hyprsunset.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Hypridle" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.hypridle.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.onIcon, title: "Enabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.offIcon, title: "Disabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.onLabel, title: "Enabled Label", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.offLabel, title: "Disabled Label", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.hypridle.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.hypridle.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.hypridle.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Cava" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.cava.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.icon, title: "Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.showIcon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.cava.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.barCharacters, title: "Bar Characters", type: "object" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.spaceCharacter, title: "Bar Separator", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cava.showActiveOnly,
            title: "Auto Hide",
            subtitle: "Hide if no media detected.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.bars, title: "Bars", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.channels, title: "Channels", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.framerate, title: "Framerate", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.samplerate, title: "Sample Rate", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.bar.customModules.cava.autoSensitivity,
            title: "Automatic Sensitivity",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.lowCutoff, title: "Low Cutoff", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.highCutoff, title: "High Cutoff", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.noiseReduction, title: "Noise Reduction", type: "float" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.stereo, title: "Stereo", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.cava.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header6, { title: "Power" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.theme.bar.buttons.modules.power.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.theme.bar.buttons.modules.power.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.icon, title: "Power Button Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.bar.customModules.power.scrollDown, title: "Scroll Down", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/menus/power.tsx
var PowerMenuSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Power Menu",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      overlayScrolling: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.showLabel, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.power.lowBatteryNotification,
            title: "Show Notification For Low Battery",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.power.lowBatteryThreshold,
            title: "Battery Level For Notification",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.power.lowBatteryNotificationTitle,
            title: "Low Battery Notification Title",
            subtitle: "Use $POWER_LEVEL for battery percent",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: options_default.menus.power.lowBatteryNotificationText,
            title: "Low Battery Notification Body",
            subtitle: "Use $POWER_LEVEL for battery percent",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.confirmation, title: "Confirmation Dialog", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.shutdown, title: "Shutdown Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.reboot, title: "Reboot Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.logout, title: "Logout Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: options_default.menus.power.sleep, title: "Sleep Command", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/index.tsx
var { transition: transition8, transitionTime: transitionTime2 } = options_default.menus;
var CurrentPage2 = Variable("General");
var SettingsMenu = () => {
  return /* @__PURE__ */ jsxs("box", { name: "Configuration", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [0, 1, 2].map((section) => {
      return /* @__PURE__ */ jsx2("box", { children: configPages.map((page, index) => {
        if (index >= section * 6 && index < section * 6 + 6) {
          return /* @__PURE__ */ jsx2(
            "button",
            {
              className: bind(CurrentPage2).as(
                (pg) => `pager-button ${pg === page ? "active" : ""}`
              ),
              label: page,
              onClick: (_, event) => {
                if (isPrimaryClick(event)) {
                  CurrentPage2.set(page);
                }
              },
              halign: Gtk4.Align.CENTER
            }
          );
        }
        return /* @__PURE__ */ jsx2("box", {});
      }) });
    }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition8).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime2),
        shown: bind(CurrentPage2),
        vexpand: true,
        children: [
          /* @__PURE__ */ jsx2(BarGeneral, {}),
          /* @__PURE__ */ jsx2(BarSettings, {}),
          /* @__PURE__ */ jsx2(MediaMenuSettings, {}),
          /* @__PURE__ */ jsx2(NotificationSettings, {}),
          /* @__PURE__ */ jsx2(OSDSettings, {}),
          /* @__PURE__ */ jsx2(VolumeMenuSettings, {}),
          /* @__PURE__ */ jsx2(ClockMenuSettings, {}),
          /* @__PURE__ */ jsx2(DashboardMenuSettings, {}),
          /* @__PURE__ */ jsx2(CustomModuleSettings, {}),
          /* @__PURE__ */ jsx2(PowerMenuSettings, {})
        ]
      }
    )
  ] });
};

// src/components/settings/PageContainer.tsx
var { transition: transition9, transitionTime: transitionTime3 } = options_default.menus;
var CurrentPage3 = Variable("Configuration");
var LastPage = Variable("Configuration");
var PageContainer = () => {
  return /* @__PURE__ */ jsxs("box", { className: "settings-page-container", halign: Gtk4.Align.FILL, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "settings-page-container2", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, children: settingsPages.map((page) => {
      return /* @__PURE__ */ jsx2(
        "button",
        {
          className: bind(CurrentPage3).as(
            (v) => `pager-button ${v === page ? "active" : ""} category`
          ),
          label: page,
          onClick: (_, event) => {
            if (isPrimaryClick(event)) {
              LastPage.set(CurrentPage3.get());
              CurrentPage3.set(page);
            }
          },
          halign: Gtk4.Align.CENTER
        }
      );
    }) }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition9).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime3),
        shown: bind(CurrentPage3),
        vexpand: false,
        hexpand: true,
        children: [
          /* @__PURE__ */ jsx2(SettingsMenu, {}),
          /* @__PURE__ */ jsx2(ThemesMenu, {})
        ]
      }
    )
  ] });
};

// src/components/settings/index.tsx
var settings_default = () => {
  return /* @__PURE__ */ jsx2(
    RegularWindow_default,
    {
      className: "settings-dialog",
      visible: false,
      name: "settings-dialog",
      title: "hyprpanel-settings",
      application: app_default,
      setup: (self) => {
        self.connect("delete-event", () => {
          self.hide();
          return true;
        });
        self.set_default_size(200, 300);
      },
      children: /* @__PURE__ */ jsxs("box", { className: "settings-dialog-box", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header5, {}),
        /* @__PURE__ */ jsx2(PageContainer, {})
      ] })
    }
  );
};

// src/components/osd/helpers.ts
var { enable, duration, active_monitor: active_monitor2, monitor: monitor2 } = options_default.theme.osd;
var count = 0;
var isStartingUp = true;
timeout(3e3, () => {
  isStartingUp = false;
});
var handleReveal = (self) => {
  if (isStartingUp) {
    return;
  }
  if (!enable.get()) {
    return;
  }
  self.reveal_child = true;
  count++;
  timeout(duration.get(), () => {
    count--;
    if (count === 0) {
      self.reveal_child = false;
    }
  });
};
var getOsdMonitor = () => {
  return Variable.derive(
    [bind(hyprlandService, "focusedMonitor"), bind(monitor2), bind(active_monitor2)],
    (currentMonitor, defaultMonitor, followMonitor) => {
      if (followMonitor === true) {
        return currentMonitor.id;
      }
      return defaultMonitor;
    }
  );
};
var revealerSetup = (self) => {
  self.hook(enable, () => {
    handleReveal(self);
  });
  self.hook(brightnessService, "notify::screen", () => {
    handleReveal(self);
  });
  self.hook(brightnessService, "notify::kbd", () => {
    handleReveal(self);
  });
  Variable.derive(
    [bind(audioService.defaultMicrophone, "volume"), bind(audioService.defaultMicrophone, "mute")],
    () => {
      handleReveal(self);
    }
  );
  Variable.derive([bind(audioService.defaultSpeaker, "volume"), bind(audioService.defaultSpeaker, "mute")], () => {
    handleReveal(self);
  });
};

// src/components/osd/label/helpers.ts
var setupOsdLabel = (self) => {
  self.hook(brightnessService, "notify::screen", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.label = `${Math.round(brightnessService.screen * 100)}`;
  });
  self.hook(brightnessService, "notify::kbd", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.label = `${Math.round(brightnessService.kbd * 100)}`;
  });
  Variable.derive([bind(audioService.defaultMicrophone, "volume")], () => {
    self.toggleClassName("overflow", audioService.defaultMicrophone.volume > 1);
    self.label = `${Math.round(audioService.defaultMicrophone.volume * 100)}`;
  });
  Variable.derive([bind(audioService.defaultMicrophone, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService.defaultMicrophone.volume > 1 && (!options.theme.osd.muted_zero.value || audioService.defaultMicrophone.mute === false)
    );
    const inputVolume = options.theme.osd.muted_zero.value && audioService.defaultMicrophone.mute !== false ? 0 : Math.round(audioService.defaultMicrophone.volume * 100);
    self.label = `${inputVolume}`;
  });
  Variable.derive([bind(audioService.defaultSpeaker, "volume")], () => {
    self.toggleClassName("overflow", audioService.defaultSpeaker.volume > 1);
    self.label = `${Math.round(audioService.defaultSpeaker.volume * 100)}`;
  });
  Variable.derive([bind(audioService.defaultSpeaker, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService.defaultSpeaker.volume > 1 && (!options.theme.osd.muted_zero.value || audioService.defaultSpeaker.mute === false)
    );
    const speakerVolume = options.theme.osd.muted_zero.value && audioService.defaultSpeaker.mute !== false ? 0 : Math.round(audioService.defaultSpeaker.volume * 100);
    self.label = `${speakerVolume}`;
  });
};

// src/components/osd/label/index.tsx
var OSDLabel = () => {
  return /* @__PURE__ */ jsx2("box", { className: "osd-label-container", hexpand: true, vexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "osd-label",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      setup: setupOsdLabel,
      hexpand: true,
      vexpand: true
    }
  ) });
};

// src/components/shared/LevelBar.tsx
var LevelBar2 = class extends astalify(Gtk4.LevelBar) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of LevelBar.
   * @param props - The properties for the LevelBar component.
   * @memberof LevelBar
   */
  constructor(props) {
    super(props);
  }
};
var LevelBar_default = LevelBar2;

// src/components/osd/bar/helpers.ts
var setupOsdBar = (self) => {
  self.hook(brightnessService, "notify::screen", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.value = brightnessService.screen;
  });
  self.hook(brightnessService, "notify::kbd", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.value = brightnessService.kbd;
  });
  Variable.derive([bind(audioService.defaultMicrophone, "volume")], () => {
    self.toggleClassName("overflow", audioService.defaultMicrophone.volume > 1);
    self.value = audioService.defaultMicrophone.volume <= 1 ? audioService.defaultMicrophone.volume : audioService.defaultMicrophone.volume - 1;
  });
  Variable.derive([bind(audioService.defaultMicrophone, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService.defaultMicrophone.volume > 1 && (!options.theme.osd.muted_zero.get() || audioService.defaultMicrophone.mute === false)
    );
    self.value = options.theme.osd.muted_zero.get() && audioService.defaultMicrophone.mute !== false ? 0 : audioService.defaultMicrophone.volume <= 1 ? audioService.defaultMicrophone.volume : audioService.defaultMicrophone.volume - 1;
  });
  Variable.derive([bind(audioService.defaultSpeaker, "volume")], () => {
    self.toggleClassName("overflow", audioService.defaultSpeaker.volume > 1);
    self.value = audioService.defaultSpeaker.volume <= 1 ? audioService.defaultSpeaker.volume : audioService.defaultSpeaker.volume - 1;
  });
  Variable.derive([bind(audioService.defaultSpeaker, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService.defaultSpeaker.volume > 1 && (!options.theme.osd.muted_zero.get() || audioService.defaultSpeaker.mute === false)
    );
    self.value = options.theme.osd.muted_zero.get() && audioService.defaultSpeaker.mute !== false ? 0 : audioService.defaultSpeaker.volume <= 1 ? audioService.defaultSpeaker.volume : audioService.defaultSpeaker.volume - 1;
  });
};

// src/components/osd/bar/index.tsx
var OSDBar = ({ orientation: orientation2 }) => {
  const barOrientation = orientation2 === "vertical" ? Gtk4.Orientation.VERTICAL : Gtk4.Orientation.HORIZONTAL;
  return /* @__PURE__ */ jsx2("box", { className: "osd-bar-container", children: /* @__PURE__ */ jsx2(
    LevelBar_default,
    {
      className: "osd-bar",
      orientation: barOrientation,
      inverted: orientation2 === "vertical",
      mode: Gtk4.LevelBarMode.CONTINUOUS,
      setup: setupOsdBar
    }
  ) });
};

// src/components/osd/icon/helpers.ts
var setupOsdIcon = (self) => {
  self.hook(brightnessService, "notify::screen", () => {
    self.label = "\u{F1356}";
  });
  self.hook(brightnessService, "notify::kbd", () => {
    self.label = "\u{F097B}";
  });
  const micVariable = Variable.derive(
    [bind(audioService.defaultMicrophone, "volume"), bind(audioService.defaultMicrophone, "mute")],
    () => {
      self.label = audioService.defaultMicrophone.mute ? "\u{F036D}" : "\u{F036C}";
    }
  );
  const speakerVariable = Variable.derive(
    [bind(audioService.defaultSpeaker, "volume"), bind(audioService.defaultSpeaker, "mute")],
    () => {
      self.label = audioService.defaultSpeaker.mute ? "\u{F075F}" : "\u{F057E}";
    }
  );
  return {
    micVariable,
    speakerVariable
  };
};

// src/components/osd/icon/index.tsx
var OSDIcon = () => {
  return /* @__PURE__ */ jsx2("box", { className: "osd-icon-container", hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "osd-icon txt-icon",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      setup: setupOsdIcon,
      expand: true
    }
  ) });
};

// src/components/osd/OsdRevealer.tsx
var { orientation } = options_default.theme.osd;
var VerticalOsd = ({ currentOrientation }) => /* @__PURE__ */ jsxs("box", { vertical: true, children: [
  /* @__PURE__ */ jsx2(OSDLabel, {}),
  /* @__PURE__ */ jsx2(OSDBar, { orientation: currentOrientation }),
  /* @__PURE__ */ jsx2(OSDIcon, {})
] });
var HorizontalOsd = ({ currentOrientation }) => /* @__PURE__ */ jsxs("box", { children: [
  /* @__PURE__ */ jsx2(OSDIcon, {}),
  /* @__PURE__ */ jsx2(OSDBar, { orientation: currentOrientation }),
  /* @__PURE__ */ jsx2(OSDLabel, {})
] });
var OsdRevealer = () => {
  const osdOrientation = bind(orientation).as((currentOrientation) => currentOrientation === "vertical");
  return /* @__PURE__ */ jsx2("revealer", { transitionType: Gtk4.RevealerTransitionType.CROSSFADE, revealChild: false, setup: revealerSetup, children: /* @__PURE__ */ jsx2("box", { className: "osd-container", vertical: osdOrientation, children: bind(orientation).as((currentOrientation) => {
    if (currentOrientation === "vertical") {
      return /* @__PURE__ */ jsx2(VerticalOsd, { currentOrientation });
    }
    return /* @__PURE__ */ jsx2(HorizontalOsd, { currentOrientation });
  }) }) });
};

// src/components/osd/index.tsx
var { location: location5 } = options_default.theme.osd;
var osd_default = () => {
  return /* @__PURE__ */ jsx2(
    "window",
    {
      monitor: getOsdMonitor()(),
      name: "indicator",
      namespace: "indicator",
      className: "indicator",
      visible: true,
      layer: bind(options_default.tear).as((tear2) => tear2 ? Astal7.Layer.TOP : Astal7.Layer.OVERLAY),
      anchor: bind(location5).as((anchorPoint) => getPosition(anchorPoint)),
      setup: (self) => {
        getOsdMonitor().subscribe(() => {
          self.set_click_through(true);
        });
      },
      clickThrough: true,
      children: /* @__PURE__ */ jsx2(OsdRevealer, {})
    }
  );
};

// src/components/menus/shared/dropdown/helpers.ts
var handleRealization = async (name2) => {
  try {
    const appWindow = app_default.get_window(name2);
    if (!appWindow) {
      return;
    }
    const coords = [1e5, 1e5];
    await calculateMenuPosition(coords, name2);
    appWindow?.set_visible(true);
    while (Gtk4.events_pending()) {
      Gtk4.main_iteration();
    }
    appWindow?.set_visible(false);
    await calculateMenuPosition([0, 0], name2);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Error realizing ${name2}: ${error.message}`);
    }
    console.error(`Error realizing ${name2}: ${error}`);
  }
};

// src/lib/behaviors/autoHide.ts
var { autoHide: autoHide2 } = options_default.bar;
var focusedClient = (focusedClient2) => {
  const fullscreenBinding = bind(focusedClient2, "fullscreen");
  if (!focusedClient2) {
    return;
  }
  Variable.derive([bind(fullscreenBinding)], (isFullScreen) => {
    if (autoHide2.get() === "fullscreen") {
      app_default.get_window(`bar-${focusedClient2.monitor.id}`)?.set_visible(!isFullScreen);
    }
  });
};
var initializeAutoHide = () => {
  Variable.derive([bind(autoHide2), bind(forceUpdater), bind(hyprlandService, "workspaces")], (shouldAutohide) => {
    if (shouldAutohide === "never") {
      hyprlandService.get_monitors().forEach((monitor3) => {
        app_default.get_window(`bar-${monitor3.id}`)?.set_visible(true);
      });
    }
    hyprlandService.get_workspaces().map((workspace) => {
      if (autoHide2.get() === "single-window") {
        app_default.get_window(`bar-${workspace.monitor.id}`)?.set_visible(workspace.get_clients().length !== 1);
      }
    });
  });
  Variable.derive([bind(hyprlandService, "focusedClient")], (currentClient) => {
    focusedClient(currentClient);
  });
  Variable.derive([bind(autoHide2)], (shouldAutohide) => {
    if (shouldAutohide === "fullscreen") {
      hyprlandService.get_workspaces().forEach((workspace) => {
        app_default.get_window(`bar-${workspace.monitor.id}`)?.set_visible(!workspace.hasFullscreen);
      });
    }
  });
};

// src/lib/behaviors/batteryWarning.ts
function warnOnLowBattery() {
  let sentLowNotification = false;
  let sentHalfLowNotification = false;
  batteryService.connect("notify::charging", () => {
    if (batteryService.charging) {
      sentLowNotification = false;
      sentHalfLowNotification = false;
    }
  });
  batteryService.connect("notify::percentage", () => {
    const { lowBatteryThreshold, lowBatteryNotification, lowBatteryNotificationText, lowBatteryNotificationTitle } = options.menus.power;
    if (!lowBatteryNotification.get() || batteryService.charging) {
      return;
    }
    const batteryPercentage = Math.floor(batteryService.percentage * 100);
    const lowThreshold = lowBatteryThreshold.get();
    let sendNotification = false;
    if (!sentLowNotification && batteryPercentage <= lowThreshold) {
      sentLowNotification = true;
      sendNotification = true;
    }
    if (!sentHalfLowNotification && batteryPercentage <= lowThreshold / 2) {
      sentHalfLowNotification = true;
      sendNotification = true;
    }
    if (sendNotification) {
      Notify({
        summary: lowBatteryNotificationTitle.get().replaceAll("$POWER_LEVEL", batteryPercentage.toString()),
        body: lowBatteryNotificationText.get().replaceAll("$POWER_LEVEL", batteryPercentage.toString()),
        iconName: icons_default.ui.warning,
        urgency: "critical"
      });
    }
  });
}

// src/lib/behaviors/hyprlandRules.ts
var floatSettingsDialog = () => {
  hyprlandService.message(`keyword windowrulev2 float, title:^(hyprpanel-settings)$`);
  hyprlandService.connect("config-reloaded", () => {
    hyprlandService.message(`keyword windowrulev2 float, title:^(hyprpanel-settings)$`);
  });
};
var floatFilePicker = () => {
  hyprlandService.message(`keyword windowrulev2 float, title:^((Save|Import) Hyprpanel.*)$`);
  hyprlandService.connect("config-reloaded", () => {
    hyprlandService.message(`keyword windowrulev2 float, title:^((Save|Import) Hyprpanel.*)$`);
  });
};
var hyprlandSettings = () => {
  floatSettingsDialog();
  floatFilePicker();
};

// src/lib/behaviors/index.ts
var initializeSystemBehaviors = () => {
  warnOnLowBattery();
  initializeAutoHide();
  hyprlandSettings();
};

// src/cli/commander/Registry.ts
var CommandRegistry = class {
  commands = /* @__PURE__ */ new Map();
  /**
   * Registers a command. If a command with the same name or alias already exists,
   * it will throw an error.
   *
   * @param command - The command to register.
   * @throws If a command with the same name or alias already exists.
   */
  register(command) {
    if (this.commands.has(command.name)) {
      throw new Error(`Command "${command.name}" is already registered.`);
    }
    this.commands.set(command.name, command);
    if (command.aliases) {
      for (const alias of command.aliases) {
        if (this.commands.has(alias)) {
          throw new Error(`Alias "${alias}" is already in use.`);
        }
        this.commands.set(alias, command);
      }
    }
  }
  /**
   * Retrieves a command by its name or alias. Returns undefined if not found.
   *
   * @param commandName - The name or alias of the command to retrieve.
   * @returns The command if found, otherwise undefined.
   */
  get(commandName) {
    return this.commands.get(commandName);
  }
  /**
   * Retrieves all registered commands, ensuring each command is returned once even if it has aliases.
   *
   * @returns An array of all registered commands.
   */
  getAll() {
    const unique = new Set(this.commands.values());
    return Array.from(unique);
  }
};

// src/cli/commander/Parser.ts
var CommandParser = class {
  registry;
  /**
   * Constructs a CommandParser with the provided command registry.
   *
   * @param registry - The command registry containing available commands.
   */
  constructor(registry2) {
    this.registry = registry2;
  }
  /**
   * Parses the entire input string, returning the matching command and its arguments.
   *
   * @param input - The raw input string to parse.
   * @returns A parsed command object, including the command and its arguments.
   * @throws If no command token is found.
   * @throws If the command token is not registered.
   */
  parse(input) {
    const tokens = this.tokenize(input);
    if (tokens.length === 0) {
      throw new Error("No command provided.");
    }
    const commandName = tokens.shift();
    const command = this.registry.get(commandName);
    if (!command) {
      throw new Error(`Unknown command: "${commandName}". Use "hyprpanel explain" for available commands.`);
    }
    const args = this.parseArgs(command, tokens);
    return { command, args };
  }
  /**
   * Splits the input string into tokens, respecting quotes.
   *
   * @param input - The raw input string to break into tokens.
   * @returns An array of tokens.
   */
  tokenize(input) {
    const regex = /(?:[^\s"']+|"[^"]*"|'[^']*')+/g;
    const matches = input.match(regex);
    return matches ? matches.map((token) => this.stripQuotes(token)) : [];
  }
  /**
   * Removes surrounding quotes from a single token, if they exist.
   *
   * @param str - The token from which to strip leading or trailing quotes.
   * @returns The token without its outer quotes.
   */
  stripQuotes(str) {
    return str.replace(/^["'](.+(?=["']$))["']$/, "$1");
  }
  /**
   * Parses the array of tokens into arguments based on the command's argument definitions.
   *
   * @param command - The command whose arguments are being parsed.
   * @param tokens - The list of tokens extracted from the input.
   * @returns An object mapping argument names to their parsed values.
   * @throws If required arguments are missing.
   * @throws If there are too many tokens for the command definition.
   */
  parseArgs(command, tokens) {
    const args = {};
    let currentIndex = 0;
    for (const argDef of command.args) {
      if (currentIndex >= tokens.length) {
        if (argDef.required) {
          throw new Error(`Missing required argument: "${argDef.name}".`);
        }
        if (argDef.default !== void 0) {
          args[argDef.name] = argDef.default;
        }
        continue;
      }
      if (argDef.type === "object") {
        const { objectValue, nextIndex } = this.parseObjectTokens(tokens, currentIndex);
        args[argDef.name] = objectValue;
        currentIndex = nextIndex;
      } else {
        const value = tokens[currentIndex];
        currentIndex++;
        args[argDef.name] = this.convertType(value, argDef.type);
      }
    }
    if (currentIndex < tokens.length) {
      throw new Error(
        `Too many arguments for command "${command.name}". Expected at most ${command.args.length}.`
      );
    }
    return args;
  }
  /**
   * Accumulates tokens until braces are balanced to form a valid JSON string,
   * then parses the result.
   *
   * @param tokens - The list of tokens extracted from the input.
   * @param startIndex - The token index from which to begin JSON parsing.
   * @returns An object containing the parsed JSON object and the next token index.
   * @throws If the reconstructed JSON is invalid.
   */
  parseObjectTokens(tokens, startIndex) {
    let braceCount = 0;
    let started = false;
    const objectTokens = [];
    let currentIndex = startIndex;
    while (currentIndex < tokens.length) {
      const token = tokens[currentIndex];
      currentIndex++;
      for (const char of token) {
        if (char === "{") braceCount++;
        if (char === "}") braceCount--;
      }
      objectTokens.push(token);
      if (started && braceCount === 0) break;
      if (token.includes("{")) started = true;
    }
    const objectString = objectTokens.join(" ");
    let parsed;
    try {
      parsed = JSON.parse(objectString);
    } catch {
      throw new Error(`Invalid JSON object: "${objectString}".`);
    }
    return { objectValue: parsed, nextIndex: currentIndex };
  }
  /**
   * Converts a single token to the specified argument type.
   *
   * @param value - The raw token to be converted.
   * @param type - The expected argument type.
   * @returns The converted value.
   * @throws If the token cannot be converted to the expected type.
   */
  convertType(value, type) {
    switch (type) {
      case "number": {
        const num = Number(value);
        if (isNaN(num)) {
          throw new Error(`Expected a number but got "${value}".`);
        }
        return num;
      }
      case "boolean": {
        const lower = value.toLowerCase();
        if (lower === "true") return true;
        if (lower === "false") return false;
        throw new Error(`Expected a boolean (true/false) but got "${value}".`);
      }
      case "object": {
        try {
          return JSON.parse(value);
        } catch {
          throw new Error(`Invalid JSON object: "${value}".`);
        }
      }
      case "string":
      default:
        return value;
    }
  }
};

// src/cli/commander/RequestHandler.ts
var RequestHandler = class {
  parser;
  /**
   * Creates an instance of RequestHandler.
   *
   * @param parser - The CommandParser instance to use.
   */
  constructor(parser2) {
    this.parser = parser2;
  }
  /**
   * Initializes the request handler with the given input and response callback.
   *
   * @param input - The input string to process.
   * @param response - The callback to handle the response.
   * @returns A promise that resolves when the request is handled.
   */
  async initializeRequestHandler(input, response) {
    try {
      const parsed = this.parser.parse(input);
      const { command, args } = parsed;
      const result = command.handler(args);
      if (result instanceof Promise) {
        const resolved = await result;
        response(this.formatOutput(resolved));
      } else {
        response(this.formatOutput(result));
      }
    } catch (error) {
      response(this.formatError(error));
    }
  }
  /**
   * Formats the output based on its type.
   *
   * @param output - The output to format.
   * @returns A string representation of the output.
   */
  formatOutput(output) {
    if (typeof output === "string") {
      return output;
    } else if (typeof output === "number" || typeof output === "boolean") {
      return output.toString();
    } else if (typeof output === "object" && output !== null) {
      try {
        return JSON.stringify(output, null, 2);
      } catch {
        return "Unable to display object.";
      }
    } else {
      return String(output);
    }
  }
  /**
   * Formats the error based on its type.
   *
   * @param error - The error to format.
   * @returns A string representation of the error.
   */
  formatError(error) {
    if (error instanceof Error) {
      return `Error: ${error.message}`;
    } else if (typeof error === "string") {
      return `Error: ${error}`;
    } else if (typeof error === "object" && error !== null) {
      try {
        return `Error: ${JSON.stringify(error, null, 2)}`;
      } catch {
        return "An unknown error occurred.";
      }
    } else {
      return `Error: ${String(error)}`;
    }
  }
};

// src/cli/commander/helpers/index.ts
var ANSI_RESET = "\x1B[0m";
var ANSI_BOLD = "\x1B[1m";
var ANSI_FG_RED = "\x1B[31m";
var ANSI_FG_GREEN = "\x1B[32m";
var ANSI_FG_YELLOW = "\x1B[33m";
var ANSI_FG_BLUE = "\x1B[34m";
var ANSI_FG_MAGENTA = "\x1B[35m";
var ANSI_FG_CYAN = "\x1B[36m";
function createExplainCommand(registry2) {
  return {
    name: "explain",
    aliases: ["e"],
    description: "Displays explain information for all commands or a specific command.",
    category: "General",
    args: [
      {
        name: "commandName",
        description: "Optional name of a command to get detailed info.",
        type: "string",
        required: false
      }
    ],
    /**
     * Handler for the explain command.
     *
     * @param args - The arguments passed to the command.
     * @returns The formatted explain message.
     */
    handler: (args) => {
      const commandName = args["commandName"];
      if (commandName) {
        return formatCommandExplain(registry2, commandName);
      }
      return formatGlobalExplain(registry2);
    }
  };
}
function formatCommandExplain(registry2, commandName) {
  const cmd = registry2.get(commandName);
  if (!cmd) {
    return `${ANSI_FG_RED}\u2716 No such command: "${commandName}". Use "explain" to see all commands.${ANSI_RESET}
`;
  }
  let message = `${ANSI_BOLD}${ANSI_FG_YELLOW}Command: ${cmd.name}${ANSI_RESET}
`;
  if (cmd.aliases && cmd.aliases.length > 0) {
    const aliases = formatAliases(cmd.aliases);
    message += `${ANSI_FG_GREEN}Aliases:${ANSI_RESET} ${aliases}
`;
  }
  message += `${ANSI_FG_GREEN}Description:${ANSI_RESET} ${cmd.description}
`;
  message += `${ANSI_FG_GREEN}Category:${ANSI_RESET} ${cmd.category}
`;
  if (cmd.args.length > 0) {
    message += `${ANSI_FG_GREEN}Arguments:${ANSI_RESET}
`;
    const formattedArgs = formatArguments(cmd.args);
    message += formattedArgs;
  } else {
    message += `${ANSI_FG_GREEN}No positional arguments.${ANSI_RESET}`;
  }
  return message;
}
function formatGlobalExplain(registry2) {
  const allCommands = registry2.getAll();
  const categoryMap = organizeCommandsByCategory(allCommands);
  let explainMessage = `${ANSI_BOLD}${ANSI_FG_CYAN}Available HyprPanel Commands:${ANSI_RESET}
`;
  for (const [category, cmds] of Object.entries(categoryMap)) {
    explainMessage += `
${ANSI_BOLD}${ANSI_FG_BLUE}${category}${ANSI_RESET}
`;
    const formattedCommands = formatCommandList(cmds);
    explainMessage += formattedCommands;
  }
  explainMessage += `
${ANSI_FG_MAGENTA}Use "hyprpanel explain <commandName>" to get detailed information about a specific hyprpanel command.${ANSI_RESET}
`;
  return explainMessage.trim();
}
function organizeCommandsByCategory(commands) {
  const categoryMap = {};
  commands.forEach((cmd) => {
    if (!categoryMap[cmd.category]) {
      categoryMap[cmd.category] = [];
    }
    categoryMap[cmd.category].push(cmd);
  });
  return categoryMap;
}
function formatCommandList(commands) {
  return commands.map((cmd) => {
    const aliasesText = cmd.aliases && cmd.aliases.length > 0 ? ` (${cmd.aliases.map((alias) => `${ANSI_FG_CYAN}${alias}${ANSI_RESET}`).join(", ")})` : "";
    return `  - ${ANSI_FG_YELLOW}${cmd.name}${ANSI_RESET}${aliasesText}: ${cmd.description}`;
  }).join("\n") + "\n";
}
function formatAliases(aliases) {
  return aliases.map((alias) => `${ANSI_FG_CYAN}${alias}${ANSI_RESET}`).join(", ");
}
function formatArguments(args) {
  return args.map((arg) => {
    const requirement = arg.required ? `${ANSI_FG_RED}(required)` : `${ANSI_FG_CYAN}(optional)`;
    const defaultValue2 = arg.default !== void 0 ? ` ${ANSI_FG_MAGENTA}[default: ${JSON.stringify(arg.default)}]${ANSI_RESET}` : "";
    return `  ${ANSI_FG_YELLOW}${arg.name}${ANSI_RESET}: ${arg.description} ${requirement}${defaultValue2}`;
  }).join("\n") + "\n";
}

// src/cli/commander/commands/appearance/index.ts
var appearanceCommands = [
  {
    name: "setWallpaper",
    aliases: ["sw"],
    description: "Sets the wallpaper based on the provided input.",
    category: "Appearance",
    args: [
      {
        name: "path",
        description: "Path to the wallpaper image.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        setWallpaper(args["path"]);
        return "Wallpaper set successfully.";
      } catch (error) {
        if (error instanceof Error) {
          return `Error setting wallpaper: ${error.message}`;
        }
        return `Error setting wallpaper: ${error}`;
      }
    }
  },
  {
    name: "useTheme",
    aliases: ["ut"],
    description: "Sets the theme based on the provided input.",
    category: "Appearance",
    args: [
      {
        name: "path",
        description: "Path to the JSON file of the HyprPanel theme.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        useTheme(args["path"]);
        return "Theme set successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "setLayout",
    aliases: ["slo"],
    description: "Sets the layout of the modules on the bar.",
    category: "Appearance",
    args: [
      {
        name: "layout",
        description: "Bar layout to apply. Wiki: https://hyprpanel.com/configuration/panel.html#layouts",
        type: "object",
        required: true
      }
    ],
    handler: (args) => {
      try {
        setLayout(args["layout"]);
        return "Layout applied successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/cli/commander/commands/utility/checkDependencies.ts
var RED = "\x1B[31m";
var GREEN = "\x1B[32m";
var YELLOW = "\x1B[33m";
var RESET = "\x1B[0m";
var BOLD = "\x1B[1m";
var STATUS_INSTALLED = "(INSTALLED)";
var STATUS_ACTIVE = "(ACTIVE)";
var STATUS_DISABLED = "(DISABLED)";
var STATUS_MISSING = "(MISSING)";
function decodeOutput(output) {
  const decoder = new TextDecoder();
  return decoder.decode(output).trim();
}
function runCommand(command) {
  const [, out, err, exitCode] = default2.spawn_command_line_sync(command);
  const stdout = out ? decodeOutput(out) : "";
  const stderr = err ? decodeOutput(err) : "";
  return {
    exitCode,
    stdout,
    stderr
  };
}
function colorText(text, color2) {
  return `${color2}${text}${RESET}`;
}
function checkExecutable(executables) {
  for (const exe of executables) {
    const { exitCode } = runCommand(`which ${exe}`);
    if (exitCode === 0) {
      return true;
    }
  }
  return false;
}
function checkLibrary(libraries) {
  for (const lib of libraries) {
    const { exitCode, stdout } = runCommand(`sh -c "ldconfig -p | grep ${lib}"`);
    if (exitCode === 0 && stdout.length > 0) {
      return true;
    }
  }
  return false;
}
function checkServiceStatus(services) {
  for (const svc of services) {
    const activeResult = runCommand(`systemctl is-active ${svc}`);
    const activeStatus = activeResult.stdout;
    if (activeStatus === "active") {
      return "ACTIVE";
    }
    if (activeStatus === "inactive" || activeStatus === "failed") {
      const enabledResult = runCommand(`systemctl is-enabled ${svc}`);
      const enabledStatus = enabledResult.stdout;
      if (enabledResult && (enabledStatus === "enabled" || enabledStatus === "static")) {
        return "INSTALLED";
      } else if (enabledResult && enabledStatus === "disabled") {
        return "DISABLED";
      } else {
        return "MISSING";
      }
    }
    if (activeStatus === "unknown" || activeResult.exitCode !== 0) {
      continue;
    }
  }
  return "MISSING";
}
function getDependencyStatus(dep) {
  let status;
  switch (dep.type) {
    case "executable":
      status = checkExecutable(dep.check) ? "INSTALLED" : "MISSING";
      break;
    case "library":
      status = checkLibrary(dep.check) ? "INSTALLED" : "MISSING";
      break;
    case "service":
      status = checkServiceStatus(dep.check);
      break;
    default:
      status = "MISSING";
  }
  let color2;
  let textStatus;
  switch (status) {
    case "ACTIVE":
      textStatus = STATUS_ACTIVE;
      color2 = GREEN;
      break;
    case "INSTALLED":
      textStatus = STATUS_INSTALLED;
      color2 = GREEN;
      break;
    case "DISABLED":
      textStatus = STATUS_DISABLED;
      color2 = YELLOW;
      break;
    case "MISSING":
    default:
      textStatus = STATUS_MISSING;
      color2 = RED;
      break;
  }
  if (!dep.description) {
    return `  ${colorText(textStatus, color2)} ${dep.package}`;
  }
  return `  ${colorText(textStatus, color2)} ${dep.package}: ${dep.description ?? ""}`;
}
function checkDependencies() {
  try {
    const dependencies2 = [
      {
        package: "wireplumber",
        required: true,
        type: "executable",
        check: ["wireplumber"]
      },
      {
        package: "libgtop",
        required: true,
        type: "library",
        check: ["gtop-2.0"]
      },
      {
        package: "bluez",
        required: true,
        type: "service",
        check: ["bluetooth.service"]
      },
      {
        package: "bluez-utils",
        required: true,
        type: "executable",
        check: ["bluetoothctl"]
      },
      {
        package: "networkmanager",
        required: true,
        type: "service",
        check: ["NetworkManager.service"]
      },
      {
        package: "dart-sass",
        required: true,
        type: "executable",
        check: ["sass"]
      },
      {
        package: "wl-clipboard",
        required: true,
        type: "executable",
        check: ["wl-copy", "wl-paste"]
      },
      {
        package: "upower",
        required: true,
        type: "service",
        check: ["upower.service"]
      },
      {
        package: "aylurs-gtk-shell",
        required: true,
        type: "executable",
        check: ["ags"]
      },
      {
        package: "python",
        required: false,
        type: "executable",
        check: ["python", "python3"],
        description: "GPU usage tracking (NVidia only)"
      },
      {
        package: "python-gpustat",
        required: false,
        type: "executable",
        check: ["gpustat"],
        description: "GPU usage tracking (NVidia only)"
      },
      {
        package: "pywal",
        required: false,
        type: "executable",
        check: ["wal"],
        description: "Pywal hook for wallpapers"
      },
      {
        package: "pacman-contrib",
        required: false,
        type: "executable",
        check: ["paccache", "rankmirrors"],
        description: "Checking for pacman updates"
      },
      {
        package: "power-profiles-daemon",
        required: false,
        type: "service",
        check: ["power-profiles-daemon.service"],
        description: "Switch power profiles"
      },
      {
        package: "swww",
        required: false,
        type: "executable",
        check: ["swww"],
        description: "Setting wallpapers"
      },
      {
        package: "grimblast",
        required: false,
        type: "executable",
        check: ["grimblast"],
        description: "For the snapshot shortcut"
      },
      {
        package: "brightnessctl",
        required: false,
        type: "executable",
        check: ["brightnessctl"],
        description: "To control keyboard and screen brightness"
      },
      {
        package: "btop",
        required: false,
        type: "executable",
        check: ["btop"],
        description: "To view system resource usage"
      },
      {
        package: "gpu-screen-recorder",
        required: false,
        type: "executable",
        check: ["gpu-screen-recorder"],
        description: "To use the built-in screen recorder"
      },
      {
        package: "hyprpicker",
        required: false,
        type: "executable",
        check: ["hyprpicker"],
        description: "To use the preset color picker shortcut"
      },
      {
        package: "matugen",
        required: false,
        type: "executable",
        check: ["matugen"],
        description: "To use wallpaper-based color schemes"
      }
    ];
    let output = `${BOLD}Required Dependencies:${RESET}
`;
    for (const dep of dependencies2.filter((d) => d.required)) {
      output += getDependencyStatus(dep) + "\n";
    }
    output += `
${BOLD}Optional Dependencies:${RESET}
`;
    for (const dep of dependencies2.filter((d) => !d.required)) {
      output += getDependencyStatus(dep) + "\n";
    }
    return output;
  } catch (error) {
    errorHandler(error);
  }
}

// src/cli/commander/commands/utility/index.ts
var utilityCommands = [
  {
    name: "systrayItems",
    aliases: ["sti"],
    description: "Gets a list of IDs for the current applications in the system tray.",
    category: "Utility",
    args: [],
    handler: () => {
      try {
        return getSystrayItems();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "clearNotifications",
    aliases: ["cno"],
    description: "Clears all of the notifications that currently exist.",
    category: "Utility",
    args: [],
    handler: () => {
      try {
        clearAllNotifications();
        return "Notifications cleared successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "adjustVolume",
    aliases: ["vol"],
    description: "Adjusts the volume of the default audio output device.",
    category: "Utility",
    args: [
      {
        name: "volume",
        description: "A positive or negative number to adjust the volume by.",
        type: "number",
        required: true
      }
    ],
    handler: (args) => {
      try {
        const speaker = audioService.defaultSpeaker;
        const volumeInput = Number(args["volume"]) / 100;
        if (options.menus.volume.raiseMaximumVolume.get()) {
          speaker.set_volume(Math.min(speaker.volume + volumeInput, 1.5));
        } else {
          speaker.set_volume(Math.min(speaker.volume + volumeInput, 1));
        }
        return Math.round((speaker.volume + volumeInput) * 100);
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "migrateConfig",
    aliases: ["mcfg"],
    description: "Migrates the configuration file from the old location to the new one.",
    category: "Utility",
    args: [],
    handler: () => {
      const oldPath = `${default2.get_user_cache_dir()}/ags/hyprpanel/options.json`;
      try {
        const oldFile = Gio.File.new_for_path(oldPath);
        const newFile = Gio.File.new_for_path(CONFIG);
        if (oldFile.query_exists(null)) {
          oldFile.move(newFile, Gio.FileCopyFlags.OVERWRITE, null, null);
          return `Configuration file moved to ${CONFIG}`;
        } else {
          return `Old configuration file does not exist at ${oldPath}`;
        }
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "checkDependencies",
    aliases: ["chd"],
    description: "Checks the status of required and optional dependencies.",
    category: "Utility",
    args: [],
    handler: () => {
      try {
        return checkDependencies();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "restart",
    aliases: ["r"],
    description: "Restarts HyprPanel.",
    category: "Utility",
    args: [],
    handler: () => {
      try {
        execAsync('bash -c "hyprpanel -q; hyprpanel"');
        return "";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "quit",
    aliases: ["q"],
    description: "Quits HyprPanel.",
    category: "Utility",
    args: [],
    handler: () => {
      try {
        execAsync('bash -c "hyprpanel -q"');
        return "";
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/cli/commander/commands/windowManagement/index.ts
var windowManagementCommands = [
  {
    name: "isWindowVisible",
    aliases: ["iwv"],
    description: "Checks if a specified window is visible.",
    category: "Window Management",
    args: [
      {
        name: "window",
        description: "Name of the window to check.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      return isWindowVisible(args["window"]);
    }
  },
  {
    name: "toggleWindow",
    aliases: ["t"],
    description: "Toggles the visibility of a specified window.",
    category: "Window Management",
    args: [
      {
        name: "window",
        description: "The name of the window to toggle.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        const windowName = args["window"];
        const foundWindow = app_default.get_window(windowName);
        if (!foundWindow) {
          throw new Error(`Window ${args["window"]} not found.`);
        }
        const windowStatus = foundWindow.visible ? "hidden" : "visible";
        app_default.toggle_window(windowName);
        return windowStatus;
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "listWindows",
    aliases: ["lw"],
    description: "Gets a list of all HyprPanel windows.",
    category: "Window Management",
    args: [],
    handler: () => {
      try {
        const windowList = app_default.get_windows().map((window) => window.name);
        return windowList.join("\n");
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/cli/commander/InitializeCommand.ts
function initializeCommands(registry2) {
  const commandList = [...appearanceCommands, ...utilityCommands, ...windowManagementCommands];
  commandList.forEach((command) => registry2.register(command));
  registry2.register(createExplainCommand(registry2));
}

// src/cli/commander/index.ts
var registry = new CommandRegistry();
initializeCommands(registry);
var parser = new CommandParser(registry);
var handler = new RequestHandler(parser);
function runCLI(input, response) {
  handler.initializeRequestHandler(input, response).catch((err) => {
    response({ error: err instanceof Error ? err.message : String(err) });
  });
}

// app.ts
var initializeStartupScripts = () => {
  execAsync(`python3 ${SRC_DIR}/scripts/bluetooth.py`).catch((err) => console.error(err));
};
var initializeMenus = () => {
  StandardWindows.forEach((window) => {
    return window();
  });
  DropdownMenus.forEach((window) => {
    return window();
  });
  DropdownMenus.forEach((window) => {
    const windowName = window.name.replace("_default", "").concat("menu").toLowerCase();
    if (!isDropdownMenu(windowName)) {
      return;
    }
    handleRealization(windowName);
  });
};
app_default.start({
  instanceName: "hyprpanel",
  requestHandler(request, res) {
    runCLI(request, res);
  },
  main() {
    initializeStartupScripts();
    notifications_default2();
    osd_default();
    forMonitors(Bar).forEach((bar) => bar);
    settings_default();
    initializeMenus();
    initializeSystemBehaviors();
  }
});
hyprlandService.connect("monitor-added", () => {
  const { restartCommand: restartCommand3 } = options_default.hyprpanel;
  if (options_default.hyprpanel.restartAgs.get()) {
    bash(restartCommand3.get());
  }
});
//# sourceMappingURL=data:application/json;base64,
